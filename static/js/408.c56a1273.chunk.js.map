{"version":3,"file":"static/js/408.c56a1273.chunk.js","mappings":"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","sources":["../node_modules/@firebase/util/src/constants.ts","../node_modules/@firebase/util/src/assert.ts","../node_modules/@firebase/util/src/crypt.ts","../node_modules/@firebase/util/src/deepCopy.ts","../node_modules/@firebase/util/src/environment.ts","../node_modules/@firebase/util/src/defaults.ts","../node_modules/@firebase/util/src/deferred.ts","../node_modules/@firebase/util/src/emulator.ts","../node_modules/@firebase/util/src/errors.ts","../node_modules/@firebase/util/src/json.ts","../node_modules/@firebase/util/src/jwt.ts","../node_modules/@firebase/util/src/obj.ts","../node_modules/@firebase/util/src/query.ts","../node_modules/@firebase/util/src/sha1.ts","../node_modules/@firebase/util/src/subscribe.ts","../node_modules/@firebase/util/src/validation.ts","../node_modules/@firebase/util/src/utf8.ts","../node_modules/@firebase/util/src/exponential_backoff.ts","../node_modules/@firebase/util/src/compat.ts","../node_modules/@firebase/database/src/core/version.ts","../node_modules/@firebase/database/src/core/storage/DOMStorageWrapper.ts","../node_modules/@firebase/database/src/core/storage/MemoryStorage.ts","../node_modules/@firebase/database/src/core/storage/storage.ts","../node_modules/@firebase/database/src/core/util/util.ts","../node_modules/@firebase/database/src/core/AppCheckTokenProvider.ts","../node_modules/@firebase/database/src/core/AuthTokenProvider.ts","../node_modules/@firebase/database/src/realtime/Constants.ts","../node_modules/@firebase/database/src/core/RepoInfo.ts","../node_modules/@firebase/database/src/core/stats/StatsCollection.ts","../node_modules/@firebase/database/src/core/stats/StatsManager.ts","../node_modules/@firebase/database/src/realtime/polling/PacketReceiver.ts","../node_modules/@firebase/database/src/realtime/BrowserPollConnection.ts","../node_modules/@firebase/database/src/realtime/WebSocketConnection.ts","../node_modules/@firebase/database/src/realtime/TransportManager.ts","../node_modules/@firebase/database/src/realtime/Connection.ts","../node_modules/@firebase/database/src/core/ServerActions.ts","../node_modules/@firebase/database/src/core/util/EventEmitter.ts","../node_modules/@firebase/database/src/core/util/OnlineMonitor.ts","../node_modules/@firebase/database/src/core/util/Path.ts","../node_modules/@firebase/database/src/core/util/VisibilityMonitor.ts","../node_modules/@firebase/database/src/core/PersistentConnection.ts","../node_modules/@firebase/database/src/core/snap/indexes/KeyIndex.ts","../node_modules/@firebase/database/src/core/snap/Node.ts","../node_modules/@firebase/database/src/core/snap/indexes/Index.ts","../node_modules/@firebase/database/src/core/util/SortedMap.ts","../node_modules/@firebase/database/src/core/snap/snap.ts","../node_modules/@firebase/database/src/core/snap/comparators.ts","../node_modules/@firebase/database/src/core/snap/LeafNode.ts","../node_modules/@firebase/database/src/core/snap/indexes/PriorityIndex.ts","../node_modules/@firebase/database/src/core/snap/IndexMap.ts","../node_modules/@firebase/database/src/core/snap/ChildrenNode.ts","../node_modules/@firebase/database/src/core/snap/childSet.ts","../node_modules/@firebase/database/src/core/snap/nodeFromJSON.ts","../node_modules/@firebase/database/src/core/snap/indexes/PathIndex.ts","../node_modules/@firebase/database/src/core/snap/indexes/ValueIndex.ts","../node_modules/@firebase/database/src/core/util/NextPushId.ts","../node_modules/@firebase/database/src/core/view/Change.ts","../node_modules/@firebase/database/src/core/view/QueryParams.ts","../node_modules/@firebase/database/src/core/ReadonlyRestClient.ts","../node_modules/@firebase/database/src/core/SnapshotHolder.ts","../node_modules/@firebase/database/src/core/SparseSnapshotTree.ts","../node_modules/@firebase/database/src/core/operation/Operation.ts","../node_modules/@firebase/database/src/core/stats/StatsListener.ts","../node_modules/@firebase/database/src/core/stats/StatsReporter.ts","../node_modules/@firebase/database/src/core/util/ImmutableTree.ts","../node_modules/@firebase/database/src/core/operation/AckUserWrite.ts","../node_modules/@firebase/database/src/core/operation/Overwrite.ts","../node_modules/@firebase/database/src/core/operation/Merge.ts","../node_modules/@firebase/database/src/core/view/CacheNode.ts","../node_modules/@firebase/database/src/core/view/EventGenerator.ts","../node_modules/@firebase/database/src/core/view/ViewCache.ts","../node_modules/@firebase/database/src/core/CompoundWrite.ts","../node_modules/@firebase/database/src/core/WriteTree.ts","../node_modules/@firebase/database/src/core/view/ChildChangeAccumulator.ts","../node_modules/@firebase/database/src/core/view/CompleteChildSource.ts","../node_modules/@firebase/database/src/core/view/ViewProcessor.ts","../node_modules/@firebase/database/src/core/SyncPoint.ts","../node_modules/@firebase/database/src/core/view/View.ts","../node_modules/@firebase/database/src/core/SyncTree.ts","../node_modules/@firebase/database/src/core/util/ServerValues.ts","../node_modules/@firebase/database/src/core/util/Tree.ts","../node_modules/@firebase/database/src/core/util/validation.ts","../node_modules/@firebase/database/src/core/view/EventQueue.ts","../node_modules/@firebase/database/src/core/Repo.ts","../node_modules/@firebase/database/src/core/util/libs/parser.ts","../node_modules/@firebase/database/src/api/Reference_impl.ts","../node_modules/@firebase/database/src/api/Database.ts","../node_modules/@firebase/database/src/api/test_access.ts","../node_modules/@firebase/database/src/register.ts","../node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js","../node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js","../node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js","../node_modules/@firebase/app/node_modules/idb/build/wrap-idb-value.js","../node_modules/@firebase/app/node_modules/idb/build/index.js","../node_modules/@firebase/app/src/platformLoggerService.ts","../node_modules/@firebase/app/src/logger.ts","../node_modules/@firebase/app/src/constants.ts","../node_modules/@firebase/app/src/internal.ts","../node_modules/@firebase/app/src/errors.ts","../node_modules/@firebase/app/src/firebaseApp.ts","../node_modules/@firebase/app/src/api.ts","../node_modules/@firebase/app/src/indexeddb.ts","../node_modules/@firebase/app/src/heartbeatService.ts","../node_modules/@firebase/app/src/registerCoreComponents.ts","../node_modules/@firebase/app/src/index.ts","../node_modules/@firebase/component/src/component.ts","../node_modules/@firebase/component/src/constants.ts","../node_modules/@firebase/component/src/provider.ts","../node_modules/@firebase/component/src/component_container.ts","../node_modules/@firebase/logger/src/logger.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Firebase constants.  Some of these (@defines) can be overridden at compile-time.\n */\n\nexport const CONSTANTS = {\n  /**\n   * @define {boolean} Whether this is the client Node.js SDK.\n   */\n  NODE_CLIENT: false,\n  /**\n   * @define {boolean} Whether this is the Admin Node.js SDK.\n   */\n  NODE_ADMIN: false,\n\n  /**\n   * Firebase SDK Version\n   */\n  SDK_VERSION: '${JSCORE_VERSION}'\n};\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { CONSTANTS } from './constants';\n\n/**\n * Throws an error if the provided assertion is falsy\n */\nexport const assert = function (assertion: unknown, message: string): void {\n  if (!assertion) {\n    throw assertionError(message);\n  }\n};\n\n/**\n * Returns an Error object suitable for throwing.\n */\nexport const assertionError = function (message: string): Error {\n  return new Error(\n    'Firebase Database (' +\n      CONSTANTS.SDK_VERSION +\n      ') INTERNAL ASSERT FAILED: ' +\n      message\n  );\n};\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nconst stringToByteArray = function (str: string): number[] {\n  // TODO(user): Use native implementations if/when available\n  const out: number[] = [];\n  let p = 0;\n  for (let i = 0; i < str.length; i++) {\n    let c = str.charCodeAt(i);\n    if (c < 128) {\n      out[p++] = c;\n    } else if (c < 2048) {\n      out[p++] = (c >> 6) | 192;\n      out[p++] = (c & 63) | 128;\n    } else if (\n      (c & 0xfc00) === 0xd800 &&\n      i + 1 < str.length &&\n      (str.charCodeAt(i + 1) & 0xfc00) === 0xdc00\n    ) {\n      // Surrogate Pair\n      c = 0x10000 + ((c & 0x03ff) << 10) + (str.charCodeAt(++i) & 0x03ff);\n      out[p++] = (c >> 18) | 240;\n      out[p++] = ((c >> 12) & 63) | 128;\n      out[p++] = ((c >> 6) & 63) | 128;\n      out[p++] = (c & 63) | 128;\n    } else {\n      out[p++] = (c >> 12) | 224;\n      out[p++] = ((c >> 6) & 63) | 128;\n      out[p++] = (c & 63) | 128;\n    }\n  }\n  return out;\n};\n\n/**\n * Turns an array of numbers into the string given by the concatenation of the\n * characters to which the numbers correspond.\n * @param bytes Array of numbers representing characters.\n * @return Stringification of the array.\n */\nconst byteArrayToString = function (bytes: number[]): string {\n  // TODO(user): Use native implementations if/when available\n  const out: string[] = [];\n  let pos = 0,\n    c = 0;\n  while (pos < bytes.length) {\n    const c1 = bytes[pos++];\n    if (c1 < 128) {\n      out[c++] = String.fromCharCode(c1);\n    } else if (c1 > 191 && c1 < 224) {\n      const c2 = bytes[pos++];\n      out[c++] = String.fromCharCode(((c1 & 31) << 6) | (c2 & 63));\n    } else if (c1 > 239 && c1 < 365) {\n      // Surrogate Pair\n      const c2 = bytes[pos++];\n      const c3 = bytes[pos++];\n      const c4 = bytes[pos++];\n      const u =\n        (((c1 & 7) << 18) | ((c2 & 63) << 12) | ((c3 & 63) << 6) | (c4 & 63)) -\n        0x10000;\n      out[c++] = String.fromCharCode(0xd800 + (u >> 10));\n      out[c++] = String.fromCharCode(0xdc00 + (u & 1023));\n    } else {\n      const c2 = bytes[pos++];\n      const c3 = bytes[pos++];\n      out[c++] = String.fromCharCode(\n        ((c1 & 15) << 12) | ((c2 & 63) << 6) | (c3 & 63)\n      );\n    }\n  }\n  return out.join('');\n};\n\ninterface Base64 {\n  byteToCharMap_: { [key: number]: string } | null;\n  charToByteMap_: { [key: string]: number } | null;\n  byteToCharMapWebSafe_: { [key: number]: string } | null;\n  charToByteMapWebSafe_: { [key: string]: number } | null;\n  ENCODED_VALS_BASE: string;\n  readonly ENCODED_VALS: string;\n  readonly ENCODED_VALS_WEBSAFE: string;\n  HAS_NATIVE_SUPPORT: boolean;\n  encodeByteArray(input: number[] | Uint8Array, webSafe?: boolean): string;\n  encodeString(input: string, webSafe?: boolean): string;\n  decodeString(input: string, webSafe: boolean): string;\n  decodeStringToByteArray(input: string, webSafe: boolean): number[];\n  init_(): void;\n}\n\n// We define it as an object literal instead of a class because a class compiled down to es5 can't\n// be treeshaked. https://github.com/rollup/rollup/issues/1691\n// Static lookup maps, lazily populated by init_()\nexport const base64: Base64 = {\n  /**\n   * Maps bytes to characters.\n   */\n  byteToCharMap_: null,\n\n  /**\n   * Maps characters to bytes.\n   */\n  charToByteMap_: null,\n\n  /**\n   * Maps bytes to websafe characters.\n   * @private\n   */\n  byteToCharMapWebSafe_: null,\n\n  /**\n   * Maps websafe characters to bytes.\n   * @private\n   */\n  charToByteMapWebSafe_: null,\n\n  /**\n   * Our default alphabet, shared between\n   * ENCODED_VALS and ENCODED_VALS_WEBSAFE\n   */\n  ENCODED_VALS_BASE:\n    'ABCDEFGHIJKLMNOPQRSTUVWXYZ' + 'abcdefghijklmnopqrstuvwxyz' + '0123456789',\n\n  /**\n   * Our default alphabet. Value 64 (=) is special; it means \"nothing.\"\n   */\n  get ENCODED_VALS() {\n    return this.ENCODED_VALS_BASE + '+/=';\n  },\n\n  /**\n   * Our websafe alphabet.\n   */\n  get ENCODED_VALS_WEBSAFE() {\n    return this.ENCODED_VALS_BASE + '-_.';\n  },\n\n  /**\n   * Whether this browser supports the atob and btoa functions. This extension\n   * started at Mozilla but is now implemented by many browsers. We use the\n   * ASSUME_* variables to avoid pulling in the full useragent detection library\n   * but still allowing the standard per-browser compilations.\n   *\n   */\n  HAS_NATIVE_SUPPORT: typeof atob === 'function',\n\n  /**\n   * Base64-encode an array of bytes.\n   *\n   * @param input An array of bytes (numbers with\n   *     value in [0, 255]) to encode.\n   * @param webSafe Boolean indicating we should use the\n   *     alternative alphabet.\n   * @return The base64 encoded string.\n   */\n  encodeByteArray(input: number[] | Uint8Array, webSafe?: boolean): string {\n    if (!Array.isArray(input)) {\n      throw Error('encodeByteArray takes an array as a parameter');\n    }\n\n    this.init_();\n\n    const byteToCharMap = webSafe\n      ? this.byteToCharMapWebSafe_!\n      : this.byteToCharMap_!;\n\n    const output = [];\n\n    for (let i = 0; i < input.length; i += 3) {\n      const byte1 = input[i];\n      const haveByte2 = i + 1 < input.length;\n      const byte2 = haveByte2 ? input[i + 1] : 0;\n      const haveByte3 = i + 2 < input.length;\n      const byte3 = haveByte3 ? input[i + 2] : 0;\n\n      const outByte1 = byte1 >> 2;\n      const outByte2 = ((byte1 & 0x03) << 4) | (byte2 >> 4);\n      let outByte3 = ((byte2 & 0x0f) << 2) | (byte3 >> 6);\n      let outByte4 = byte3 & 0x3f;\n\n      if (!haveByte3) {\n        outByte4 = 64;\n\n        if (!haveByte2) {\n          outByte3 = 64;\n        }\n      }\n\n      output.push(\n        byteToCharMap[outByte1],\n        byteToCharMap[outByte2],\n        byteToCharMap[outByte3],\n        byteToCharMap[outByte4]\n      );\n    }\n\n    return output.join('');\n  },\n\n  /**\n   * Base64-encode a string.\n   *\n   * @param input A string to encode.\n   * @param webSafe If true, we should use the\n   *     alternative alphabet.\n   * @return The base64 encoded string.\n   */\n  encodeString(input: string, webSafe?: boolean): string {\n    // Shortcut for Mozilla browsers that implement\n    // a native base64 encoder in the form of \"btoa/atob\"\n    if (this.HAS_NATIVE_SUPPORT && !webSafe) {\n      return btoa(input);\n    }\n    return this.encodeByteArray(stringToByteArray(input), webSafe);\n  },\n\n  /**\n   * Base64-decode a string.\n   *\n   * @param input to decode.\n   * @param webSafe True if we should use the\n   *     alternative alphabet.\n   * @return string representing the decoded value.\n   */\n  decodeString(input: string, webSafe: boolean): string {\n    // Shortcut for Mozilla browsers that implement\n    // a native base64 encoder in the form of \"btoa/atob\"\n    if (this.HAS_NATIVE_SUPPORT && !webSafe) {\n      return atob(input);\n    }\n    return byteArrayToString(this.decodeStringToByteArray(input, webSafe));\n  },\n\n  /**\n   * Base64-decode a string.\n   *\n   * In base-64 decoding, groups of four characters are converted into three\n   * bytes.  If the encoder did not apply padding, the input length may not\n   * be a multiple of 4.\n   *\n   * In this case, the last group will have fewer than 4 characters, and\n   * padding will be inferred.  If the group has one or two characters, it decodes\n   * to one byte.  If the group has three characters, it decodes to two bytes.\n   *\n   * @param input Input to decode.\n   * @param webSafe True if we should use the web-safe alphabet.\n   * @return bytes representing the decoded value.\n   */\n  decodeStringToByteArray(input: string, webSafe: boolean): number[] {\n    this.init_();\n\n    const charToByteMap = webSafe\n      ? this.charToByteMapWebSafe_!\n      : this.charToByteMap_!;\n\n    const output: number[] = [];\n\n    for (let i = 0; i < input.length; ) {\n      const byte1 = charToByteMap[input.charAt(i++)];\n\n      const haveByte2 = i < input.length;\n      const byte2 = haveByte2 ? charToByteMap[input.charAt(i)] : 0;\n      ++i;\n\n      const haveByte3 = i < input.length;\n      const byte3 = haveByte3 ? charToByteMap[input.charAt(i)] : 64;\n      ++i;\n\n      const haveByte4 = i < input.length;\n      const byte4 = haveByte4 ? charToByteMap[input.charAt(i)] : 64;\n      ++i;\n\n      if (byte1 == null || byte2 == null || byte3 == null || byte4 == null) {\n        throw Error();\n      }\n\n      const outByte1 = (byte1 << 2) | (byte2 >> 4);\n      output.push(outByte1);\n\n      if (byte3 !== 64) {\n        const outByte2 = ((byte2 << 4) & 0xf0) | (byte3 >> 2);\n        output.push(outByte2);\n\n        if (byte4 !== 64) {\n          const outByte3 = ((byte3 << 6) & 0xc0) | byte4;\n          output.push(outByte3);\n        }\n      }\n    }\n\n    return output;\n  },\n\n  /**\n   * Lazy static initialization function. Called before\n   * accessing any of the static map variables.\n   * @private\n   */\n  init_() {\n    if (!this.byteToCharMap_) {\n      this.byteToCharMap_ = {};\n      this.charToByteMap_ = {};\n      this.byteToCharMapWebSafe_ = {};\n      this.charToByteMapWebSafe_ = {};\n\n      // We want quick mappings back and forth, so we precompute two maps.\n      for (let i = 0; i < this.ENCODED_VALS.length; i++) {\n        this.byteToCharMap_[i] = this.ENCODED_VALS.charAt(i);\n        this.charToByteMap_[this.byteToCharMap_[i]] = i;\n        this.byteToCharMapWebSafe_[i] = this.ENCODED_VALS_WEBSAFE.charAt(i);\n        this.charToByteMapWebSafe_[this.byteToCharMapWebSafe_[i]] = i;\n\n        // Be forgiving when decoding and correctly decode both encodings.\n        if (i >= this.ENCODED_VALS_BASE.length) {\n          this.charToByteMap_[this.ENCODED_VALS_WEBSAFE.charAt(i)] = i;\n          this.charToByteMapWebSafe_[this.ENCODED_VALS.charAt(i)] = i;\n        }\n      }\n    }\n  }\n};\n\n/**\n * URL-safe base64 encoding\n */\nexport const base64Encode = function (str: string): string {\n  const utf8Bytes = stringToByteArray(str);\n  return base64.encodeByteArray(utf8Bytes, true);\n};\n\n/**\n * URL-safe base64 encoding (without \".\" padding in the end).\n * e.g. Used in JSON Web Token (JWT) parts.\n */\nexport const base64urlEncodeWithoutPadding = function (str: string): string {\n  // Use base64url encoding and remove padding in the end (dot characters).\n  return base64Encode(str).replace(/\\./g, '');\n};\n\n/**\n * URL-safe base64 decoding\n *\n * NOTE: DO NOT use the global atob() function - it does NOT support the\n * base64Url variant encoding.\n *\n * @param str To be decoded\n * @return Decoded result, if possible\n */\nexport const base64Decode = function (str: string): string | null {\n  try {\n    return base64.decodeString(str, true);\n  } catch (e) {\n    console.error('base64Decode failed: ', e);\n  }\n  return null;\n};\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Do a deep-copy of basic JavaScript Objects or Arrays.\n */\nexport function deepCopy<T>(value: T): T {\n  return deepExtend(undefined, value) as T;\n}\n\n/**\n * Copy properties from source to target (recursively allows extension\n * of Objects and Arrays).  Scalar values in the target are over-written.\n * If target is undefined, an object of the appropriate type will be created\n * (and returned).\n *\n * We recursively copy all child properties of plain Objects in the source- so\n * that namespace- like dictionaries are merged.\n *\n * Note that the target can be a function, in which case the properties in\n * the source Object are copied onto it as static properties of the Function.\n *\n * Note: we don't merge __proto__ to prevent prototype pollution\n */\nexport function deepExtend(target: unknown, source: unknown): unknown {\n  if (!(source instanceof Object)) {\n    return source;\n  }\n\n  switch (source.constructor) {\n    case Date:\n      // Treat Dates like scalars; if the target date object had any child\n      // properties - they will be lost!\n      const dateValue = source as Date;\n      return new Date(dateValue.getTime());\n\n    case Object:\n      if (target === undefined) {\n        target = {};\n      }\n      break;\n    case Array:\n      // Always copy the array source and overwrite the target.\n      target = [];\n      break;\n\n    default:\n      // Not a plain Object - treat it as a scalar.\n      return source;\n  }\n\n  for (const prop in source) {\n    // use isValidKey to guard against prototype pollution. See https://snyk.io/vuln/SNYK-JS-LODASH-450202\n    if (!source.hasOwnProperty(prop) || !isValidKey(prop)) {\n      continue;\n    }\n    (target as Record<string, unknown>)[prop] = deepExtend(\n      (target as Record<string, unknown>)[prop],\n      (source as Record<string, unknown>)[prop]\n    );\n  }\n\n  return target;\n}\n\nfunction isValidKey(key: string): boolean {\n  return key !== '__proto__';\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { CONSTANTS } from './constants';\n\n/**\n * Returns navigator.userAgent string or '' if it's not defined.\n * @return user agent string\n */\nexport function getUA(): string {\n  if (\n    typeof navigator !== 'undefined' &&\n    typeof navigator['userAgent'] === 'string'\n  ) {\n    return navigator['userAgent'];\n  } else {\n    return '';\n  }\n}\n\n/**\n * Detect Cordova / PhoneGap / Ionic frameworks on a mobile device.\n *\n * Deliberately does not rely on checking `file://` URLs (as this fails PhoneGap\n * in the Ripple emulator) nor Cordova `onDeviceReady`, which would normally\n * wait for a callback.\n */\nexport function isMobileCordova(): boolean {\n  return (\n    typeof window !== 'undefined' &&\n    // @ts-ignore Setting up an broadly applicable index signature for Window\n    // just to deal with this case would probably be a bad idea.\n    !!(window['cordova'] || window['phonegap'] || window['PhoneGap']) &&\n    /ios|iphone|ipod|ipad|android|blackberry|iemobile/i.test(getUA())\n  );\n}\n\n/**\n * Detect Node.js.\n *\n * @return true if Node.js environment is detected.\n */\n// Node detection logic from: https://github.com/iliakan/detect-node/\nexport function isNode(): boolean {\n  try {\n    return (\n      Object.prototype.toString.call(global.process) === '[object process]'\n    );\n  } catch (e) {\n    return false;\n  }\n}\n\n/**\n * Detect Browser Environment\n */\nexport function isBrowser(): boolean {\n  return typeof self === 'object' && self.self === self;\n}\n\n/**\n * Detect browser extensions (Chrome and Firefox at least).\n */\ninterface BrowserRuntime {\n  id?: unknown;\n}\ndeclare const chrome: { runtime?: BrowserRuntime };\ndeclare const browser: { runtime?: BrowserRuntime };\nexport function isBrowserExtension(): boolean {\n  const runtime =\n    typeof chrome === 'object'\n      ? chrome.runtime\n      : typeof browser === 'object'\n      ? browser.runtime\n      : undefined;\n  return typeof runtime === 'object' && runtime.id !== undefined;\n}\n\n/**\n * Detect React Native.\n *\n * @return true if ReactNative environment is detected.\n */\nexport function isReactNative(): boolean {\n  return (\n    typeof navigator === 'object' && navigator['product'] === 'ReactNative'\n  );\n}\n\n/** Detects Electron apps. */\nexport function isElectron(): boolean {\n  return getUA().indexOf('Electron/') >= 0;\n}\n\n/** Detects Internet Explorer. */\nexport function isIE(): boolean {\n  const ua = getUA();\n  return ua.indexOf('MSIE ') >= 0 || ua.indexOf('Trident/') >= 0;\n}\n\n/** Detects Universal Windows Platform apps. */\nexport function isUWP(): boolean {\n  return getUA().indexOf('MSAppHost/') >= 0;\n}\n\n/**\n * Detect whether the current SDK build is the Node version.\n *\n * @return true if it's the Node SDK build.\n */\nexport function isNodeSdk(): boolean {\n  return CONSTANTS.NODE_CLIENT === true || CONSTANTS.NODE_ADMIN === true;\n}\n\n/** Returns true if we are running in Safari. */\nexport function isSafari(): boolean {\n  return (\n    !isNode() &&\n    navigator.userAgent.includes('Safari') &&\n    !navigator.userAgent.includes('Chrome')\n  );\n}\n\n/**\n * This method checks if indexedDB is supported by current browser/service worker context\n * @return true if indexedDB is supported by current browser/service worker context\n */\nexport function isIndexedDBAvailable(): boolean {\n  return typeof indexedDB === 'object';\n}\n\n/**\n * This method validates browser/sw context for indexedDB by opening a dummy indexedDB database and reject\n * if errors occur during the database open operation.\n *\n * @throws exception if current browser/sw context can't run idb.open (ex: Safari iframe, Firefox\n * private browsing)\n */\nexport function validateIndexedDBOpenable(): Promise<boolean> {\n  return new Promise((resolve, reject) => {\n    try {\n      let preExist: boolean = true;\n      const DB_CHECK_NAME =\n        'validate-browser-context-for-indexeddb-analytics-module';\n      const request = self.indexedDB.open(DB_CHECK_NAME);\n      request.onsuccess = () => {\n        request.result.close();\n        // delete database only when it doesn't pre-exist\n        if (!preExist) {\n          self.indexedDB.deleteDatabase(DB_CHECK_NAME);\n        }\n        resolve(true);\n      };\n      request.onupgradeneeded = () => {\n        preExist = false;\n      };\n\n      request.onerror = () => {\n        reject(request.error?.message || '');\n      };\n    } catch (error) {\n      reject(error);\n    }\n  });\n}\n\n/**\n *\n * This method checks whether cookie is enabled within current browser\n * @return true if cookie is enabled within current browser\n */\nexport function areCookiesEnabled(): boolean {\n  if (typeof navigator === 'undefined' || !navigator.cookieEnabled) {\n    return false;\n  }\n  return true;\n}\n\n/**\n * Polyfill for `globalThis` object.\n * @returns the `globalThis` object for the given environment.\n */\nexport function getGlobal(): typeof globalThis {\n  if (typeof self !== 'undefined') {\n    return self;\n  }\n  if (typeof window !== 'undefined') {\n    return window;\n  }\n  if (typeof global !== 'undefined') {\n    return global;\n  }\n  throw new Error('Unable to locate global object.');\n}\n","/**\n * @license\n * Copyright 2022 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { base64Decode } from './crypt';\nimport { getGlobal } from './environment';\n\n/**\n * Keys for experimental properties on the `FirebaseDefaults` object.\n * @public\n */\nexport type ExperimentalKey = 'authTokenSyncURL' | 'authIdTokenMaxAge';\n\n/**\n * An object that can be injected into the environment as __FIREBASE_DEFAULTS__,\n * either as a property of globalThis, a shell environment variable, or a\n * cookie.\n *\n * This object can be used to automatically configure and initialize\n * a Firebase app as well as any emulators.\n *\n * @public\n */\nexport interface FirebaseDefaults {\n  config?: Record<string, string>;\n  emulatorHosts?: Record<string, string>;\n  _authTokenSyncURL?: string;\n  _authIdTokenMaxAge?: number;\n  [key: string]: unknown;\n}\n\ndeclare global {\n  // Need `var` for this to work.\n  // eslint-disable-next-line no-var\n  var __FIREBASE_DEFAULTS__: FirebaseDefaults | undefined;\n}\n\nconst getDefaultsFromGlobal = (): FirebaseDefaults | undefined =>\n  getGlobal().__FIREBASE_DEFAULTS__;\n\n/**\n * Attempt to read defaults from a JSON string provided to\n * process.env.__FIREBASE_DEFAULTS__ or a JSON file whose path is in\n * process.env.__FIREBASE_DEFAULTS_PATH__\n */\nconst getDefaultsFromEnvVariable = (): FirebaseDefaults | undefined => {\n  if (typeof process === 'undefined') {\n    return;\n  }\n  const defaultsJsonString = process.env.__FIREBASE_DEFAULTS__;\n  const defaultsJsonPath = process.env.__FIREBASE_DEFAULTS_PATH__;\n  if (defaultsJsonString) {\n    if (defaultsJsonPath) {\n      console.warn(\n        `Values were provided for both __FIREBASE_DEFAULTS__ ` +\n          `and __FIREBASE_DEFAULTS_PATH__. __FIREBASE_DEFAULTS_PATH__ ` +\n          `will be ignored.`\n      );\n    }\n    return JSON.parse(defaultsJsonString);\n  }\n  if (defaultsJsonPath && typeof require !== 'undefined') {\n    try {\n      // eslint-disable-next-line @typescript-eslint/no-require-imports\n      const json = require(defaultsJsonPath);\n      return json;\n    } catch (e) {\n      console.warn(\n        `Unable to read defaults from file provided to ` +\n          `__FIREBASE_DEFAULTS_PATH__: ${defaultsJsonPath}`\n      );\n    }\n  }\n};\n\nconst getDefaultsFromCookie = (): FirebaseDefaults | undefined => {\n  if (typeof document === 'undefined') {\n    return;\n  }\n  const match = document.cookie.match(/__FIREBASE_DEFAULTS__=([^;]+)/);\n  const decoded = match && base64Decode(match[1]);\n  return decoded && JSON.parse(decoded);\n};\n\n/**\n * Get the __FIREBASE_DEFAULTS__ object. It checks in order:\n * (1) if such an object exists as a property of `globalThis`\n * (2) if such an object was provided on a shell environment variable\n * (3) if such an object exists in a cookie\n */\nconst getDefaults = (): FirebaseDefaults | undefined =>\n  getDefaultsFromGlobal() ||\n  getDefaultsFromEnvVariable() ||\n  getDefaultsFromCookie();\n\n/**\n * Returns emulator host stored in the __FIREBASE_DEFAULTS__ object\n * for the given product.\n * @public\n */\nexport const getDefaultEmulatorHost = (\n  productName: string\n): string | undefined => getDefaults()?.emulatorHosts?.[productName];\n\n/**\n * Returns Firebase app config stored in the __FIREBASE_DEFAULTS__ object.\n * @public\n */\nexport const getDefaultAppConfig = (): Record<string, string> | undefined =>\n  getDefaults()?.config;\n\n/**\n * Returns an experimental setting on the __FIREBASE_DEFAULTS__ object (properties\n * prefixed by \"_\")\n * @public\n */\nexport const getExperimentalSetting = <T extends ExperimentalKey>(\n  name: T\n): FirebaseDefaults[`_${T}`] =>\n  getDefaults()?.[`_${name}`] as FirebaseDefaults[`_${T}`];\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport class Deferred<R> {\n  promise: Promise<R>;\n  reject: (value?: unknown) => void = () => {};\n  resolve: (value?: unknown) => void = () => {};\n  constructor() {\n    this.promise = new Promise((resolve, reject) => {\n      this.resolve = resolve as (value?: unknown) => void;\n      this.reject = reject as (value?: unknown) => void;\n    });\n  }\n\n  /**\n   * Our API internals are not promiseified and cannot because our callback APIs have subtle expectations around\n   * invoking promises inline, which Promises are forbidden to do. This method accepts an optional node-style callback\n   * and returns a node-style callback which will resolve or reject the Deferred's promise.\n   */\n  wrapCallback(\n    callback?: (error?: unknown, value?: unknown) => void\n  ): (error: unknown, value?: unknown) => void {\n    return (error, value?) => {\n      if (error) {\n        this.reject(error);\n      } else {\n        this.resolve(value);\n      }\n      if (typeof callback === 'function') {\n        // Attaching noop handler just in case developer wasn't expecting\n        // promises\n        this.promise.catch(() => {});\n\n        // Some of our callbacks don't expect a value and our own tests\n        // assert that the parameter length is 1\n        if (callback.length === 1) {\n          callback(error);\n        } else {\n          callback(error, value);\n        }\n      }\n    };\n  }\n}\n","/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { base64urlEncodeWithoutPadding } from './crypt';\n\n// Firebase Auth tokens contain snake_case claims following the JWT standard / convention.\n/* eslint-disable camelcase */\n\nexport type FirebaseSignInProvider =\n  | 'custom'\n  | 'email'\n  | 'password'\n  | 'phone'\n  | 'anonymous'\n  | 'google.com'\n  | 'facebook.com'\n  | 'github.com'\n  | 'twitter.com'\n  | 'microsoft.com'\n  | 'apple.com';\n\ninterface FirebaseIdToken {\n  // Always set to https://securetoken.google.com/PROJECT_ID\n  iss: string;\n\n  // Always set to PROJECT_ID\n  aud: string;\n\n  // The user's unique ID\n  sub: string;\n\n  // The token issue time, in seconds since epoch\n  iat: number;\n\n  // The token expiry time, normally 'iat' + 3600\n  exp: number;\n\n  // The user's unique ID. Must be equal to 'sub'\n  user_id: string;\n\n  // The time the user authenticated, normally 'iat'\n  auth_time: number;\n\n  // The sign in provider, only set when the provider is 'anonymous'\n  provider_id?: 'anonymous';\n\n  // The user's primary email\n  email?: string;\n\n  // The user's email verification status\n  email_verified?: boolean;\n\n  // The user's primary phone number\n  phone_number?: string;\n\n  // The user's display name\n  name?: string;\n\n  // The user's profile photo URL\n  picture?: string;\n\n  // Information on all identities linked to this user\n  firebase: {\n    // The primary sign-in provider\n    sign_in_provider: FirebaseSignInProvider;\n\n    // A map of providers to the user's list of unique identifiers from\n    // each provider\n    identities?: { [provider in FirebaseSignInProvider]?: string[] };\n  };\n\n  // Custom claims set by the developer\n  [claim: string]: unknown;\n\n  uid?: never; // Try to catch a common mistake of \"uid\" (should be \"sub\" instead).\n}\n\nexport type EmulatorMockTokenOptions = ({ user_id: string } | { sub: string }) &\n  Partial<FirebaseIdToken>;\n\nexport function createMockUserToken(\n  token: EmulatorMockTokenOptions,\n  projectId?: string\n): string {\n  if (token.uid) {\n    throw new Error(\n      'The \"uid\" field is no longer supported by mockUserToken. Please use \"sub\" instead for Firebase Auth User ID.'\n    );\n  }\n  // Unsecured JWTs use \"none\" as the algorithm.\n  const header = {\n    alg: 'none',\n    type: 'JWT'\n  };\n\n  const project = projectId || 'demo-project';\n  const iat = token.iat || 0;\n  const sub = token.sub || token.user_id;\n  if (!sub) {\n    throw new Error(\"mockUserToken must contain 'sub' or 'user_id' field!\");\n  }\n\n  const payload: FirebaseIdToken = {\n    // Set all required fields to decent defaults\n    iss: `https://securetoken.google.com/${project}`,\n    aud: project,\n    iat,\n    exp: iat + 3600,\n    auth_time: iat,\n    sub,\n    user_id: sub,\n    firebase: {\n      sign_in_provider: 'custom',\n      identities: {}\n    },\n\n    // Override with user options\n    ...token\n  };\n\n  // Unsecured JWTs use the empty string as a signature.\n  const signature = '';\n  return [\n    base64urlEncodeWithoutPadding(JSON.stringify(header)),\n    base64urlEncodeWithoutPadding(JSON.stringify(payload)),\n    signature\n  ].join('.');\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * @fileoverview Standardized Firebase Error.\n *\n * Usage:\n *\n *   // Typescript string literals for type-safe codes\n *   type Err =\n *     'unknown' |\n *     'object-not-found'\n *     ;\n *\n *   // Closure enum for type-safe error codes\n *   // at-enum {string}\n *   var Err = {\n *     UNKNOWN: 'unknown',\n *     OBJECT_NOT_FOUND: 'object-not-found',\n *   }\n *\n *   let errors: Map<Err, string> = {\n *     'generic-error': \"Unknown error\",\n *     'file-not-found': \"Could not find file: {$file}\",\n *   };\n *\n *   // Type-safe function - must pass a valid error code as param.\n *   let error = new ErrorFactory<Err>('service', 'Service', errors);\n *\n *   ...\n *   throw error.create(Err.GENERIC);\n *   ...\n *   throw error.create(Err.FILE_NOT_FOUND, {'file': fileName});\n *   ...\n *   // Service: Could not file file: foo.txt (service/file-not-found).\n *\n *   catch (e) {\n *     assert(e.message === \"Could not find file: foo.txt.\");\n *     if ((e as FirebaseError)?.code === 'service/file-not-found') {\n *       console.log(\"Could not read file: \" + e['file']);\n *     }\n *   }\n */\n\nexport type ErrorMap<ErrorCode extends string> = {\n  readonly [K in ErrorCode]: string;\n};\n\nconst ERROR_NAME = 'FirebaseError';\n\nexport interface StringLike {\n  toString(): string;\n}\n\nexport interface ErrorData {\n  [key: string]: unknown;\n}\n\n// Based on code from:\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error#Custom_Error_Types\nexport class FirebaseError extends Error {\n  /** The custom name for all FirebaseErrors. */\n  readonly name: string = ERROR_NAME;\n\n  constructor(\n    /** The error code for this error. */\n    readonly code: string,\n    message: string,\n    /** Custom data for this error. */\n    public customData?: Record<string, unknown>\n  ) {\n    super(message);\n\n    // Fix For ES5\n    // https://github.com/Microsoft/TypeScript-wiki/blob/master/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work\n    Object.setPrototypeOf(this, FirebaseError.prototype);\n\n    // Maintains proper stack trace for where our error was thrown.\n    // Only available on V8.\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, ErrorFactory.prototype.create);\n    }\n  }\n}\n\nexport class ErrorFactory<\n  ErrorCode extends string,\n  ErrorParams extends { readonly [K in ErrorCode]?: ErrorData } = {}\n> {\n  constructor(\n    private readonly service: string,\n    private readonly serviceName: string,\n    private readonly errors: ErrorMap<ErrorCode>\n  ) {}\n\n  create<K extends ErrorCode>(\n    code: K,\n    ...data: K extends keyof ErrorParams ? [ErrorParams[K]] : []\n  ): FirebaseError {\n    const customData = (data[0] as ErrorData) || {};\n    const fullCode = `${this.service}/${code}`;\n    const template = this.errors[code];\n\n    const message = template ? replaceTemplate(template, customData) : 'Error';\n    // Service Name: Error message (service/code).\n    const fullMessage = `${this.serviceName}: ${message} (${fullCode}).`;\n\n    const error = new FirebaseError(fullCode, fullMessage, customData);\n\n    return error;\n  }\n}\n\nfunction replaceTemplate(template: string, data: ErrorData): string {\n  return template.replace(PATTERN, (_, key) => {\n    const value = data[key];\n    return value != null ? String(value) : `<${key}?>`;\n  });\n}\n\nconst PATTERN = /\\{\\$([^}]+)}/g;\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Evaluates a JSON string into a javascript object.\n *\n * @param {string} str A string containing JSON.\n * @return {*} The javascript object representing the specified JSON.\n */\nexport function jsonEval(str: string): unknown {\n  return JSON.parse(str);\n}\n\n/**\n * Returns JSON representing a javascript object.\n * @param {*} data Javascript object to be stringified.\n * @return {string} The JSON contents of the object.\n */\nexport function stringify(data: unknown): string {\n  return JSON.stringify(data);\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { base64Decode } from './crypt';\nimport { jsonEval } from './json';\n\ninterface Claims {\n  [key: string]: {};\n}\n\ninterface DecodedToken {\n  header: object;\n  claims: Claims;\n  data: object;\n  signature: string;\n}\n\n/**\n * Decodes a Firebase auth. token into constituent parts.\n *\n * Notes:\n * - May return with invalid / incomplete claims if there's no native base64 decoding support.\n * - Doesn't check if the token is actually valid.\n */\nexport const decode = function (token: string): DecodedToken {\n  let header = {},\n    claims: Claims = {},\n    data = {},\n    signature = '';\n\n  try {\n    const parts = token.split('.');\n    header = jsonEval(base64Decode(parts[0]) || '') as object;\n    claims = jsonEval(base64Decode(parts[1]) || '') as Claims;\n    signature = parts[2];\n    data = claims['d'] || {};\n    delete claims['d'];\n  } catch (e) {}\n\n  return {\n    header,\n    claims,\n    data,\n    signature\n  };\n};\n\ninterface DecodedToken {\n  header: object;\n  claims: Claims;\n  data: object;\n  signature: string;\n}\n\n/**\n * Decodes a Firebase auth. token and checks the validity of its time-based claims. Will return true if the\n * token is within the time window authorized by the 'nbf' (not-before) and 'iat' (issued-at) claims.\n *\n * Notes:\n * - May return a false negative if there's no native base64 decoding support.\n * - Doesn't check if the token is actually valid.\n */\nexport const isValidTimestamp = function (token: string): boolean {\n  const claims: Claims = decode(token).claims;\n  const now: number = Math.floor(new Date().getTime() / 1000);\n  let validSince: number = 0,\n    validUntil: number = 0;\n\n  if (typeof claims === 'object') {\n    if (claims.hasOwnProperty('nbf')) {\n      validSince = claims['nbf'] as number;\n    } else if (claims.hasOwnProperty('iat')) {\n      validSince = claims['iat'] as number;\n    }\n\n    if (claims.hasOwnProperty('exp')) {\n      validUntil = claims['exp'] as number;\n    } else {\n      // token will expire after 24h by default\n      validUntil = validSince + 86400;\n    }\n  }\n\n  return (\n    !!now &&\n    !!validSince &&\n    !!validUntil &&\n    now >= validSince &&\n    now <= validUntil\n  );\n};\n\n/**\n * Decodes a Firebase auth. token and returns its issued at time if valid, null otherwise.\n *\n * Notes:\n * - May return null if there's no native base64 decoding support.\n * - Doesn't check if the token is actually valid.\n */\nexport const issuedAtTime = function (token: string): number | null {\n  const claims: Claims = decode(token).claims;\n  if (typeof claims === 'object' && claims.hasOwnProperty('iat')) {\n    return claims['iat'] as number;\n  }\n  return null;\n};\n\n/**\n * Decodes a Firebase auth. token and checks the validity of its format. Expects a valid issued-at time.\n *\n * Notes:\n * - May return a false negative if there's no native base64 decoding support.\n * - Doesn't check if the token is actually valid.\n */\nexport const isValidFormat = function (token: string): boolean {\n  const decoded = decode(token),\n    claims = decoded.claims;\n\n  return !!claims && typeof claims === 'object' && claims.hasOwnProperty('iat');\n};\n\n/**\n * Attempts to peer into an auth token and determine if it's an admin auth token by looking at the claims portion.\n *\n * Notes:\n * - May return a false negative if there's no native base64 decoding support.\n * - Doesn't check if the token is actually valid.\n */\nexport const isAdmin = function (token: string): boolean {\n  const claims: Claims = decode(token).claims;\n  return typeof claims === 'object' && claims['admin'] === true;\n};\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport function contains<T extends object>(obj: T, key: string): boolean {\n  return Object.prototype.hasOwnProperty.call(obj, key);\n}\n\nexport function safeGet<T extends object, K extends keyof T>(\n  obj: T,\n  key: K\n): T[K] | undefined {\n  if (Object.prototype.hasOwnProperty.call(obj, key)) {\n    return obj[key];\n  } else {\n    return undefined;\n  }\n}\n\nexport function isEmpty(obj: object): obj is {} {\n  for (const key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n      return false;\n    }\n  }\n  return true;\n}\n\nexport function map<K extends string, V, U>(\n  obj: { [key in K]: V },\n  fn: (value: V, key: K, obj: { [key in K]: V }) => U,\n  contextObj?: unknown\n): { [key in K]: U } {\n  const res: Partial<{ [key in K]: U }> = {};\n  for (const key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n      res[key] = fn.call(contextObj, obj[key], key, obj);\n    }\n  }\n  return res as { [key in K]: U };\n}\n\n/**\n * Deep equal two objects. Support Arrays and Objects.\n */\nexport function deepEqual(a: object, b: object): boolean {\n  if (a === b) {\n    return true;\n  }\n\n  const aKeys = Object.keys(a);\n  const bKeys = Object.keys(b);\n  for (const k of aKeys) {\n    if (!bKeys.includes(k)) {\n      return false;\n    }\n\n    const aProp = (a as Record<string, unknown>)[k];\n    const bProp = (b as Record<string, unknown>)[k];\n    if (isObject(aProp) && isObject(bProp)) {\n      if (!deepEqual(aProp, bProp)) {\n        return false;\n      }\n    } else if (aProp !== bProp) {\n      return false;\n    }\n  }\n\n  for (const k of bKeys) {\n    if (!aKeys.includes(k)) {\n      return false;\n    }\n  }\n  return true;\n}\n\nfunction isObject(thing: unknown): thing is object {\n  return thing !== null && typeof thing === 'object';\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Returns a querystring-formatted string (e.g. &arg=val&arg2=val2) from a\n * params object (e.g. {arg: 'val', arg2: 'val2'})\n * Note: You must prepend it with ? when adding it to a URL.\n */\nexport function querystring(querystringParams: {\n  [key: string]: string | number;\n}): string {\n  const params = [];\n  for (const [key, value] of Object.entries(querystringParams)) {\n    if (Array.isArray(value)) {\n      value.forEach(arrayVal => {\n        params.push(\n          encodeURIComponent(key) + '=' + encodeURIComponent(arrayVal)\n        );\n      });\n    } else {\n      params.push(encodeURIComponent(key) + '=' + encodeURIComponent(value));\n    }\n  }\n  return params.length ? '&' + params.join('&') : '';\n}\n\n/**\n * Decodes a querystring (e.g. ?arg=val&arg2=val2) into a params object\n * (e.g. {arg: 'val', arg2: 'val2'})\n */\nexport function querystringDecode(querystring: string): Record<string, string> {\n  const obj: Record<string, string> = {};\n  const tokens = querystring.replace(/^\\?/, '').split('&');\n\n  tokens.forEach(token => {\n    if (token) {\n      const [key, value] = token.split('=');\n      obj[decodeURIComponent(key)] = decodeURIComponent(value);\n    }\n  });\n  return obj;\n}\n\n/**\n * Extract the query string part of a URL, including the leading question mark (if present).\n */\nexport function extractQuerystring(url: string): string {\n  const queryStart = url.indexOf('?');\n  if (!queryStart) {\n    return '';\n  }\n  const fragmentStart = url.indexOf('#', queryStart);\n  return url.substring(\n    queryStart,\n    fragmentStart > 0 ? fragmentStart : undefined\n  );\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview SHA-1 cryptographic hash.\n * Variable names follow the notation in FIPS PUB 180-3:\n * http://csrc.nist.gov/publications/fips/fips180-3/fips180-3_final.pdf.\n *\n * Usage:\n *   var sha1 = new sha1();\n *   sha1.update(bytes);\n *   var hash = sha1.digest();\n *\n * Performance:\n *   Chrome 23:   ~400 Mbit/s\n *   Firefox 16:  ~250 Mbit/s\n *\n */\n\n/**\n * SHA-1 cryptographic hash constructor.\n *\n * The properties declared here are discussed in the above algorithm document.\n * @constructor\n * @final\n * @struct\n */\nexport class Sha1 {\n  /**\n   * Holds the previous values of accumulated variables a-e in the compress_\n   * function.\n   * @private\n   */\n  private chain_: number[] = [];\n\n  /**\n   * A buffer holding the partially computed hash result.\n   * @private\n   */\n  private buf_: number[] = [];\n\n  /**\n   * An array of 80 bytes, each a part of the message to be hashed.  Referred to\n   * as the message schedule in the docs.\n   * @private\n   */\n  private W_: number[] = [];\n\n  /**\n   * Contains data needed to pad messages less than 64 bytes.\n   * @private\n   */\n  private pad_: number[] = [];\n\n  /**\n   * @private {number}\n   */\n  private inbuf_: number = 0;\n\n  /**\n   * @private {number}\n   */\n  private total_: number = 0;\n\n  blockSize: number;\n\n  constructor() {\n    this.blockSize = 512 / 8;\n\n    this.pad_[0] = 128;\n    for (let i = 1; i < this.blockSize; ++i) {\n      this.pad_[i] = 0;\n    }\n\n    this.reset();\n  }\n\n  reset(): void {\n    this.chain_[0] = 0x67452301;\n    this.chain_[1] = 0xefcdab89;\n    this.chain_[2] = 0x98badcfe;\n    this.chain_[3] = 0x10325476;\n    this.chain_[4] = 0xc3d2e1f0;\n\n    this.inbuf_ = 0;\n    this.total_ = 0;\n  }\n\n  /**\n   * Internal compress helper function.\n   * @param buf Block to compress.\n   * @param offset Offset of the block in the buffer.\n   * @private\n   */\n  compress_(buf: number[] | Uint8Array | string, offset?: number): void {\n    if (!offset) {\n      offset = 0;\n    }\n\n    const W = this.W_;\n\n    // get 16 big endian words\n    if (typeof buf === 'string') {\n      for (let i = 0; i < 16; i++) {\n        // TODO(user): [bug 8140122] Recent versions of Safari for Mac OS and iOS\n        // have a bug that turns the post-increment ++ operator into pre-increment\n        // during JIT compilation.  We have code that depends heavily on SHA-1 for\n        // correctness and which is affected by this bug, so I've removed all uses\n        // of post-increment ++ in which the result value is used.  We can revert\n        // this change once the Safari bug\n        // (https://bugs.webkit.org/show_bug.cgi?id=109036) has been fixed and\n        // most clients have been updated.\n        W[i] =\n          (buf.charCodeAt(offset) << 24) |\n          (buf.charCodeAt(offset + 1) << 16) |\n          (buf.charCodeAt(offset + 2) << 8) |\n          buf.charCodeAt(offset + 3);\n        offset += 4;\n      }\n    } else {\n      for (let i = 0; i < 16; i++) {\n        W[i] =\n          (buf[offset] << 24) |\n          (buf[offset + 1] << 16) |\n          (buf[offset + 2] << 8) |\n          buf[offset + 3];\n        offset += 4;\n      }\n    }\n\n    // expand to 80 words\n    for (let i = 16; i < 80; i++) {\n      const t = W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16];\n      W[i] = ((t << 1) | (t >>> 31)) & 0xffffffff;\n    }\n\n    let a = this.chain_[0];\n    let b = this.chain_[1];\n    let c = this.chain_[2];\n    let d = this.chain_[3];\n    let e = this.chain_[4];\n    let f, k;\n\n    // TODO(user): Try to unroll this loop to speed up the computation.\n    for (let i = 0; i < 80; i++) {\n      if (i < 40) {\n        if (i < 20) {\n          f = d ^ (b & (c ^ d));\n          k = 0x5a827999;\n        } else {\n          f = b ^ c ^ d;\n          k = 0x6ed9eba1;\n        }\n      } else {\n        if (i < 60) {\n          f = (b & c) | (d & (b | c));\n          k = 0x8f1bbcdc;\n        } else {\n          f = b ^ c ^ d;\n          k = 0xca62c1d6;\n        }\n      }\n\n      const t = (((a << 5) | (a >>> 27)) + f + e + k + W[i]) & 0xffffffff;\n      e = d;\n      d = c;\n      c = ((b << 30) | (b >>> 2)) & 0xffffffff;\n      b = a;\n      a = t;\n    }\n\n    this.chain_[0] = (this.chain_[0] + a) & 0xffffffff;\n    this.chain_[1] = (this.chain_[1] + b) & 0xffffffff;\n    this.chain_[2] = (this.chain_[2] + c) & 0xffffffff;\n    this.chain_[3] = (this.chain_[3] + d) & 0xffffffff;\n    this.chain_[4] = (this.chain_[4] + e) & 0xffffffff;\n  }\n\n  update(bytes?: number[] | Uint8Array | string, length?: number): void {\n    // TODO(johnlenz): tighten the function signature and remove this check\n    if (bytes == null) {\n      return;\n    }\n\n    if (length === undefined) {\n      length = bytes.length;\n    }\n\n    const lengthMinusBlock = length - this.blockSize;\n    let n = 0;\n    // Using local instead of member variables gives ~5% speedup on Firefox 16.\n    const buf = this.buf_;\n    let inbuf = this.inbuf_;\n\n    // The outer while loop should execute at most twice.\n    while (n < length) {\n      // When we have no data in the block to top up, we can directly process the\n      // input buffer (assuming it contains sufficient data). This gives ~25%\n      // speedup on Chrome 23 and ~15% speedup on Firefox 16, but requires that\n      // the data is provided in large chunks (or in multiples of 64 bytes).\n      if (inbuf === 0) {\n        while (n <= lengthMinusBlock) {\n          this.compress_(bytes, n);\n          n += this.blockSize;\n        }\n      }\n\n      if (typeof bytes === 'string') {\n        while (n < length) {\n          buf[inbuf] = bytes.charCodeAt(n);\n          ++inbuf;\n          ++n;\n          if (inbuf === this.blockSize) {\n            this.compress_(buf);\n            inbuf = 0;\n            // Jump to the outer loop so we use the full-block optimization.\n            break;\n          }\n        }\n      } else {\n        while (n < length) {\n          buf[inbuf] = bytes[n];\n          ++inbuf;\n          ++n;\n          if (inbuf === this.blockSize) {\n            this.compress_(buf);\n            inbuf = 0;\n            // Jump to the outer loop so we use the full-block optimization.\n            break;\n          }\n        }\n      }\n    }\n\n    this.inbuf_ = inbuf;\n    this.total_ += length;\n  }\n\n  /** @override */\n  digest(): number[] {\n    const digest: number[] = [];\n    let totalBits = this.total_ * 8;\n\n    // Add pad 0x80 0x00*.\n    if (this.inbuf_ < 56) {\n      this.update(this.pad_, 56 - this.inbuf_);\n    } else {\n      this.update(this.pad_, this.blockSize - (this.inbuf_ - 56));\n    }\n\n    // Add # bits.\n    for (let i = this.blockSize - 1; i >= 56; i--) {\n      this.buf_[i] = totalBits & 255;\n      totalBits /= 256; // Don't use bit-shifting here!\n    }\n\n    this.compress_(this.buf_);\n\n    let n = 0;\n    for (let i = 0; i < 5; i++) {\n      for (let j = 24; j >= 0; j -= 8) {\n        digest[n] = (this.chain_[i] >> j) & 255;\n        ++n;\n      }\n    }\n    return digest;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nexport type NextFn<T> = (value: T) => void;\nexport type ErrorFn = (error: Error) => void;\nexport type CompleteFn = () => void;\n\nexport interface Observer<T> {\n  // Called once for each value in a stream of values.\n  next: NextFn<T>;\n\n  // A stream terminates by a single call to EITHER error() or complete().\n  error: ErrorFn;\n\n  // No events will be sent to next() once complete() is called.\n  complete: CompleteFn;\n}\n\nexport type PartialObserver<T> = Partial<Observer<T>>;\n\n// TODO: Support also Unsubscribe.unsubscribe?\nexport type Unsubscribe = () => void;\n\n/**\n * The Subscribe interface has two forms - passing the inline function\n * callbacks, or a object interface with callback properties.\n */\nexport interface Subscribe<T> {\n  (next?: NextFn<T>, error?: ErrorFn, complete?: CompleteFn): Unsubscribe;\n  (observer: PartialObserver<T>): Unsubscribe;\n}\n\nexport interface Observable<T> {\n  // Subscribe method\n  subscribe: Subscribe<T>;\n}\n\nexport type Executor<T> = (observer: Observer<T>) => void;\n\n/**\n * Helper to make a Subscribe function (just like Promise helps make a\n * Thenable).\n *\n * @param executor Function which can make calls to a single Observer\n *     as a proxy.\n * @param onNoObservers Callback when count of Observers goes to zero.\n */\nexport function createSubscribe<T>(\n  executor: Executor<T>,\n  onNoObservers?: Executor<T>\n): Subscribe<T> {\n  const proxy = new ObserverProxy<T>(executor, onNoObservers);\n  return proxy.subscribe.bind(proxy);\n}\n\n/**\n * Implement fan-out for any number of Observers attached via a subscribe\n * function.\n */\nclass ObserverProxy<T> implements Observer<T> {\n  private observers: Array<Observer<T>> | undefined = [];\n  private unsubscribes: Unsubscribe[] = [];\n  private onNoObservers: Executor<T> | undefined;\n  private observerCount = 0;\n  // Micro-task scheduling by calling task.then().\n  private task = Promise.resolve();\n  private finalized = false;\n  private finalError?: Error;\n\n  /**\n   * @param executor Function which can make calls to a single Observer\n   *     as a proxy.\n   * @param onNoObservers Callback when count of Observers goes to zero.\n   */\n  constructor(executor: Executor<T>, onNoObservers?: Executor<T>) {\n    this.onNoObservers = onNoObservers;\n    // Call the executor asynchronously so subscribers that are called\n    // synchronously after the creation of the subscribe function\n    // can still receive the very first value generated in the executor.\n    this.task\n      .then(() => {\n        executor(this);\n      })\n      .catch(e => {\n        this.error(e);\n      });\n  }\n\n  next(value: T): void {\n    this.forEachObserver((observer: Observer<T>) => {\n      observer.next(value);\n    });\n  }\n\n  error(error: Error): void {\n    this.forEachObserver((observer: Observer<T>) => {\n      observer.error(error);\n    });\n    this.close(error);\n  }\n\n  complete(): void {\n    this.forEachObserver((observer: Observer<T>) => {\n      observer.complete();\n    });\n    this.close();\n  }\n\n  /**\n   * Subscribe function that can be used to add an Observer to the fan-out list.\n   *\n   * - We require that no event is sent to a subscriber sychronously to their\n   *   call to subscribe().\n   */\n  subscribe(\n    nextOrObserver?: NextFn<T> | PartialObserver<T>,\n    error?: ErrorFn,\n    complete?: CompleteFn\n  ): Unsubscribe {\n    let observer: Observer<T>;\n\n    if (\n      nextOrObserver === undefined &&\n      error === undefined &&\n      complete === undefined\n    ) {\n      throw new Error('Missing Observer.');\n    }\n\n    // Assemble an Observer object when passed as callback functions.\n    if (\n      implementsAnyMethods(nextOrObserver as { [key: string]: unknown }, [\n        'next',\n        'error',\n        'complete'\n      ])\n    ) {\n      observer = nextOrObserver as Observer<T>;\n    } else {\n      observer = {\n        next: nextOrObserver as NextFn<T>,\n        error,\n        complete\n      } as Observer<T>;\n    }\n\n    if (observer.next === undefined) {\n      observer.next = noop as NextFn<T>;\n    }\n    if (observer.error === undefined) {\n      observer.error = noop as ErrorFn;\n    }\n    if (observer.complete === undefined) {\n      observer.complete = noop as CompleteFn;\n    }\n\n    const unsub = this.unsubscribeOne.bind(this, this.observers!.length);\n\n    // Attempt to subscribe to a terminated Observable - we\n    // just respond to the Observer with the final error or complete\n    // event.\n    if (this.finalized) {\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      this.task.then(() => {\n        try {\n          if (this.finalError) {\n            observer.error(this.finalError);\n          } else {\n            observer.complete();\n          }\n        } catch (e) {\n          // nothing\n        }\n        return;\n      });\n    }\n\n    this.observers!.push(observer as Observer<T>);\n\n    return unsub;\n  }\n\n  // Unsubscribe is synchronous - we guarantee that no events are sent to\n  // any unsubscribed Observer.\n  private unsubscribeOne(i: number): void {\n    if (this.observers === undefined || this.observers[i] === undefined) {\n      return;\n    }\n\n    delete this.observers[i];\n\n    this.observerCount -= 1;\n    if (this.observerCount === 0 && this.onNoObservers !== undefined) {\n      this.onNoObservers(this);\n    }\n  }\n\n  private forEachObserver(fn: (observer: Observer<T>) => void): void {\n    if (this.finalized) {\n      // Already closed by previous event....just eat the additional values.\n      return;\n    }\n\n    // Since sendOne calls asynchronously - there is no chance that\n    // this.observers will become undefined.\n    for (let i = 0; i < this.observers!.length; i++) {\n      this.sendOne(i, fn);\n    }\n  }\n\n  // Call the Observer via one of it's callback function. We are careful to\n  // confirm that the observe has not been unsubscribed since this asynchronous\n  // function had been queued.\n  private sendOne(i: number, fn: (observer: Observer<T>) => void): void {\n    // Execute the callback asynchronously\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    this.task.then(() => {\n      if (this.observers !== undefined && this.observers[i] !== undefined) {\n        try {\n          fn(this.observers[i]);\n        } catch (e) {\n          // Ignore exceptions raised in Observers or missing methods of an\n          // Observer.\n          // Log error to console. b/31404806\n          if (typeof console !== 'undefined' && console.error) {\n            console.error(e);\n          }\n        }\n      }\n    });\n  }\n\n  private close(err?: Error): void {\n    if (this.finalized) {\n      return;\n    }\n    this.finalized = true;\n    if (err !== undefined) {\n      this.finalError = err;\n    }\n    // Proxy is no longer needed - garbage collect references\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    this.task.then(() => {\n      this.observers = undefined;\n      this.onNoObservers = undefined;\n    });\n  }\n}\n\n/** Turn synchronous function into one called asynchronously. */\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport function async(fn: Function, onError?: ErrorFn): Function {\n  return (...args: unknown[]) => {\n    Promise.resolve(true)\n      .then(() => {\n        fn(...args);\n      })\n      .catch((error: Error) => {\n        if (onError) {\n          onError(error);\n        }\n      });\n  };\n}\n\n/**\n * Return true if the object passed in implements any of the named methods.\n */\nfunction implementsAnyMethods(\n  obj: { [key: string]: unknown },\n  methods: string[]\n): boolean {\n  if (typeof obj !== 'object' || obj === null) {\n    return false;\n  }\n\n  for (const method of methods) {\n    if (method in obj && typeof obj[method] === 'function') {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nfunction noop(): void {\n  // do nothing\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Check to make sure the appropriate number of arguments are provided for a public function.\n * Throws an error if it fails.\n *\n * @param fnName The function name\n * @param minCount The minimum number of arguments to allow for the function call\n * @param maxCount The maximum number of argument to allow for the function call\n * @param argCount The actual number of arguments provided.\n */\nexport const validateArgCount = function (\n  fnName: string,\n  minCount: number,\n  maxCount: number,\n  argCount: number\n): void {\n  let argError;\n  if (argCount < minCount) {\n    argError = 'at least ' + minCount;\n  } else if (argCount > maxCount) {\n    argError = maxCount === 0 ? 'none' : 'no more than ' + maxCount;\n  }\n  if (argError) {\n    const error =\n      fnName +\n      ' failed: Was called with ' +\n      argCount +\n      (argCount === 1 ? ' argument.' : ' arguments.') +\n      ' Expects ' +\n      argError +\n      '.';\n    throw new Error(error);\n  }\n};\n\n/**\n * Generates a string to prefix an error message about failed argument validation\n *\n * @param fnName The function name\n * @param argName The name of the argument\n * @return The prefix to add to the error thrown for validation.\n */\nexport function errorPrefix(fnName: string, argName: string): string {\n  return `${fnName} failed: ${argName} argument `;\n}\n\n/**\n * @param fnName\n * @param argumentNumber\n * @param namespace\n * @param optional\n */\nexport function validateNamespace(\n  fnName: string,\n  namespace: string,\n  optional: boolean\n): void {\n  if (optional && !namespace) {\n    return;\n  }\n  if (typeof namespace !== 'string') {\n    //TODO: I should do more validation here. We only allow certain chars in namespaces.\n    throw new Error(\n      errorPrefix(fnName, 'namespace') + 'must be a valid firebase namespace.'\n    );\n  }\n}\n\nexport function validateCallback(\n  fnName: string,\n  argumentName: string,\n  // eslint-disable-next-line @typescript-eslint/ban-types\n  callback: Function,\n  optional: boolean\n): void {\n  if (optional && !callback) {\n    return;\n  }\n  if (typeof callback !== 'function') {\n    throw new Error(\n      errorPrefix(fnName, argumentName) + 'must be a valid function.'\n    );\n  }\n}\n\nexport function validateContextObject(\n  fnName: string,\n  argumentName: string,\n  context: unknown,\n  optional: boolean\n): void {\n  if (optional && !context) {\n    return;\n  }\n  if (typeof context !== 'object' || context === null) {\n    throw new Error(\n      errorPrefix(fnName, argumentName) + 'must be a valid context object.'\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from './assert';\n\n// Code originally came from goog.crypt.stringToUtf8ByteArray, but for some reason they\n// automatically replaced '\\r\\n' with '\\n', and they didn't handle surrogate pairs,\n// so it's been modified.\n\n// Note that not all Unicode characters appear as single characters in JavaScript strings.\n// fromCharCode returns the UTF-16 encoding of a character - so some Unicode characters\n// use 2 characters in Javascript.  All 4-byte UTF-8 characters begin with a first\n// character in the range 0xD800 - 0xDBFF (the first character of a so-called surrogate\n// pair).\n// See http://www.ecma-international.org/ecma-262/5.1/#sec-15.1.3\n\n/**\n * @param {string} str\n * @return {Array}\n */\nexport const stringToByteArray = function (str: string): number[] {\n  const out: number[] = [];\n  let p = 0;\n  for (let i = 0; i < str.length; i++) {\n    let c = str.charCodeAt(i);\n\n    // Is this the lead surrogate in a surrogate pair?\n    if (c >= 0xd800 && c <= 0xdbff) {\n      const high = c - 0xd800; // the high 10 bits.\n      i++;\n      assert(i < str.length, 'Surrogate pair missing trail surrogate.');\n      const low = str.charCodeAt(i) - 0xdc00; // the low 10 bits.\n      c = 0x10000 + (high << 10) + low;\n    }\n\n    if (c < 128) {\n      out[p++] = c;\n    } else if (c < 2048) {\n      out[p++] = (c >> 6) | 192;\n      out[p++] = (c & 63) | 128;\n    } else if (c < 65536) {\n      out[p++] = (c >> 12) | 224;\n      out[p++] = ((c >> 6) & 63) | 128;\n      out[p++] = (c & 63) | 128;\n    } else {\n      out[p++] = (c >> 18) | 240;\n      out[p++] = ((c >> 12) & 63) | 128;\n      out[p++] = ((c >> 6) & 63) | 128;\n      out[p++] = (c & 63) | 128;\n    }\n  }\n  return out;\n};\n\n/**\n * Calculate length without actually converting; useful for doing cheaper validation.\n * @param {string} str\n * @return {number}\n */\nexport const stringLength = function (str: string): number {\n  let p = 0;\n  for (let i = 0; i < str.length; i++) {\n    const c = str.charCodeAt(i);\n    if (c < 128) {\n      p++;\n    } else if (c < 2048) {\n      p += 2;\n    } else if (c >= 0xd800 && c <= 0xdbff) {\n      // Lead surrogate of a surrogate pair.  The pair together will take 4 bytes to represent.\n      p += 4;\n      i++; // skip trail surrogate.\n    } else {\n      p += 3;\n    }\n  }\n  return p;\n};\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * The amount of milliseconds to exponentially increase.\n */\nconst DEFAULT_INTERVAL_MILLIS = 1000;\n\n/**\n * The factor to backoff by.\n * Should be a number greater than 1.\n */\nconst DEFAULT_BACKOFF_FACTOR = 2;\n\n/**\n * The maximum milliseconds to increase to.\n *\n * <p>Visible for testing\n */\nexport const MAX_VALUE_MILLIS = 4 * 60 * 60 * 1000; // Four hours, like iOS and Android.\n\n/**\n * The percentage of backoff time to randomize by.\n * See\n * http://go/safe-client-behavior#step-1-determine-the-appropriate-retry-interval-to-handle-spike-traffic\n * for context.\n *\n * <p>Visible for testing\n */\nexport const RANDOM_FACTOR = 0.5;\n\n/**\n * Based on the backoff method from\n * https://github.com/google/closure-library/blob/master/closure/goog/math/exponentialbackoff.js.\n * Extracted here so we don't need to pass metadata and a stateful ExponentialBackoff object around.\n */\nexport function calculateBackoffMillis(\n  backoffCount: number,\n  intervalMillis: number = DEFAULT_INTERVAL_MILLIS,\n  backoffFactor: number = DEFAULT_BACKOFF_FACTOR\n): number {\n  // Calculates an exponentially increasing value.\n  // Deviation: calculates value from count and a constant interval, so we only need to save value\n  // and count to restore state.\n  const currBaseValue = intervalMillis * Math.pow(backoffFactor, backoffCount);\n\n  // A random \"fuzz\" to avoid waves of retries.\n  // Deviation: randomFactor is required.\n  const randomWait = Math.round(\n    // A fraction of the backoff value to add/subtract.\n    // Deviation: changes multiplication order to improve readability.\n    RANDOM_FACTOR *\n      currBaseValue *\n      // A random float (rounded to int by Math.round above) in the range [-1, 1]. Determines\n      // if we add or subtract.\n      (Math.random() - 0.5) *\n      2\n  );\n\n  // Limits backoff to max to avoid effectively permanent backoff.\n  return Math.min(MAX_VALUE_MILLIS, currBaseValue + randomWait);\n}\n","/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport interface Compat<T> {\n  _delegate: T;\n}\n\nexport function getModularInstance<ExpService>(\n  service: Compat<ExpService> | ExpService\n): ExpService {\n  if (service && (service as Compat<ExpService>)._delegate) {\n    return (service as Compat<ExpService>)._delegate;\n  } else {\n    return service as ExpService;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/** The semver (www.semver.org) version of the SDK. */\nexport let SDK_VERSION = '';\n\n/**\n * SDK_VERSION should be set before any database instance is created\n * @internal\n */\nexport function setSDKVersion(version: string): void {\n  SDK_VERSION = version;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { jsonEval, stringify } from '@firebase/util';\n\n/**\n * Wraps a DOM Storage object and:\n * - automatically encode objects as JSON strings before storing them to allow us to store arbitrary types.\n * - prefixes names with \"firebase:\" to avoid collisions with app data.\n *\n * We automatically (see storage.js) create two such wrappers, one for sessionStorage,\n * and one for localStorage.\n *\n */\nexport class DOMStorageWrapper {\n  // Use a prefix to avoid collisions with other stuff saved by the app.\n  private prefix_ = 'firebase:';\n\n  /**\n   * @param domStorage_ - The underlying storage object (e.g. localStorage or sessionStorage)\n   */\n  constructor(private domStorage_: Storage) {}\n\n  /**\n   * @param key - The key to save the value under\n   * @param value - The value being stored, or null to remove the key.\n   */\n  set(key: string, value: unknown | null) {\n    if (value == null) {\n      this.domStorage_.removeItem(this.prefixedName_(key));\n    } else {\n      this.domStorage_.setItem(this.prefixedName_(key), stringify(value));\n    }\n  }\n\n  /**\n   * @returns The value that was stored under this key, or null\n   */\n  get(key: string): unknown {\n    const storedVal = this.domStorage_.getItem(this.prefixedName_(key));\n    if (storedVal == null) {\n      return null;\n    } else {\n      return jsonEval(storedVal);\n    }\n  }\n\n  remove(key: string) {\n    this.domStorage_.removeItem(this.prefixedName_(key));\n  }\n\n  isInMemoryStorage: boolean;\n\n  prefixedName_(name: string): string {\n    return this.prefix_ + name;\n  }\n\n  toString(): string {\n    return this.domStorage_.toString();\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { contains } from '@firebase/util';\n\n/**\n * An in-memory storage implementation that matches the API of DOMStorageWrapper\n * (TODO: create interface for both to implement).\n */\nexport class MemoryStorage {\n  private cache_: { [k: string]: unknown } = {};\n\n  set(key: string, value: unknown | null) {\n    if (value == null) {\n      delete this.cache_[key];\n    } else {\n      this.cache_[key] = value;\n    }\n  }\n\n  get(key: string): unknown {\n    if (contains(this.cache_, key)) {\n      return this.cache_[key];\n    }\n    return null;\n  }\n\n  remove(key: string) {\n    delete this.cache_[key];\n  }\n\n  isInMemoryStorage = true;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { DOMStorageWrapper } from './DOMStorageWrapper';\nimport { MemoryStorage } from './MemoryStorage';\n\ndeclare const window: Window;\n\n/**\n * Helper to create a DOMStorageWrapper or else fall back to MemoryStorage.\n * TODO: Once MemoryStorage and DOMStorageWrapper have a shared interface this method annotation should change\n * to reflect this type\n *\n * @param domStorageName - Name of the underlying storage object\n *   (e.g. 'localStorage' or 'sessionStorage').\n * @returns Turning off type information until a common interface is defined.\n */\nconst createStoragefor = function (\n  domStorageName: string\n): DOMStorageWrapper | MemoryStorage {\n  try {\n    // NOTE: just accessing \"localStorage\" or \"window['localStorage']\" may throw a security exception,\n    // so it must be inside the try/catch.\n    if (\n      typeof window !== 'undefined' &&\n      typeof window[domStorageName] !== 'undefined'\n    ) {\n      // Need to test cache. Just because it's here doesn't mean it works\n      const domStorage = window[domStorageName];\n      domStorage.setItem('firebase:sentinel', 'cache');\n      domStorage.removeItem('firebase:sentinel');\n      return new DOMStorageWrapper(domStorage);\n    }\n  } catch (e) {}\n\n  // Failed to create wrapper.  Just return in-memory storage.\n  // TODO: log?\n  return new MemoryStorage();\n};\n\n/** A storage object that lasts across sessions */\nexport const PersistentStorage = createStoragefor('localStorage');\n\n/** A storage object that only lasts one session */\nexport const SessionStorage = createStoragefor('sessionStorage');\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Logger, LogLevel } from '@firebase/logger';\nimport {\n  assert,\n  base64,\n  Sha1,\n  stringToByteArray,\n  stringify,\n  isNodeSdk\n} from '@firebase/util';\n\nimport { SessionStorage } from '../storage/storage';\nimport { QueryContext } from '../view/EventRegistration';\n\ndeclare const window: Window;\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\ndeclare const Windows: any;\n\nconst logClient = new Logger('@firebase/database');\n\n/**\n * Returns a locally-unique ID (generated by just incrementing up from 0 each time its called).\n */\nexport const LUIDGenerator: () => number = (function () {\n  let id = 1;\n  return function () {\n    return id++;\n  };\n})();\n\n/**\n * Sha1 hash of the input string\n * @param str - The string to hash\n * @returns {!string} The resulting hash\n */\nexport const sha1 = function (str: string): string {\n  const utf8Bytes = stringToByteArray(str);\n  const sha1 = new Sha1();\n  sha1.update(utf8Bytes);\n  const sha1Bytes = sha1.digest();\n  return base64.encodeByteArray(sha1Bytes);\n};\n\nconst buildLogMessage_ = function (...varArgs: unknown[]): string {\n  let message = '';\n  for (let i = 0; i < varArgs.length; i++) {\n    const arg = varArgs[i];\n    if (\n      Array.isArray(arg) ||\n      (arg &&\n        typeof arg === 'object' &&\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        typeof (arg as any).length === 'number')\n    ) {\n      message += buildLogMessage_.apply(null, arg);\n    } else if (typeof arg === 'object') {\n      message += stringify(arg);\n    } else {\n      message += arg;\n    }\n    message += ' ';\n  }\n\n  return message;\n};\n\n/**\n * Use this for all debug messages in Firebase.\n */\nexport let logger: ((a: string) => void) | null = null;\n\n/**\n * Flag to check for log availability on first log message\n */\nlet firstLog_ = true;\n\n/**\n * The implementation of Firebase.enableLogging (defined here to break dependencies)\n * @param logger_ - A flag to turn on logging, or a custom logger\n * @param persistent - Whether or not to persist logging settings across refreshes\n */\nexport const enableLogging = function (\n  logger_?: boolean | ((a: string) => void) | null,\n  persistent?: boolean\n) {\n  assert(\n    !persistent || logger_ === true || logger_ === false,\n    \"Can't turn on custom loggers persistently.\"\n  );\n  if (logger_ === true) {\n    logClient.logLevel = LogLevel.VERBOSE;\n    logger = logClient.log.bind(logClient);\n    if (persistent) {\n      SessionStorage.set('logging_enabled', true);\n    }\n  } else if (typeof logger_ === 'function') {\n    logger = logger_;\n  } else {\n    logger = null;\n    SessionStorage.remove('logging_enabled');\n  }\n};\n\nexport const log = function (...varArgs: unknown[]) {\n  if (firstLog_ === true) {\n    firstLog_ = false;\n    if (logger === null && SessionStorage.get('logging_enabled') === true) {\n      enableLogging(true);\n    }\n  }\n\n  if (logger) {\n    const message = buildLogMessage_.apply(null, varArgs);\n    logger(message);\n  }\n};\n\nexport const logWrapper = function (\n  prefix: string\n): (...varArgs: unknown[]) => void {\n  return function (...varArgs: unknown[]) {\n    log(prefix, ...varArgs);\n  };\n};\n\nexport const error = function (...varArgs: string[]) {\n  const message = 'FIREBASE INTERNAL ERROR: ' + buildLogMessage_(...varArgs);\n  logClient.error(message);\n};\n\nexport const fatal = function (...varArgs: string[]) {\n  const message = `FIREBASE FATAL ERROR: ${buildLogMessage_(...varArgs)}`;\n  logClient.error(message);\n  throw new Error(message);\n};\n\nexport const warn = function (...varArgs: unknown[]) {\n  const message = 'FIREBASE WARNING: ' + buildLogMessage_(...varArgs);\n  logClient.warn(message);\n};\n\n/**\n * Logs a warning if the containing page uses https. Called when a call to new Firebase\n * does not use https.\n */\nexport const warnIfPageIsSecure = function () {\n  // Be very careful accessing browser globals. Who knows what may or may not exist.\n  if (\n    typeof window !== 'undefined' &&\n    window.location &&\n    window.location.protocol &&\n    window.location.protocol.indexOf('https:') !== -1\n  ) {\n    warn(\n      'Insecure Firebase access from a secure page. ' +\n        'Please use https in calls to new Firebase().'\n    );\n  }\n};\n\nexport const warnAboutUnsupportedMethod = function (methodName: string) {\n  warn(\n    methodName +\n      ' is unsupported and will likely change soon.  ' +\n      'Please do not use.'\n  );\n};\n\n/**\n * Returns true if data is NaN, or +/- Infinity.\n */\nexport const isInvalidJSONNumber = function (data: unknown): boolean {\n  return (\n    typeof data === 'number' &&\n    (data !== data || // NaN\n      data === Number.POSITIVE_INFINITY ||\n      data === Number.NEGATIVE_INFINITY)\n  );\n};\n\nexport const executeWhenDOMReady = function (fn: () => void) {\n  if (isNodeSdk() || document.readyState === 'complete') {\n    fn();\n  } else {\n    // Modeled after jQuery. Try DOMContentLoaded and onreadystatechange (which\n    // fire before onload), but fall back to onload.\n\n    let called = false;\n    const wrappedFn = function () {\n      if (!document.body) {\n        setTimeout(wrappedFn, Math.floor(10));\n        return;\n      }\n\n      if (!called) {\n        called = true;\n        fn();\n      }\n    };\n\n    if (document.addEventListener) {\n      document.addEventListener('DOMContentLoaded', wrappedFn, false);\n      // fallback to onload.\n      window.addEventListener('load', wrappedFn, false);\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    } else if ((document as any).attachEvent) {\n      // IE.\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      (document as any).attachEvent('onreadystatechange', () => {\n        if (document.readyState === 'complete') {\n          wrappedFn();\n        }\n      });\n      // fallback to onload.\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      (window as any).attachEvent('onload', wrappedFn);\n\n      // jQuery has an extra hack for IE that we could employ (based on\n      // http://javascript.nwbox.com/IEContentLoaded/) But it looks really old.\n      // I'm hoping we don't need it.\n    }\n  }\n};\n\n/**\n * Minimum key name. Invalid for actual data, used as a marker to sort before any valid names\n */\nexport const MIN_NAME = '[MIN_NAME]';\n\n/**\n * Maximum key name. Invalid for actual data, used as a marker to sort above any valid names\n */\nexport const MAX_NAME = '[MAX_NAME]';\n\n/**\n * Compares valid Firebase key names, plus min and max name\n */\nexport const nameCompare = function (a: string, b: string): number {\n  if (a === b) {\n    return 0;\n  } else if (a === MIN_NAME || b === MAX_NAME) {\n    return -1;\n  } else if (b === MIN_NAME || a === MAX_NAME) {\n    return 1;\n  } else {\n    const aAsInt = tryParseInt(a),\n      bAsInt = tryParseInt(b);\n\n    if (aAsInt !== null) {\n      if (bAsInt !== null) {\n        return aAsInt - bAsInt === 0 ? a.length - b.length : aAsInt - bAsInt;\n      } else {\n        return -1;\n      }\n    } else if (bAsInt !== null) {\n      return 1;\n    } else {\n      return a < b ? -1 : 1;\n    }\n  }\n};\n\n/**\n * @returns {!number} comparison result.\n */\nexport const stringCompare = function (a: string, b: string): number {\n  if (a === b) {\n    return 0;\n  } else if (a < b) {\n    return -1;\n  } else {\n    return 1;\n  }\n};\n\nexport const requireKey = function (\n  key: string,\n  obj: { [k: string]: unknown }\n): unknown {\n  if (obj && key in obj) {\n    return obj[key];\n  } else {\n    throw new Error(\n      'Missing required key (' + key + ') in object: ' + stringify(obj)\n    );\n  }\n};\n\nexport const ObjectToUniqueKey = function (obj: unknown): string {\n  if (typeof obj !== 'object' || obj === null) {\n    return stringify(obj);\n  }\n\n  const keys = [];\n  // eslint-disable-next-line guard-for-in\n  for (const k in obj) {\n    keys.push(k);\n  }\n\n  // Export as json, but with the keys sorted.\n  keys.sort();\n  let key = '{';\n  for (let i = 0; i < keys.length; i++) {\n    if (i !== 0) {\n      key += ',';\n    }\n    key += stringify(keys[i]);\n    key += ':';\n    key += ObjectToUniqueKey(obj[keys[i]]);\n  }\n\n  key += '}';\n  return key;\n};\n\n/**\n * Splits a string into a number of smaller segments of maximum size\n * @param str - The string\n * @param segsize - The maximum number of chars in the string.\n * @returns The string, split into appropriately-sized chunks\n */\nexport const splitStringBySize = function (\n  str: string,\n  segsize: number\n): string[] {\n  const len = str.length;\n\n  if (len <= segsize) {\n    return [str];\n  }\n\n  const dataSegs = [];\n  for (let c = 0; c < len; c += segsize) {\n    if (c + segsize > len) {\n      dataSegs.push(str.substring(c, len));\n    } else {\n      dataSegs.push(str.substring(c, c + segsize));\n    }\n  }\n  return dataSegs;\n};\n\n/**\n * Apply a function to each (key, value) pair in an object or\n * apply a function to each (index, value) pair in an array\n * @param obj - The object or array to iterate over\n * @param fn - The function to apply\n */\nexport function each(obj: object, fn: (k: string, v: unknown) => void) {\n  for (const key in obj) {\n    if (obj.hasOwnProperty(key)) {\n      fn(key, obj[key]);\n    }\n  }\n}\n\n/**\n * Like goog.bind, but doesn't bother to create a closure if opt_context is null/undefined.\n * @param callback - Callback function.\n * @param context - Optional context to bind to.\n *\n */\nexport const bindCallback = function (\n  callback: (a: unknown) => void,\n  context?: object | null\n): (a: unknown) => void {\n  return context ? callback.bind(context) : callback;\n};\n\n/**\n * Borrowed from http://hg.secondlife.com/llsd/src/tip/js/typedarray.js (MIT License)\n * I made one modification at the end and removed the NaN / Infinity\n * handling (since it seemed broken [caused an overflow] and we don't need it).  See MJL comments.\n * @param v - A double\n *\n */\nexport const doubleToIEEE754String = function (v: number): string {\n  assert(!isInvalidJSONNumber(v), 'Invalid JSON number'); // MJL\n\n  const ebits = 11,\n    fbits = 52;\n  const bias = (1 << (ebits - 1)) - 1;\n  let s, e, f, ln, i;\n\n  // Compute sign, exponent, fraction\n  // Skip NaN / Infinity handling --MJL.\n  if (v === 0) {\n    e = 0;\n    f = 0;\n    s = 1 / v === -Infinity ? 1 : 0;\n  } else {\n    s = v < 0;\n    v = Math.abs(v);\n\n    if (v >= Math.pow(2, 1 - bias)) {\n      // Normalized\n      ln = Math.min(Math.floor(Math.log(v) / Math.LN2), bias);\n      e = ln + bias;\n      f = Math.round(v * Math.pow(2, fbits - ln) - Math.pow(2, fbits));\n    } else {\n      // Denormalized\n      e = 0;\n      f = Math.round(v / Math.pow(2, 1 - bias - fbits));\n    }\n  }\n\n  // Pack sign, exponent, fraction\n  const bits = [];\n  for (i = fbits; i; i -= 1) {\n    bits.push(f % 2 ? 1 : 0);\n    f = Math.floor(f / 2);\n  }\n  for (i = ebits; i; i -= 1) {\n    bits.push(e % 2 ? 1 : 0);\n    e = Math.floor(e / 2);\n  }\n  bits.push(s ? 1 : 0);\n  bits.reverse();\n  const str = bits.join('');\n\n  // Return the data as a hex string. --MJL\n  let hexByteString = '';\n  for (i = 0; i < 64; i += 8) {\n    let hexByte = parseInt(str.substr(i, 8), 2).toString(16);\n    if (hexByte.length === 1) {\n      hexByte = '0' + hexByte;\n    }\n    hexByteString = hexByteString + hexByte;\n  }\n  return hexByteString.toLowerCase();\n};\n\n/**\n * Used to detect if we're in a Chrome content script (which executes in an\n * isolated environment where long-polling doesn't work).\n */\nexport const isChromeExtensionContentScript = function (): boolean {\n  return !!(\n    typeof window === 'object' &&\n    window['chrome'] &&\n    window['chrome']['extension'] &&\n    !/^chrome/.test(window.location.href)\n  );\n};\n\n/**\n * Used to detect if we're in a Windows 8 Store app.\n */\nexport const isWindowsStoreApp = function (): boolean {\n  // Check for the presence of a couple WinRT globals\n  return typeof Windows === 'object' && typeof Windows.UI === 'object';\n};\n\n/**\n * Converts a server error code to a Javascript Error\n */\nexport function errorForServerCode(code: string, query: QueryContext): Error {\n  let reason = 'Unknown Error';\n  if (code === 'too_big') {\n    reason =\n      'The data requested exceeds the maximum size ' +\n      'that can be accessed with a single request.';\n  } else if (code === 'permission_denied') {\n    reason = \"Client doesn't have permission to access the desired data.\";\n  } else if (code === 'unavailable') {\n    reason = 'The service is unavailable';\n  }\n\n  const error = new Error(\n    code + ' at ' + query._path.toString() + ': ' + reason\n  );\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  (error as any).code = code.toUpperCase();\n  return error;\n}\n\n/**\n * Used to test for integer-looking strings\n */\nexport const INTEGER_REGEXP_ = new RegExp('^-?(0*)\\\\d{1,10}$');\n\n/**\n * For use in keys, the minimum possible 32-bit integer.\n */\nexport const INTEGER_32_MIN = -2147483648;\n\n/**\n * For use in kyes, the maximum possible 32-bit integer.\n */\nexport const INTEGER_32_MAX = 2147483647;\n\n/**\n * If the string contains a 32-bit integer, return it.  Else return null.\n */\nexport const tryParseInt = function (str: string): number | null {\n  if (INTEGER_REGEXP_.test(str)) {\n    const intVal = Number(str);\n    if (intVal >= INTEGER_32_MIN && intVal <= INTEGER_32_MAX) {\n      return intVal;\n    }\n  }\n  return null;\n};\n\n/**\n * Helper to run some code but catch any exceptions and re-throw them later.\n * Useful for preventing user callbacks from breaking internal code.\n *\n * Re-throwing the exception from a setTimeout is a little evil, but it's very\n * convenient (we don't have to try to figure out when is a safe point to\n * re-throw it), and the behavior seems reasonable:\n *\n * * If you aren't pausing on exceptions, you get an error in the console with\n *   the correct stack trace.\n * * If you're pausing on all exceptions, the debugger will pause on your\n *   exception and then again when we rethrow it.\n * * If you're only pausing on uncaught exceptions, the debugger will only pause\n *   on us re-throwing it.\n *\n * @param fn - The code to guard.\n */\nexport const exceptionGuard = function (fn: () => void) {\n  try {\n    fn();\n  } catch (e) {\n    // Re-throw exception when it's safe.\n    setTimeout(() => {\n      // It used to be that \"throw e\" would result in a good console error with\n      // relevant context, but as of Chrome 39, you just get the firebase.js\n      // file/line number where we re-throw it, which is useless. So we log\n      // e.stack explicitly.\n      const stack = e.stack || '';\n      warn('Exception was thrown by user callback.', stack);\n      throw e;\n    }, Math.floor(0));\n  }\n};\n\n/**\n * Helper function to safely call opt_callback with the specified arguments.  It:\n * 1. Turns into a no-op if opt_callback is null or undefined.\n * 2. Wraps the call inside exceptionGuard to prevent exceptions from breaking our state.\n *\n * @param callback - Optional onComplete callback.\n * @param varArgs - Arbitrary args to be passed to opt_onComplete\n */\nexport const callUserCallback = function (\n  // eslint-disable-next-line @typescript-eslint/ban-types\n  callback?: Function | null,\n  ...varArgs: unknown[]\n) {\n  if (typeof callback === 'function') {\n    exceptionGuard(() => {\n      callback(...varArgs);\n    });\n  }\n};\n\n/**\n * @returns {boolean} true if we think we're currently being crawled.\n */\nexport const beingCrawled = function (): boolean {\n  const userAgent =\n    (typeof window === 'object' &&\n      window['navigator'] &&\n      window['navigator']['userAgent']) ||\n    '';\n\n  // For now we whitelist the most popular crawlers.  We should refine this to be the set of crawlers we\n  // believe to support JavaScript/AJAX rendering.\n  // NOTE: Google Webmaster Tools doesn't really belong, but their \"This is how a visitor to your website\n  // would have seen the page\" is flaky if we don't treat it as a crawler.\n  return (\n    userAgent.search(\n      /googlebot|google webmaster tools|bingbot|yahoo! slurp|baiduspider|yandexbot|duckduckbot/i\n    ) >= 0\n  );\n};\n\n/**\n * Export a property of an object using a getter function.\n */\nexport const exportPropGetter = function (\n  object: object,\n  name: string,\n  fnGet: () => unknown\n) {\n  Object.defineProperty(object, name, { get: fnGet });\n};\n\n/**\n * Same as setTimeout() except on Node.JS it will /not/ prevent the process from exiting.\n *\n * It is removed with clearTimeout() as normal.\n *\n * @param fn - Function to run.\n * @param time - Milliseconds to wait before running.\n * @returns The setTimeout() return value.\n */\nexport const setTimeoutNonBlocking = function (\n  fn: () => void,\n  time: number\n): number | object {\n  const timeout: number | object = setTimeout(fn, time);\n  // Note: at the time of this comment, unrefTimer is under the unstable set of APIs. Run with --unstable to enable the API.\n  if (\n    typeof timeout === 'number' &&\n    // @ts-ignore Is only defined in Deno environments.\n    typeof Deno !== 'undefined' &&\n    // @ts-ignore Deno and unrefTimer are only defined in Deno environments.\n    Deno['unrefTimer']\n  ) {\n    // @ts-ignore Deno and unrefTimer are only defined in Deno environments.\n    Deno.unrefTimer(timeout);\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  } else if (typeof timeout === 'object' && (timeout as any)['unref']) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    (timeout as any)['unref']();\n  }\n\n  return timeout;\n};\n","/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  AppCheckInternalComponentName,\n  AppCheckTokenListener,\n  AppCheckTokenResult,\n  FirebaseAppCheckInternal\n} from '@firebase/app-check-interop-types';\nimport { Provider } from '@firebase/component';\n\nimport { warn } from './util/util';\n\n/**\n * Abstraction around AppCheck's token fetching capabilities.\n */\nexport class AppCheckTokenProvider {\n  private appCheck?: FirebaseAppCheckInternal;\n  constructor(\n    private appName_: string,\n    private appCheckProvider?: Provider<AppCheckInternalComponentName>\n  ) {\n    this.appCheck = appCheckProvider?.getImmediate({ optional: true });\n    if (!this.appCheck) {\n      appCheckProvider?.get().then(appCheck => (this.appCheck = appCheck));\n    }\n  }\n\n  getToken(forceRefresh?: boolean): Promise<AppCheckTokenResult> {\n    if (!this.appCheck) {\n      return new Promise<AppCheckTokenResult>((resolve, reject) => {\n        // Support delayed initialization of FirebaseAppCheck. This allows our\n        // customers to initialize the RTDB SDK before initializing Firebase\n        // AppCheck and ensures that all requests are authenticated if a token\n        // becomes available before the timoeout below expires.\n        setTimeout(() => {\n          if (this.appCheck) {\n            this.getToken(forceRefresh).then(resolve, reject);\n          } else {\n            resolve(null);\n          }\n        }, 0);\n      });\n    }\n    return this.appCheck.getToken(forceRefresh);\n  }\n\n  addTokenChangeListener(listener: AppCheckTokenListener) {\n    this.appCheckProvider\n      ?.get()\n      .then(appCheck => appCheck.addTokenListener(listener));\n  }\n\n  notifyForInvalidToken(): void {\n    warn(\n      `Provided AppCheck credentials for the app named \"${this.appName_}\" ` +\n        'are invalid. This usually indicates your app was not initialized correctly.'\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseAuthTokenData } from '@firebase/app-types/private';\nimport {\n  FirebaseAuthInternal,\n  FirebaseAuthInternalName\n} from '@firebase/auth-interop-types';\nimport { Provider } from '@firebase/component';\n\nimport { log, warn } from './util/util';\n\nexport interface AuthTokenProvider {\n  getToken(forceRefresh: boolean): Promise<FirebaseAuthTokenData>;\n  addTokenChangeListener(listener: (token: string | null) => void): void;\n  removeTokenChangeListener(listener: (token: string | null) => void): void;\n  notifyForInvalidToken(): void;\n}\n\n/**\n * Abstraction around FirebaseApp's token fetching capabilities.\n */\nexport class FirebaseAuthTokenProvider implements AuthTokenProvider {\n  private auth_: FirebaseAuthInternal | null = null;\n\n  constructor(\n    private appName_: string,\n    private firebaseOptions_: object,\n    private authProvider_: Provider<FirebaseAuthInternalName>\n  ) {\n    this.auth_ = authProvider_.getImmediate({ optional: true });\n    if (!this.auth_) {\n      authProvider_.onInit(auth => (this.auth_ = auth));\n    }\n  }\n\n  getToken(forceRefresh: boolean): Promise<FirebaseAuthTokenData> {\n    if (!this.auth_) {\n      return new Promise<FirebaseAuthTokenData>((resolve, reject) => {\n        // Support delayed initialization of FirebaseAuth. This allows our\n        // customers to initialize the RTDB SDK before initializing Firebase\n        // Auth and ensures that all requests are authenticated if a token\n        // becomes available before the timoeout below expires.\n        setTimeout(() => {\n          if (this.auth_) {\n            this.getToken(forceRefresh).then(resolve, reject);\n          } else {\n            resolve(null);\n          }\n        }, 0);\n      });\n    }\n\n    return this.auth_.getToken(forceRefresh).catch(error => {\n      // TODO: Need to figure out all the cases this is raised and whether\n      // this makes sense.\n      if (error && error.code === 'auth/token-not-initialized') {\n        log('Got auth/token-not-initialized error.  Treating as null token.');\n        return null;\n      } else {\n        return Promise.reject(error);\n      }\n    });\n  }\n\n  addTokenChangeListener(listener: (token: string | null) => void): void {\n    // TODO: We might want to wrap the listener and call it with no args to\n    // avoid a leaky abstraction, but that makes removing the listener harder.\n    if (this.auth_) {\n      this.auth_.addAuthTokenListener(listener);\n    } else {\n      this.authProvider_\n        .get()\n        .then(auth => auth.addAuthTokenListener(listener));\n    }\n  }\n\n  removeTokenChangeListener(listener: (token: string | null) => void): void {\n    this.authProvider_\n      .get()\n      .then(auth => auth.removeAuthTokenListener(listener));\n  }\n\n  notifyForInvalidToken(): void {\n    let errorMessage =\n      'Provided authentication credentials for the app named \"' +\n      this.appName_ +\n      '\" are invalid. This usually indicates your app was not ' +\n      'initialized correctly. ';\n    if ('credential' in this.firebaseOptions_) {\n      errorMessage +=\n        'Make sure the \"credential\" property provided to initializeApp() ' +\n        'is authorized to access the specified \"databaseURL\" and is from the correct ' +\n        'project.';\n    } else if ('serviceAccount' in this.firebaseOptions_) {\n      errorMessage +=\n        'Make sure the \"serviceAccount\" property provided to initializeApp() ' +\n        'is authorized to access the specified \"databaseURL\" and is from the correct ' +\n        'project.';\n    } else {\n      errorMessage +=\n        'Make sure the \"apiKey\" and \"databaseURL\" properties provided to ' +\n        'initializeApp() match the values provided for your app at ' +\n        'https://console.firebase.google.com/.';\n    }\n    warn(errorMessage);\n  }\n}\n\n/* AuthTokenProvider that supplies a constant token. Used by Admin SDK or mockUserToken with emulators. */\nexport class EmulatorTokenProvider implements AuthTokenProvider {\n  /** A string that is treated as an admin access token by the RTDB emulator. Used by Admin SDK. */\n  static OWNER = 'owner';\n\n  constructor(private accessToken: string) {}\n\n  getToken(forceRefresh: boolean): Promise<FirebaseAuthTokenData> {\n    return Promise.resolve({\n      accessToken: this.accessToken\n    });\n  }\n\n  addTokenChangeListener(listener: (token: string | null) => void): void {\n    // Invoke the listener immediately to match the behavior in Firebase Auth\n    // (see packages/auth/src/auth.js#L1807)\n    listener(this.accessToken);\n  }\n\n  removeTokenChangeListener(listener: (token: string | null) => void): void {}\n\n  notifyForInvalidToken(): void {}\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport const PROTOCOL_VERSION = '5';\n\nexport const VERSION_PARAM = 'v';\n\nexport const TRANSPORT_SESSION_PARAM = 's';\n\nexport const REFERER_PARAM = 'r';\n\nexport const FORGE_REF = 'f';\n\n// Matches console.firebase.google.com, firebase-console-*.corp.google.com and\n// firebase.corp.google.com\nexport const FORGE_DOMAIN_RE =\n  /(console\\.firebase|firebase-console-\\w+\\.corp|firebase\\.corp)\\.google\\.com/;\n\nexport const LAST_SESSION_PARAM = 'ls';\n\nexport const APPLICATION_ID_PARAM = 'p';\n\nexport const APP_CHECK_TOKEN_PARAM = 'ac';\n\nexport const WEBSOCKET = 'websocket';\n\nexport const LONG_POLLING = 'long_polling';\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { LONG_POLLING, WEBSOCKET } from '../realtime/Constants';\n\nimport { PersistentStorage } from './storage/storage';\nimport { each } from './util/util';\n\n/**\n * A class that holds metadata about a Repo object\n */\nexport class RepoInfo {\n  private _host: string;\n  private _domain: string;\n  internalHost: string;\n\n  /**\n   * @param host - Hostname portion of the url for the repo\n   * @param secure - Whether or not this repo is accessed over ssl\n   * @param namespace - The namespace represented by the repo\n   * @param webSocketOnly - Whether to prefer websockets over all other transports (used by Nest).\n   * @param nodeAdmin - Whether this instance uses Admin SDK credentials\n   * @param persistenceKey - Override the default session persistence storage key\n   */\n  constructor(\n    host: string,\n    public readonly secure: boolean,\n    public readonly namespace: string,\n    public readonly webSocketOnly: boolean,\n    public readonly nodeAdmin: boolean = false,\n    public readonly persistenceKey: string = '',\n    public readonly includeNamespaceInQueryParams: boolean = false\n  ) {\n    this._host = host.toLowerCase();\n    this._domain = this._host.substr(this._host.indexOf('.') + 1);\n    this.internalHost =\n      (PersistentStorage.get('host:' + host) as string) || this._host;\n  }\n\n  isCacheableHost(): boolean {\n    return this.internalHost.substr(0, 2) === 's-';\n  }\n\n  isCustomHost() {\n    return (\n      this._domain !== 'firebaseio.com' &&\n      this._domain !== 'firebaseio-demo.com'\n    );\n  }\n\n  get host() {\n    return this._host;\n  }\n\n  set host(newHost: string) {\n    if (newHost !== this.internalHost) {\n      this.internalHost = newHost;\n      if (this.isCacheableHost()) {\n        PersistentStorage.set('host:' + this._host, this.internalHost);\n      }\n    }\n  }\n\n  toString(): string {\n    let str = this.toURLString();\n    if (this.persistenceKey) {\n      str += '<' + this.persistenceKey + '>';\n    }\n    return str;\n  }\n\n  toURLString(): string {\n    const protocol = this.secure ? 'https://' : 'http://';\n    const query = this.includeNamespaceInQueryParams\n      ? `?ns=${this.namespace}`\n      : '';\n    return `${protocol}${this.host}/${query}`;\n  }\n}\n\nfunction repoInfoNeedsQueryParam(repoInfo: RepoInfo): boolean {\n  return (\n    repoInfo.host !== repoInfo.internalHost ||\n    repoInfo.isCustomHost() ||\n    repoInfo.includeNamespaceInQueryParams\n  );\n}\n\n/**\n * Returns the websocket URL for this repo\n * @param repoInfo - RepoInfo object\n * @param type - of connection\n * @param params - list\n * @returns The URL for this repo\n */\nexport function repoInfoConnectionURL(\n  repoInfo: RepoInfo,\n  type: string,\n  params: { [k: string]: string }\n): string {\n  assert(typeof type === 'string', 'typeof type must == string');\n  assert(typeof params === 'object', 'typeof params must == object');\n\n  let connURL: string;\n  if (type === WEBSOCKET) {\n    connURL =\n      (repoInfo.secure ? 'wss://' : 'ws://') + repoInfo.internalHost + '/.ws?';\n  } else if (type === LONG_POLLING) {\n    connURL =\n      (repoInfo.secure ? 'https://' : 'http://') +\n      repoInfo.internalHost +\n      '/.lp?';\n  } else {\n    throw new Error('Unknown connection type: ' + type);\n  }\n  if (repoInfoNeedsQueryParam(repoInfo)) {\n    params['ns'] = repoInfo.namespace;\n  }\n\n  const pairs: string[] = [];\n\n  each(params, (key: string, value: string) => {\n    pairs.push(key + '=' + value);\n  });\n\n  return connURL + pairs.join('&');\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { deepCopy, contains } from '@firebase/util';\n\n/**\n * Tracks a collection of stats.\n */\nexport class StatsCollection {\n  private counters_: { [k: string]: number } = {};\n\n  incrementCounter(name: string, amount: number = 1) {\n    if (!contains(this.counters_, name)) {\n      this.counters_[name] = 0;\n    }\n\n    this.counters_[name] += amount;\n  }\n\n  get() {\n    return deepCopy(this.counters_);\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { RepoInfo } from '../RepoInfo';\n\nimport { StatsCollection } from './StatsCollection';\n\nconst collections: { [k: string]: StatsCollection } = {};\nconst reporters: { [k: string]: unknown } = {};\n\nexport function statsManagerGetCollection(repoInfo: RepoInfo): StatsCollection {\n  const hashString = repoInfo.toString();\n\n  if (!collections[hashString]) {\n    collections[hashString] = new StatsCollection();\n  }\n\n  return collections[hashString];\n}\n\nexport function statsManagerGetOrCreateReporter<T>(\n  repoInfo: RepoInfo,\n  creatorFunction: () => T\n): T {\n  const hashString = repoInfo.toString();\n\n  if (!reporters[hashString]) {\n    reporters[hashString] = creatorFunction();\n  }\n\n  return reporters[hashString] as T;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { exceptionGuard } from '../../core/util/util';\n\n/**\n * This class ensures the packets from the server arrive in order\n * This class takes data from the server and ensures it gets passed into the callbacks in order.\n */\nexport class PacketReceiver {\n  pendingResponses: unknown[] = [];\n  currentResponseNum = 0;\n  closeAfterResponse = -1;\n  onClose: (() => void) | null = null;\n\n  /**\n   * @param onMessage_\n   */\n  constructor(private onMessage_: (a: {}) => void) {}\n\n  closeAfter(responseNum: number, callback: () => void) {\n    this.closeAfterResponse = responseNum;\n    this.onClose = callback;\n    if (this.closeAfterResponse < this.currentResponseNum) {\n      this.onClose();\n      this.onClose = null;\n    }\n  }\n\n  /**\n   * Each message from the server comes with a response number, and an array of data. The responseNumber\n   * allows us to ensure that we process them in the right order, since we can't be guaranteed that all\n   * browsers will respond in the same order as the requests we sent\n   */\n  handleResponse(requestNum: number, data: unknown[]) {\n    this.pendingResponses[requestNum] = data;\n    while (this.pendingResponses[this.currentResponseNum]) {\n      const toProcess = this.pendingResponses[\n        this.currentResponseNum\n      ] as unknown[];\n      delete this.pendingResponses[this.currentResponseNum];\n      for (let i = 0; i < toProcess.length; ++i) {\n        if (toProcess[i]) {\n          exceptionGuard(() => {\n            this.onMessage_(toProcess[i]);\n          });\n        }\n      }\n      if (this.currentResponseNum === this.closeAfterResponse) {\n        if (this.onClose) {\n          this.onClose();\n          this.onClose = null;\n        }\n        break;\n      }\n      this.currentResponseNum++;\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { base64Encode, isNodeSdk, stringify } from '@firebase/util';\n\nimport { RepoInfo, repoInfoConnectionURL } from '../core/RepoInfo';\nimport { StatsCollection } from '../core/stats/StatsCollection';\nimport { statsManagerGetCollection } from '../core/stats/StatsManager';\nimport {\n  executeWhenDOMReady,\n  isChromeExtensionContentScript,\n  isWindowsStoreApp,\n  log,\n  logWrapper,\n  LUIDGenerator,\n  splitStringBySize\n} from '../core/util/util';\n\nimport {\n  APP_CHECK_TOKEN_PARAM,\n  APPLICATION_ID_PARAM,\n  FORGE_DOMAIN_RE,\n  FORGE_REF,\n  LAST_SESSION_PARAM,\n  LONG_POLLING,\n  PROTOCOL_VERSION,\n  REFERER_PARAM,\n  TRANSPORT_SESSION_PARAM,\n  VERSION_PARAM\n} from './Constants';\nimport { PacketReceiver } from './polling/PacketReceiver';\nimport { Transport } from './Transport';\n\n// URL query parameters associated with longpolling\nexport const FIREBASE_LONGPOLL_START_PARAM = 'start';\nexport const FIREBASE_LONGPOLL_CLOSE_COMMAND = 'close';\nexport const FIREBASE_LONGPOLL_COMMAND_CB_NAME = 'pLPCommand';\nexport const FIREBASE_LONGPOLL_DATA_CB_NAME = 'pRTLPCB';\nexport const FIREBASE_LONGPOLL_ID_PARAM = 'id';\nexport const FIREBASE_LONGPOLL_PW_PARAM = 'pw';\nexport const FIREBASE_LONGPOLL_SERIAL_PARAM = 'ser';\nexport const FIREBASE_LONGPOLL_CALLBACK_ID_PARAM = 'cb';\nexport const FIREBASE_LONGPOLL_SEGMENT_NUM_PARAM = 'seg';\nexport const FIREBASE_LONGPOLL_SEGMENTS_IN_PACKET = 'ts';\nexport const FIREBASE_LONGPOLL_DATA_PARAM = 'd';\nexport const FIREBASE_LONGPOLL_DISCONN_FRAME_PARAM = 'disconn';\nexport const FIREBASE_LONGPOLL_DISCONN_FRAME_REQUEST_PARAM = 'dframe';\n\n//Data size constants.\n//TODO: Perf: the maximum length actually differs from browser to browser.\n// We should check what browser we're on and set accordingly.\nconst MAX_URL_DATA_SIZE = 1870;\nconst SEG_HEADER_SIZE = 30; //ie: &seg=8299234&ts=982389123&d=\nconst MAX_PAYLOAD_SIZE = MAX_URL_DATA_SIZE - SEG_HEADER_SIZE;\n\n/**\n * Keepalive period\n * send a fresh request at minimum every 25 seconds. Opera has a maximum request\n * length of 30 seconds that we can't exceed.\n */\nconst KEEPALIVE_REQUEST_INTERVAL = 25000;\n\n/**\n * How long to wait before aborting a long-polling connection attempt.\n */\nconst LP_CONNECT_TIMEOUT = 30000;\n\n/**\n * This class manages a single long-polling connection.\n */\nexport class BrowserPollConnection implements Transport {\n  bytesSent = 0;\n  bytesReceived = 0;\n  urlFn: (params: object) => string;\n  scriptTagHolder: FirebaseIFrameScriptHolder;\n  myDisconnFrame: HTMLIFrameElement;\n  curSegmentNum: number;\n  myPacketOrderer: PacketReceiver;\n  id: string;\n  password: string;\n  private log_: (...a: unknown[]) => void;\n  private stats_: StatsCollection;\n  private everConnected_ = false;\n  private isClosed_: boolean;\n  private connectTimeoutTimer_: number | null;\n  private onDisconnect_: ((a?: boolean) => void) | null;\n\n  /**\n   * @param connId An identifier for this connection, used for logging\n   * @param repoInfo The info for the endpoint to send data to.\n   * @param applicationId The Firebase App ID for this project.\n   * @param appCheckToken The AppCheck token for this client.\n   * @param authToken The AuthToken to use for this connection.\n   * @param transportSessionId Optional transportSessionid if we are\n   * reconnecting for an existing transport session\n   * @param lastSessionId Optional lastSessionId if the PersistentConnection has\n   * already created a connection previously\n   */\n  constructor(\n    public connId: string,\n    public repoInfo: RepoInfo,\n    private applicationId?: string,\n    private appCheckToken?: string,\n    private authToken?: string,\n    public transportSessionId?: string,\n    public lastSessionId?: string\n  ) {\n    this.log_ = logWrapper(connId);\n    this.stats_ = statsManagerGetCollection(repoInfo);\n    this.urlFn = (params: { [k: string]: string }) => {\n      // Always add the token if we have one.\n      if (this.appCheckToken) {\n        params[APP_CHECK_TOKEN_PARAM] = this.appCheckToken;\n      }\n      return repoInfoConnectionURL(repoInfo, LONG_POLLING, params);\n    };\n  }\n\n  /**\n   * @param onMessage - Callback when messages arrive\n   * @param onDisconnect - Callback with connection lost.\n   */\n  open(onMessage: (msg: {}) => void, onDisconnect: (a?: boolean) => void) {\n    this.curSegmentNum = 0;\n    this.onDisconnect_ = onDisconnect;\n    this.myPacketOrderer = new PacketReceiver(onMessage);\n    this.isClosed_ = false;\n\n    this.connectTimeoutTimer_ = setTimeout(() => {\n      this.log_('Timed out trying to connect.');\n      // Make sure we clear the host cache\n      this.onClosed_();\n      this.connectTimeoutTimer_ = null;\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    }, Math.floor(LP_CONNECT_TIMEOUT)) as any;\n\n    // Ensure we delay the creation of the iframe until the DOM is loaded.\n    executeWhenDOMReady(() => {\n      if (this.isClosed_) {\n        return;\n      }\n\n      //Set up a callback that gets triggered once a connection is set up.\n      this.scriptTagHolder = new FirebaseIFrameScriptHolder(\n        (...args) => {\n          const [command, arg1, arg2, arg3, arg4] = args;\n          this.incrementIncomingBytes_(args);\n          if (!this.scriptTagHolder) {\n            return; // we closed the connection.\n          }\n\n          if (this.connectTimeoutTimer_) {\n            clearTimeout(this.connectTimeoutTimer_);\n            this.connectTimeoutTimer_ = null;\n          }\n          this.everConnected_ = true;\n          if (command === FIREBASE_LONGPOLL_START_PARAM) {\n            this.id = arg1 as string;\n            this.password = arg2 as string;\n          } else if (command === FIREBASE_LONGPOLL_CLOSE_COMMAND) {\n            // Don't clear the host cache. We got a response from the server, so we know it's reachable\n            if (arg1) {\n              // We aren't expecting any more data (other than what the server's already in the process of sending us\n              // through our already open polls), so don't send any more.\n              this.scriptTagHolder.sendNewPolls = false;\n\n              // arg1 in this case is the last response number sent by the server. We should try to receive\n              // all of the responses up to this one before closing\n              this.myPacketOrderer.closeAfter(arg1 as number, () => {\n                this.onClosed_();\n              });\n            } else {\n              this.onClosed_();\n            }\n          } else {\n            throw new Error('Unrecognized command received: ' + command);\n          }\n        },\n        (...args) => {\n          const [pN, data] = args;\n          this.incrementIncomingBytes_(args);\n          this.myPacketOrderer.handleResponse(pN as number, data as unknown[]);\n        },\n        () => {\n          this.onClosed_();\n        },\n        this.urlFn\n      );\n\n      //Send the initial request to connect. The serial number is simply to keep the browser from pulling previous results\n      //from cache.\n      const urlParams: { [k: string]: string | number } = {};\n      urlParams[FIREBASE_LONGPOLL_START_PARAM] = 't';\n      urlParams[FIREBASE_LONGPOLL_SERIAL_PARAM] = Math.floor(\n        Math.random() * 100000000\n      );\n      if (this.scriptTagHolder.uniqueCallbackIdentifier) {\n        urlParams[FIREBASE_LONGPOLL_CALLBACK_ID_PARAM] =\n          this.scriptTagHolder.uniqueCallbackIdentifier;\n      }\n      urlParams[VERSION_PARAM] = PROTOCOL_VERSION;\n      if (this.transportSessionId) {\n        urlParams[TRANSPORT_SESSION_PARAM] = this.transportSessionId;\n      }\n      if (this.lastSessionId) {\n        urlParams[LAST_SESSION_PARAM] = this.lastSessionId;\n      }\n      if (this.applicationId) {\n        urlParams[APPLICATION_ID_PARAM] = this.applicationId;\n      }\n      if (this.appCheckToken) {\n        urlParams[APP_CHECK_TOKEN_PARAM] = this.appCheckToken;\n      }\n      if (\n        typeof location !== 'undefined' &&\n        location.hostname &&\n        FORGE_DOMAIN_RE.test(location.hostname)\n      ) {\n        urlParams[REFERER_PARAM] = FORGE_REF;\n      }\n      const connectURL = this.urlFn(urlParams);\n      this.log_('Connecting via long-poll to ' + connectURL);\n      this.scriptTagHolder.addTag(connectURL, () => {\n        /* do nothing */\n      });\n    });\n  }\n\n  /**\n   * Call this when a handshake has completed successfully and we want to consider the connection established\n   */\n  start() {\n    this.scriptTagHolder.startLongPoll(this.id, this.password);\n    this.addDisconnectPingFrame(this.id, this.password);\n  }\n\n  static forceAllow_: boolean;\n\n  /**\n   * Forces long polling to be considered as a potential transport\n   */\n  static forceAllow() {\n    BrowserPollConnection.forceAllow_ = true;\n  }\n\n  static forceDisallow_: boolean;\n\n  /**\n   * Forces longpolling to not be considered as a potential transport\n   */\n  static forceDisallow() {\n    BrowserPollConnection.forceDisallow_ = true;\n  }\n\n  // Static method, use string literal so it can be accessed in a generic way\n  static isAvailable() {\n    if (isNodeSdk()) {\n      return false;\n    } else if (BrowserPollConnection.forceAllow_) {\n      return true;\n    } else {\n      // NOTE: In React-Native there's normally no 'document', but if you debug a React-Native app in\n      // the Chrome debugger, 'document' is defined, but document.createElement is null (2015/06/08).\n      return (\n        !BrowserPollConnection.forceDisallow_ &&\n        typeof document !== 'undefined' &&\n        document.createElement != null &&\n        !isChromeExtensionContentScript() &&\n        !isWindowsStoreApp()\n      );\n    }\n  }\n\n  /**\n   * No-op for polling\n   */\n  markConnectionHealthy() {}\n\n  /**\n   * Stops polling and cleans up the iframe\n   */\n  private shutdown_() {\n    this.isClosed_ = true;\n\n    if (this.scriptTagHolder) {\n      this.scriptTagHolder.close();\n      this.scriptTagHolder = null;\n    }\n\n    //remove the disconnect frame, which will trigger an XHR call to the server to tell it we're leaving.\n    if (this.myDisconnFrame) {\n      document.body.removeChild(this.myDisconnFrame);\n      this.myDisconnFrame = null;\n    }\n\n    if (this.connectTimeoutTimer_) {\n      clearTimeout(this.connectTimeoutTimer_);\n      this.connectTimeoutTimer_ = null;\n    }\n  }\n\n  /**\n   * Triggered when this transport is closed\n   */\n  private onClosed_() {\n    if (!this.isClosed_) {\n      this.log_('Longpoll is closing itself');\n      this.shutdown_();\n\n      if (this.onDisconnect_) {\n        this.onDisconnect_(this.everConnected_);\n        this.onDisconnect_ = null;\n      }\n    }\n  }\n\n  /**\n   * External-facing close handler. RealTime has requested we shut down. Kill our connection and tell the server\n   * that we've left.\n   */\n  close() {\n    if (!this.isClosed_) {\n      this.log_('Longpoll is being closed.');\n      this.shutdown_();\n    }\n  }\n\n  /**\n   * Send the JSON object down to the server. It will need to be stringified, base64 encoded, and then\n   * broken into chunks (since URLs have a small maximum length).\n   * @param data - The JSON data to transmit.\n   */\n  send(data: {}) {\n    const dataStr = stringify(data);\n    this.bytesSent += dataStr.length;\n    this.stats_.incrementCounter('bytes_sent', dataStr.length);\n\n    //first, lets get the base64-encoded data\n    const base64data = base64Encode(dataStr);\n\n    //We can only fit a certain amount in each URL, so we need to split this request\n    //up into multiple pieces if it doesn't fit in one request.\n    const dataSegs = splitStringBySize(base64data, MAX_PAYLOAD_SIZE);\n\n    //Enqueue each segment for transmission. We assign each chunk a sequential ID and a total number\n    //of segments so that we can reassemble the packet on the server.\n    for (let i = 0; i < dataSegs.length; i++) {\n      this.scriptTagHolder.enqueueSegment(\n        this.curSegmentNum,\n        dataSegs.length,\n        dataSegs[i]\n      );\n      this.curSegmentNum++;\n    }\n  }\n\n  /**\n   * This is how we notify the server that we're leaving.\n   * We aren't able to send requests with DHTML on a window close event, but we can\n   * trigger XHR requests in some browsers (everything but Opera basically).\n   */\n  addDisconnectPingFrame(id: string, pw: string) {\n    if (isNodeSdk()) {\n      return;\n    }\n    this.myDisconnFrame = document.createElement('iframe');\n    const urlParams: { [k: string]: string } = {};\n    urlParams[FIREBASE_LONGPOLL_DISCONN_FRAME_REQUEST_PARAM] = 't';\n    urlParams[FIREBASE_LONGPOLL_ID_PARAM] = id;\n    urlParams[FIREBASE_LONGPOLL_PW_PARAM] = pw;\n    this.myDisconnFrame.src = this.urlFn(urlParams);\n    this.myDisconnFrame.style.display = 'none';\n\n    document.body.appendChild(this.myDisconnFrame);\n  }\n\n  /**\n   * Used to track the bytes received by this client\n   */\n  private incrementIncomingBytes_(args: unknown) {\n    // TODO: This is an annoying perf hit just to track the number of incoming bytes.  Maybe it should be opt-in.\n    const bytesReceived = stringify(args).length;\n    this.bytesReceived += bytesReceived;\n    this.stats_.incrementCounter('bytes_received', bytesReceived);\n  }\n}\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport interface IFrameElement extends HTMLIFrameElement {\n  doc: Document;\n}\n\n/*********************************************************************************************\n * A wrapper around an iframe that is used as a long-polling script holder.\n *********************************************************************************************/\nexport class FirebaseIFrameScriptHolder {\n  //We maintain a count of all of the outstanding requests, because if we have too many active at once it can cause\n  //problems in some browsers.\n  outstandingRequests = new Set<number>();\n\n  //A queue of the pending segments waiting for transmission to the server.\n  pendingSegs: Array<{ seg: number; ts: number; d: unknown }> = [];\n\n  //A serial number. We use this for two things:\n  // 1) A way to ensure the browser doesn't cache responses to polls\n  // 2) A way to make the server aware when long-polls arrive in a different order than we started them. The\n  //    server needs to release both polls in this case or it will cause problems in Opera since Opera can only execute\n  //    JSONP code in the order it was added to the iframe.\n  currentSerial = Math.floor(Math.random() * 100000000);\n\n  // This gets set to false when we're \"closing down\" the connection (e.g. we're switching transports but there's still\n  // incoming data from the server that we're waiting for).\n  sendNewPolls = true;\n\n  uniqueCallbackIdentifier: number;\n  myIFrame: IFrameElement;\n  alive: boolean;\n  myID: string;\n  myPW: string;\n  commandCB: (command: string, ...args: unknown[]) => void;\n  onMessageCB: (...args: unknown[]) => void;\n\n  /**\n   * @param commandCB - The callback to be called when control commands are recevied from the server.\n   * @param onMessageCB - The callback to be triggered when responses arrive from the server.\n   * @param onDisconnect - The callback to be triggered when this tag holder is closed\n   * @param urlFn - A function that provides the URL of the endpoint to send data to.\n   */\n  constructor(\n    commandCB: (command: string, ...args: unknown[]) => void,\n    onMessageCB: (...args: unknown[]) => void,\n    public onDisconnect: () => void,\n    public urlFn: (a: object) => string\n  ) {\n    if (!isNodeSdk()) {\n      //Each script holder registers a couple of uniquely named callbacks with the window. These are called from the\n      //iframes where we put the long-polling script tags. We have two callbacks:\n      //   1) Command Callback - Triggered for control issues, like starting a connection.\n      //   2) Message Callback - Triggered when new data arrives.\n      this.uniqueCallbackIdentifier = LUIDGenerator();\n      window[\n        FIREBASE_LONGPOLL_COMMAND_CB_NAME + this.uniqueCallbackIdentifier\n      ] = commandCB;\n      window[FIREBASE_LONGPOLL_DATA_CB_NAME + this.uniqueCallbackIdentifier] =\n        onMessageCB;\n\n      //Create an iframe for us to add script tags to.\n      this.myIFrame = FirebaseIFrameScriptHolder.createIFrame_();\n\n      // Set the iframe's contents.\n      let script = '';\n      // if we set a javascript url, it's IE and we need to set the document domain. The javascript url is sufficient\n      // for ie9, but ie8 needs to do it again in the document itself.\n      if (\n        this.myIFrame.src &&\n        this.myIFrame.src.substr(0, 'javascript:'.length) === 'javascript:'\n      ) {\n        const currentDomain = document.domain;\n        script = '<script>document.domain=\"' + currentDomain + '\";</script>';\n      }\n      const iframeContents = '<html><body>' + script + '</body></html>';\n      try {\n        this.myIFrame.doc.open();\n        this.myIFrame.doc.write(iframeContents);\n        this.myIFrame.doc.close();\n      } catch (e) {\n        log('frame writing exception');\n        if (e.stack) {\n          log(e.stack);\n        }\n        log(e);\n      }\n    } else {\n      this.commandCB = commandCB;\n      this.onMessageCB = onMessageCB;\n    }\n  }\n\n  /**\n   * Each browser has its own funny way to handle iframes. Here we mush them all together into one object that I can\n   * actually use.\n   */\n  private static createIFrame_(): IFrameElement {\n    const iframe = document.createElement('iframe') as IFrameElement;\n    iframe.style.display = 'none';\n\n    // This is necessary in order to initialize the document inside the iframe\n    if (document.body) {\n      document.body.appendChild(iframe);\n      try {\n        // If document.domain has been modified in IE, this will throw an error, and we need to set the\n        // domain of the iframe's document manually. We can do this via a javascript: url as the src attribute\n        // Also note that we must do this *after* the iframe has been appended to the page. Otherwise it doesn't work.\n        const a = iframe.contentWindow.document;\n        if (!a) {\n          // Apologies for the log-spam, I need to do something to keep closure from optimizing out the assignment above.\n          log('No IE domain setting required');\n        }\n      } catch (e) {\n        const domain = document.domain;\n        iframe.src =\n          \"javascript:void((function(){document.open();document.domain='\" +\n          domain +\n          \"';document.close();})())\";\n      }\n    } else {\n      // LongPollConnection attempts to delay initialization until the document is ready, so hopefully this\n      // never gets hit.\n      throw 'Document body has not initialized. Wait to initialize Firebase until after the document is ready.';\n    }\n\n    // Get the document of the iframe in a browser-specific way.\n    if (iframe.contentDocument) {\n      iframe.doc = iframe.contentDocument; // Firefox, Opera, Safari\n    } else if (iframe.contentWindow) {\n      iframe.doc = iframe.contentWindow.document; // Internet Explorer\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    } else if ((iframe as any).document) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      iframe.doc = (iframe as any).document; //others?\n    }\n\n    return iframe;\n  }\n\n  /**\n   * Cancel all outstanding queries and remove the frame.\n   */\n  close() {\n    //Mark this iframe as dead, so no new requests are sent.\n    this.alive = false;\n\n    if (this.myIFrame) {\n      //We have to actually remove all of the html inside this iframe before removing it from the\n      //window, or IE will continue loading and executing the script tags we've already added, which\n      //can lead to some errors being thrown. Setting innerHTML seems to be the easiest way to do this.\n      this.myIFrame.doc.body.innerHTML = '';\n      setTimeout(() => {\n        if (this.myIFrame !== null) {\n          document.body.removeChild(this.myIFrame);\n          this.myIFrame = null;\n        }\n      }, Math.floor(0));\n    }\n\n    // Protect from being called recursively.\n    const onDisconnect = this.onDisconnect;\n    if (onDisconnect) {\n      this.onDisconnect = null;\n      onDisconnect();\n    }\n  }\n\n  /**\n   * Actually start the long-polling session by adding the first script tag(s) to the iframe.\n   * @param id - The ID of this connection\n   * @param pw - The password for this connection\n   */\n  startLongPoll(id: string, pw: string) {\n    this.myID = id;\n    this.myPW = pw;\n    this.alive = true;\n\n    //send the initial request. If there are requests queued, make sure that we transmit as many as we are currently able to.\n    while (this.newRequest_()) {}\n  }\n\n  /**\n   * This is called any time someone might want a script tag to be added. It adds a script tag when there aren't\n   * too many outstanding requests and we are still alive.\n   *\n   * If there are outstanding packet segments to send, it sends one. If there aren't, it sends a long-poll anyways if\n   * needed.\n   */\n  private newRequest_() {\n    // We keep one outstanding request open all the time to receive data, but if we need to send data\n    // (pendingSegs.length > 0) then we create a new request to send the data.  The server will automatically\n    // close the old request.\n    if (\n      this.alive &&\n      this.sendNewPolls &&\n      this.outstandingRequests.size < (this.pendingSegs.length > 0 ? 2 : 1)\n    ) {\n      //construct our url\n      this.currentSerial++;\n      const urlParams: { [k: string]: string | number } = {};\n      urlParams[FIREBASE_LONGPOLL_ID_PARAM] = this.myID;\n      urlParams[FIREBASE_LONGPOLL_PW_PARAM] = this.myPW;\n      urlParams[FIREBASE_LONGPOLL_SERIAL_PARAM] = this.currentSerial;\n      let theURL = this.urlFn(urlParams);\n      //Now add as much data as we can.\n      let curDataString = '';\n      let i = 0;\n\n      while (this.pendingSegs.length > 0) {\n        //first, lets see if the next segment will fit.\n        const nextSeg = this.pendingSegs[0];\n        if (\n          (nextSeg.d as unknown[]).length +\n            SEG_HEADER_SIZE +\n            curDataString.length <=\n          MAX_URL_DATA_SIZE\n        ) {\n          //great, the segment will fit. Lets append it.\n          const theSeg = this.pendingSegs.shift();\n          curDataString =\n            curDataString +\n            '&' +\n            FIREBASE_LONGPOLL_SEGMENT_NUM_PARAM +\n            i +\n            '=' +\n            theSeg.seg +\n            '&' +\n            FIREBASE_LONGPOLL_SEGMENTS_IN_PACKET +\n            i +\n            '=' +\n            theSeg.ts +\n            '&' +\n            FIREBASE_LONGPOLL_DATA_PARAM +\n            i +\n            '=' +\n            theSeg.d;\n          i++;\n        } else {\n          break;\n        }\n      }\n\n      theURL = theURL + curDataString;\n      this.addLongPollTag_(theURL, this.currentSerial);\n\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  /**\n   * Queue a packet for transmission to the server.\n   * @param segnum - A sequential id for this packet segment used for reassembly\n   * @param totalsegs - The total number of segments in this packet\n   * @param data - The data for this segment.\n   */\n  enqueueSegment(segnum: number, totalsegs: number, data: unknown) {\n    //add this to the queue of segments to send.\n    this.pendingSegs.push({ seg: segnum, ts: totalsegs, d: data });\n\n    //send the data immediately if there isn't already data being transmitted, unless\n    //startLongPoll hasn't been called yet.\n    if (this.alive) {\n      this.newRequest_();\n    }\n  }\n\n  /**\n   * Add a script tag for a regular long-poll request.\n   * @param url - The URL of the script tag.\n   * @param serial - The serial number of the request.\n   */\n  private addLongPollTag_(url: string, serial: number) {\n    //remember that we sent this request.\n    this.outstandingRequests.add(serial);\n\n    const doNewRequest = () => {\n      this.outstandingRequests.delete(serial);\n      this.newRequest_();\n    };\n\n    // If this request doesn't return on its own accord (by the server sending us some data), we'll\n    // create a new one after the KEEPALIVE interval to make sure we always keep a fresh request open.\n    const keepaliveTimeout = setTimeout(\n      doNewRequest,\n      Math.floor(KEEPALIVE_REQUEST_INTERVAL)\n    );\n\n    const readyStateCB = () => {\n      // Request completed.  Cancel the keepalive.\n      clearTimeout(keepaliveTimeout);\n\n      // Trigger a new request so we can continue receiving data.\n      doNewRequest();\n    };\n\n    this.addTag(url, readyStateCB);\n  }\n\n  /**\n   * Add an arbitrary script tag to the iframe.\n   * @param url - The URL for the script tag source.\n   * @param loadCB - A callback to be triggered once the script has loaded.\n   */\n  addTag(url: string, loadCB: () => void) {\n    if (isNodeSdk()) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      (this as any).doNodeLongPoll(url, loadCB);\n    } else {\n      setTimeout(() => {\n        try {\n          // if we're already closed, don't add this poll\n          if (!this.sendNewPolls) {\n            return;\n          }\n          const newScript = this.myIFrame.doc.createElement('script');\n          newScript.type = 'text/javascript';\n          newScript.async = true;\n          newScript.src = url;\n          // eslint-disable-next-line @typescript-eslint/no-explicit-any\n          newScript.onload = (newScript as any).onreadystatechange =\n            function () {\n              // eslint-disable-next-line @typescript-eslint/no-explicit-any\n              const rstate = (newScript as any).readyState;\n              if (!rstate || rstate === 'loaded' || rstate === 'complete') {\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                newScript.onload = (newScript as any).onreadystatechange = null;\n                if (newScript.parentNode) {\n                  newScript.parentNode.removeChild(newScript);\n                }\n                loadCB();\n              }\n            };\n          newScript.onerror = () => {\n            log('Long-poll script failed to load: ' + url);\n            this.sendNewPolls = false;\n            this.close();\n          };\n          this.myIFrame.doc.body.appendChild(newScript);\n        } catch (e) {\n          // TODO: we should make this error visible somehow\n        }\n      }, Math.floor(1));\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, isNodeSdk, jsonEval, stringify } from '@firebase/util';\n\nimport { RepoInfo, repoInfoConnectionURL } from '../core/RepoInfo';\nimport { StatsCollection } from '../core/stats/StatsCollection';\nimport { statsManagerGetCollection } from '../core/stats/StatsManager';\nimport { PersistentStorage } from '../core/storage/storage';\nimport { logWrapper, splitStringBySize } from '../core/util/util';\nimport { SDK_VERSION } from '../core/version';\n\nimport {\n  APPLICATION_ID_PARAM,\n  APP_CHECK_TOKEN_PARAM,\n  FORGE_DOMAIN_RE,\n  FORGE_REF,\n  LAST_SESSION_PARAM,\n  PROTOCOL_VERSION,\n  REFERER_PARAM,\n  TRANSPORT_SESSION_PARAM,\n  VERSION_PARAM,\n  WEBSOCKET\n} from './Constants';\nimport { Transport } from './Transport';\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\ndeclare const MozWebSocket: any;\n\nconst WEBSOCKET_MAX_FRAME_SIZE = 16384;\nconst WEBSOCKET_KEEPALIVE_INTERVAL = 45000;\n\nlet WebSocketImpl = null;\nif (typeof MozWebSocket !== 'undefined') {\n  WebSocketImpl = MozWebSocket;\n} else if (typeof WebSocket !== 'undefined') {\n  WebSocketImpl = WebSocket;\n}\n\nexport function setWebSocketImpl(impl) {\n  WebSocketImpl = impl;\n}\n\n/**\n * Create a new websocket connection with the given callbacks.\n */\nexport class WebSocketConnection implements Transport {\n  keepaliveTimer: number | null = null;\n  frames: string[] | null = null;\n  totalFrames = 0;\n  bytesSent = 0;\n  bytesReceived = 0;\n  connURL: string;\n  onDisconnect: (a?: boolean) => void;\n  onMessage: (msg: {}) => void;\n  mySock: WebSocket | null;\n  private log_: (...a: unknown[]) => void;\n  private stats_: StatsCollection;\n  private everConnected_: boolean;\n  private isClosed_: boolean;\n  private nodeAdmin: boolean;\n\n  /**\n   * @param connId identifier for this transport\n   * @param repoInfo The info for the websocket endpoint.\n   * @param applicationId The Firebase App ID for this project.\n   * @param appCheckToken The App Check Token for this client.\n   * @param authToken The Auth Token for this client.\n   * @param transportSessionId Optional transportSessionId if this is connecting\n   * to an existing transport session\n   * @param lastSessionId Optional lastSessionId if there was a previous\n   * connection\n   */\n  constructor(\n    public connId: string,\n    repoInfo: RepoInfo,\n    private applicationId?: string,\n    private appCheckToken?: string,\n    private authToken?: string,\n    transportSessionId?: string,\n    lastSessionId?: string\n  ) {\n    this.log_ = logWrapper(this.connId);\n    this.stats_ = statsManagerGetCollection(repoInfo);\n    this.connURL = WebSocketConnection.connectionURL_(\n      repoInfo,\n      transportSessionId,\n      lastSessionId,\n      appCheckToken,\n      applicationId\n    );\n    this.nodeAdmin = repoInfo.nodeAdmin;\n  }\n\n  /**\n   * @param repoInfo - The info for the websocket endpoint.\n   * @param transportSessionId - Optional transportSessionId if this is connecting to an existing transport\n   *                                         session\n   * @param lastSessionId - Optional lastSessionId if there was a previous connection\n   * @returns connection url\n   */\n  private static connectionURL_(\n    repoInfo: RepoInfo,\n    transportSessionId?: string,\n    lastSessionId?: string,\n    appCheckToken?: string,\n    applicationId?: string\n  ): string {\n    const urlParams: { [k: string]: string } = {};\n    urlParams[VERSION_PARAM] = PROTOCOL_VERSION;\n\n    if (\n      !isNodeSdk() &&\n      typeof location !== 'undefined' &&\n      location.hostname &&\n      FORGE_DOMAIN_RE.test(location.hostname)\n    ) {\n      urlParams[REFERER_PARAM] = FORGE_REF;\n    }\n    if (transportSessionId) {\n      urlParams[TRANSPORT_SESSION_PARAM] = transportSessionId;\n    }\n    if (lastSessionId) {\n      urlParams[LAST_SESSION_PARAM] = lastSessionId;\n    }\n    if (appCheckToken) {\n      urlParams[APP_CHECK_TOKEN_PARAM] = appCheckToken;\n    }\n    if (applicationId) {\n      urlParams[APPLICATION_ID_PARAM] = applicationId;\n    }\n\n    return repoInfoConnectionURL(repoInfo, WEBSOCKET, urlParams);\n  }\n\n  /**\n   * @param onMessage - Callback when messages arrive\n   * @param onDisconnect - Callback with connection lost.\n   */\n  open(onMessage: (msg: {}) => void, onDisconnect: (a?: boolean) => void) {\n    this.onDisconnect = onDisconnect;\n    this.onMessage = onMessage;\n\n    this.log_('Websocket connecting to ' + this.connURL);\n\n    this.everConnected_ = false;\n    // Assume failure until proven otherwise.\n    PersistentStorage.set('previous_websocket_failure', true);\n\n    try {\n      let options: { [k: string]: object };\n      if (isNodeSdk()) {\n        const device = this.nodeAdmin ? 'AdminNode' : 'Node';\n        // UA Format: Firebase/<wire_protocol>/<sdk_version>/<platform>/<device>\n        options = {\n          headers: {\n            'User-Agent': `Firebase/${PROTOCOL_VERSION}/${SDK_VERSION}/${process.platform}/${device}`,\n            'X-Firebase-GMPID': this.applicationId || ''\n          }\n        };\n\n        // If using Node with admin creds, AppCheck-related checks are unnecessary.\n        // Note that we send the credentials here even if they aren't admin credentials, which is\n        // not a problem.\n        // Note that this header is just used to bypass appcheck, and the token should still be sent\n        // through the websocket connection once it is established.\n        if (this.authToken) {\n          options.headers['Authorization'] = `Bearer ${this.authToken}`;\n        }\n        if (this.appCheckToken) {\n          options.headers['X-Firebase-AppCheck'] = this.appCheckToken;\n        }\n\n        // Plumb appropriate http_proxy environment variable into faye-websocket if it exists.\n        const env = process['env'];\n        const proxy =\n          this.connURL.indexOf('wss://') === 0\n            ? env['HTTPS_PROXY'] || env['https_proxy']\n            : env['HTTP_PROXY'] || env['http_proxy'];\n\n        if (proxy) {\n          options['proxy'] = { origin: proxy };\n        }\n      }\n      this.mySock = new WebSocketImpl(this.connURL, [], options);\n    } catch (e) {\n      this.log_('Error instantiating WebSocket.');\n      const error = e.message || e.data;\n      if (error) {\n        this.log_(error);\n      }\n      this.onClosed_();\n      return;\n    }\n\n    this.mySock.onopen = () => {\n      this.log_('Websocket connected.');\n      this.everConnected_ = true;\n    };\n\n    this.mySock.onclose = () => {\n      this.log_('Websocket connection was disconnected.');\n      this.mySock = null;\n      this.onClosed_();\n    };\n\n    this.mySock.onmessage = m => {\n      this.handleIncomingFrame(m as {});\n    };\n\n    this.mySock.onerror = e => {\n      this.log_('WebSocket error.  Closing connection.');\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      const error = (e as any).message || (e as any).data;\n      if (error) {\n        this.log_(error);\n      }\n      this.onClosed_();\n    };\n  }\n\n  /**\n   * No-op for websockets, we don't need to do anything once the connection is confirmed as open\n   */\n  start() {}\n\n  static forceDisallow_: boolean;\n\n  static forceDisallow() {\n    WebSocketConnection.forceDisallow_ = true;\n  }\n\n  static isAvailable(): boolean {\n    let isOldAndroid = false;\n    if (typeof navigator !== 'undefined' && navigator.userAgent) {\n      const oldAndroidRegex = /Android ([0-9]{0,}\\.[0-9]{0,})/;\n      const oldAndroidMatch = navigator.userAgent.match(oldAndroidRegex);\n      if (oldAndroidMatch && oldAndroidMatch.length > 1) {\n        if (parseFloat(oldAndroidMatch[1]) < 4.4) {\n          isOldAndroid = true;\n        }\n      }\n    }\n\n    return (\n      !isOldAndroid &&\n      WebSocketImpl !== null &&\n      !WebSocketConnection.forceDisallow_\n    );\n  }\n\n  /**\n   * Number of response before we consider the connection \"healthy.\"\n   */\n  static responsesRequiredToBeHealthy = 2;\n\n  /**\n   * Time to wait for the connection te become healthy before giving up.\n   */\n  static healthyTimeout = 30000;\n\n  /**\n   * Returns true if we previously failed to connect with this transport.\n   */\n  static previouslyFailed(): boolean {\n    // If our persistent storage is actually only in-memory storage,\n    // we default to assuming that it previously failed to be safe.\n    return (\n      PersistentStorage.isInMemoryStorage ||\n      PersistentStorage.get('previous_websocket_failure') === true\n    );\n  }\n\n  markConnectionHealthy() {\n    PersistentStorage.remove('previous_websocket_failure');\n  }\n\n  private appendFrame_(data: string) {\n    this.frames.push(data);\n    if (this.frames.length === this.totalFrames) {\n      const fullMess = this.frames.join('');\n      this.frames = null;\n      const jsonMess = jsonEval(fullMess) as object;\n\n      //handle the message\n      this.onMessage(jsonMess);\n    }\n  }\n\n  /**\n   * @param frameCount - The number of frames we are expecting from the server\n   */\n  private handleNewFrameCount_(frameCount: number) {\n    this.totalFrames = frameCount;\n    this.frames = [];\n  }\n\n  /**\n   * Attempts to parse a frame count out of some text. If it can't, assumes a value of 1\n   * @returns Any remaining data to be process, or null if there is none\n   */\n  private extractFrameCount_(data: string): string | null {\n    assert(this.frames === null, 'We already have a frame buffer');\n    // TODO: The server is only supposed to send up to 9999 frames (i.e. length <= 4), but that isn't being enforced\n    // currently.  So allowing larger frame counts (length <= 6).  See https://app.asana.com/0/search/8688598998380/8237608042508\n    if (data.length <= 6) {\n      const frameCount = Number(data);\n      if (!isNaN(frameCount)) {\n        this.handleNewFrameCount_(frameCount);\n        return null;\n      }\n    }\n    this.handleNewFrameCount_(1);\n    return data;\n  }\n\n  /**\n   * Process a websocket frame that has arrived from the server.\n   * @param mess - The frame data\n   */\n  handleIncomingFrame(mess: { [k: string]: unknown }) {\n    if (this.mySock === null) {\n      return; // Chrome apparently delivers incoming packets even after we .close() the connection sometimes.\n    }\n    const data = mess['data'] as string;\n    this.bytesReceived += data.length;\n    this.stats_.incrementCounter('bytes_received', data.length);\n\n    this.resetKeepAlive();\n\n    if (this.frames !== null) {\n      // we're buffering\n      this.appendFrame_(data);\n    } else {\n      // try to parse out a frame count, otherwise, assume 1 and process it\n      const remainingData = this.extractFrameCount_(data);\n      if (remainingData !== null) {\n        this.appendFrame_(remainingData);\n      }\n    }\n  }\n\n  /**\n   * Send a message to the server\n   * @param data - The JSON object to transmit\n   */\n  send(data: {}) {\n    this.resetKeepAlive();\n\n    const dataStr = stringify(data);\n    this.bytesSent += dataStr.length;\n    this.stats_.incrementCounter('bytes_sent', dataStr.length);\n\n    //We can only fit a certain amount in each websocket frame, so we need to split this request\n    //up into multiple pieces if it doesn't fit in one request.\n\n    const dataSegs = splitStringBySize(dataStr, WEBSOCKET_MAX_FRAME_SIZE);\n\n    //Send the length header\n    if (dataSegs.length > 1) {\n      this.sendString_(String(dataSegs.length));\n    }\n\n    //Send the actual data in segments.\n    for (let i = 0; i < dataSegs.length; i++) {\n      this.sendString_(dataSegs[i]);\n    }\n  }\n\n  private shutdown_() {\n    this.isClosed_ = true;\n    if (this.keepaliveTimer) {\n      clearInterval(this.keepaliveTimer);\n      this.keepaliveTimer = null;\n    }\n\n    if (this.mySock) {\n      this.mySock.close();\n      this.mySock = null;\n    }\n  }\n\n  private onClosed_() {\n    if (!this.isClosed_) {\n      this.log_('WebSocket is closing itself');\n      this.shutdown_();\n\n      // since this is an internal close, trigger the close listener\n      if (this.onDisconnect) {\n        this.onDisconnect(this.everConnected_);\n        this.onDisconnect = null;\n      }\n    }\n  }\n\n  /**\n   * External-facing close handler.\n   * Close the websocket and kill the connection.\n   */\n  close() {\n    if (!this.isClosed_) {\n      this.log_('WebSocket is being closed');\n      this.shutdown_();\n    }\n  }\n\n  /**\n   * Kill the current keepalive timer and start a new one, to ensure that it always fires N seconds after\n   * the last activity.\n   */\n  resetKeepAlive() {\n    clearInterval(this.keepaliveTimer);\n    this.keepaliveTimer = setInterval(() => {\n      //If there has been no websocket activity for a while, send a no-op\n      if (this.mySock) {\n        this.sendString_('0');\n      }\n      this.resetKeepAlive();\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    }, Math.floor(WEBSOCKET_KEEPALIVE_INTERVAL)) as any;\n  }\n\n  /**\n   * Send a string over the websocket.\n   *\n   * @param str - String to send.\n   */\n  private sendString_(str: string) {\n    // Firefox seems to sometimes throw exceptions (NS_ERROR_UNEXPECTED) from websocket .send()\n    // calls for some unknown reason.  We treat these as an error and disconnect.\n    // See https://app.asana.com/0/58926111402292/68021340250410\n    try {\n      this.mySock.send(str);\n    } catch (e) {\n      this.log_(\n        'Exception thrown from WebSocket.send():',\n        e.message || e.data,\n        'Closing connection.'\n      );\n      setTimeout(this.onClosed_.bind(this), 0);\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { RepoInfo } from '../core/RepoInfo';\nimport { warn } from '../core/util/util';\n\nimport { BrowserPollConnection } from './BrowserPollConnection';\nimport { TransportConstructor } from './Transport';\nimport { WebSocketConnection } from './WebSocketConnection';\n\n/**\n * Currently simplistic, this class manages what transport a Connection should use at various stages of its\n * lifecycle.\n *\n * It starts with longpolling in a browser, and httppolling on node. It then upgrades to websockets if\n * they are available.\n */\nexport class TransportManager {\n  private transports_: TransportConstructor[];\n\n  // Keeps track of whether the TransportManager has already chosen a transport to use\n  static globalTransportInitialized_ = false;\n\n  static get ALL_TRANSPORTS() {\n    return [BrowserPollConnection, WebSocketConnection];\n  }\n\n  /**\n   * Returns whether transport has been selected to ensure WebSocketConnection or BrowserPollConnection are not called after\n   * TransportManager has already set up transports_\n   */\n  static get IS_TRANSPORT_INITIALIZED() {\n    return this.globalTransportInitialized_;\n  }\n\n  /**\n   * @param repoInfo - Metadata around the namespace we're connecting to\n   */\n  constructor(repoInfo: RepoInfo) {\n    this.initTransports_(repoInfo);\n  }\n\n  private initTransports_(repoInfo: RepoInfo) {\n    const isWebSocketsAvailable: boolean =\n      WebSocketConnection && WebSocketConnection['isAvailable']();\n    let isSkipPollConnection =\n      isWebSocketsAvailable && !WebSocketConnection.previouslyFailed();\n\n    if (repoInfo.webSocketOnly) {\n      if (!isWebSocketsAvailable) {\n        warn(\n          \"wss:// URL used, but browser isn't known to support websockets.  Trying anyway.\"\n        );\n      }\n\n      isSkipPollConnection = true;\n    }\n\n    if (isSkipPollConnection) {\n      this.transports_ = [WebSocketConnection];\n    } else {\n      const transports = (this.transports_ = [] as TransportConstructor[]);\n      for (const transport of TransportManager.ALL_TRANSPORTS) {\n        if (transport && transport['isAvailable']()) {\n          transports.push(transport);\n        }\n      }\n      TransportManager.globalTransportInitialized_ = true;\n    }\n  }\n\n  /**\n   * @returns The constructor for the initial transport to use\n   */\n  initialTransport(): TransportConstructor {\n    if (this.transports_.length > 0) {\n      return this.transports_[0];\n    } else {\n      throw new Error('No transports available');\n    }\n  }\n\n  /**\n   * @returns The constructor for the next transport, or null\n   */\n  upgradeTransport(): TransportConstructor | null {\n    if (this.transports_.length > 1) {\n      return this.transports_[1];\n    } else {\n      return null;\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { RepoInfo } from '../core/RepoInfo';\nimport { PersistentStorage } from '../core/storage/storage';\nimport { Indexable } from '../core/util/misc';\nimport {\n  error,\n  logWrapper,\n  requireKey,\n  setTimeoutNonBlocking,\n  warn\n} from '../core/util/util';\n\nimport { PROTOCOL_VERSION } from './Constants';\nimport { Transport, TransportConstructor } from './Transport';\nimport { TransportManager } from './TransportManager';\n\n// Abort upgrade attempt if it takes longer than 60s.\nconst UPGRADE_TIMEOUT = 60000;\n\n// For some transports (WebSockets), we need to \"validate\" the transport by exchanging a few requests and responses.\n// If we haven't sent enough requests within 5s, we'll start sending noop ping requests.\nconst DELAY_BEFORE_SENDING_EXTRA_REQUESTS = 5000;\n\n// If the initial data sent triggers a lot of bandwidth (i.e. it's a large put or a listen for a large amount of data)\n// then we may not be able to exchange our ping/pong requests within the healthy timeout.  So if we reach the timeout\n// but we've sent/received enough bytes, we don't cancel the connection.\nconst BYTES_SENT_HEALTHY_OVERRIDE = 10 * 1024;\nconst BYTES_RECEIVED_HEALTHY_OVERRIDE = 100 * 1024;\n\nconst enum RealtimeState {\n  CONNECTING,\n  CONNECTED,\n  DISCONNECTED\n}\n\nconst MESSAGE_TYPE = 't';\nconst MESSAGE_DATA = 'd';\nconst CONTROL_SHUTDOWN = 's';\nconst CONTROL_RESET = 'r';\nconst CONTROL_ERROR = 'e';\nconst CONTROL_PONG = 'o';\nconst SWITCH_ACK = 'a';\nconst END_TRANSMISSION = 'n';\nconst PING = 'p';\n\nconst SERVER_HELLO = 'h';\n\n/**\n * Creates a new real-time connection to the server using whichever method works\n * best in the current browser.\n */\nexport class Connection {\n  connectionCount = 0;\n  pendingDataMessages: unknown[] = [];\n  sessionId: string;\n\n  private conn_: Transport;\n  private healthyTimeout_: number;\n  private isHealthy_: boolean;\n  private log_: (...args: unknown[]) => void;\n  private primaryResponsesRequired_: number;\n  private rx_: Transport;\n  private secondaryConn_: Transport;\n  private secondaryResponsesRequired_: number;\n  private state_ = RealtimeState.CONNECTING;\n  private transportManager_: TransportManager;\n  private tx_: Transport;\n\n  /**\n   * @param id - an id for this connection\n   * @param repoInfo_ - the info for the endpoint to connect to\n   * @param applicationId_ - the Firebase App ID for this project\n   * @param appCheckToken_ - The App Check Token for this device.\n   * @param authToken_ - The auth token for this session.\n   * @param onMessage_ - the callback to be triggered when a server-push message arrives\n   * @param onReady_ - the callback to be triggered when this connection is ready to send messages.\n   * @param onDisconnect_ - the callback to be triggered when a connection was lost\n   * @param onKill_ - the callback to be triggered when this connection has permanently shut down.\n   * @param lastSessionId - last session id in persistent connection. is used to clean up old session in real-time server\n   */\n  constructor(\n    public id: string,\n    private repoInfo_: RepoInfo,\n    private applicationId_: string | undefined,\n    private appCheckToken_: string | undefined,\n    private authToken_: string | undefined,\n    private onMessage_: (a: {}) => void,\n    private onReady_: (a: number, b: string) => void,\n    private onDisconnect_: () => void,\n    private onKill_: (a: string) => void,\n    public lastSessionId?: string\n  ) {\n    this.log_ = logWrapper('c:' + this.id + ':');\n    this.transportManager_ = new TransportManager(repoInfo_);\n    this.log_('Connection created');\n    this.start_();\n  }\n\n  /**\n   * Starts a connection attempt\n   */\n  private start_(): void {\n    const conn = this.transportManager_.initialTransport();\n    this.conn_ = new conn(\n      this.nextTransportId_(),\n      this.repoInfo_,\n      this.applicationId_,\n      this.appCheckToken_,\n      this.authToken_,\n      null,\n      this.lastSessionId\n    );\n\n    // For certain transports (WebSockets), we need to send and receive several messages back and forth before we\n    // can consider the transport healthy.\n    this.primaryResponsesRequired_ = conn['responsesRequiredToBeHealthy'] || 0;\n\n    const onMessageReceived = this.connReceiver_(this.conn_);\n    const onConnectionLost = this.disconnReceiver_(this.conn_);\n    this.tx_ = this.conn_;\n    this.rx_ = this.conn_;\n    this.secondaryConn_ = null;\n    this.isHealthy_ = false;\n\n    /*\n     * Firefox doesn't like when code from one iframe tries to create another iframe by way of the parent frame.\n     * This can occur in the case of a redirect, i.e. we guessed wrong on what server to connect to and received a reset.\n     * Somehow, setTimeout seems to make this ok. That doesn't make sense from a security perspective, since you should\n     * still have the context of your originating frame.\n     */\n    setTimeout(() => {\n      // this.conn_ gets set to null in some of the tests. Check to make sure it still exists before using it\n      this.conn_ && this.conn_.open(onMessageReceived, onConnectionLost);\n    }, Math.floor(0));\n\n    const healthyTimeoutMS = conn['healthyTimeout'] || 0;\n    if (healthyTimeoutMS > 0) {\n      this.healthyTimeout_ = setTimeoutNonBlocking(() => {\n        this.healthyTimeout_ = null;\n        if (!this.isHealthy_) {\n          if (\n            this.conn_ &&\n            this.conn_.bytesReceived > BYTES_RECEIVED_HEALTHY_OVERRIDE\n          ) {\n            this.log_(\n              'Connection exceeded healthy timeout but has received ' +\n                this.conn_.bytesReceived +\n                ' bytes.  Marking connection healthy.'\n            );\n            this.isHealthy_ = true;\n            this.conn_.markConnectionHealthy();\n          } else if (\n            this.conn_ &&\n            this.conn_.bytesSent > BYTES_SENT_HEALTHY_OVERRIDE\n          ) {\n            this.log_(\n              'Connection exceeded healthy timeout but has sent ' +\n                this.conn_.bytesSent +\n                ' bytes.  Leaving connection alive.'\n            );\n            // NOTE: We don't want to mark it healthy, since we have no guarantee that the bytes have made it to\n            // the server.\n          } else {\n            this.log_('Closing unhealthy connection after timeout.');\n            this.close();\n          }\n        }\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      }, Math.floor(healthyTimeoutMS)) as any;\n    }\n  }\n\n  private nextTransportId_(): string {\n    return 'c:' + this.id + ':' + this.connectionCount++;\n  }\n\n  private disconnReceiver_(conn) {\n    return everConnected => {\n      if (conn === this.conn_) {\n        this.onConnectionLost_(everConnected);\n      } else if (conn === this.secondaryConn_) {\n        this.log_('Secondary connection lost.');\n        this.onSecondaryConnectionLost_();\n      } else {\n        this.log_('closing an old connection');\n      }\n    };\n  }\n\n  private connReceiver_(conn: Transport) {\n    return (message: Indexable) => {\n      if (this.state_ !== RealtimeState.DISCONNECTED) {\n        if (conn === this.rx_) {\n          this.onPrimaryMessageReceived_(message);\n        } else if (conn === this.secondaryConn_) {\n          this.onSecondaryMessageReceived_(message);\n        } else {\n          this.log_('message on old connection');\n        }\n      }\n    };\n  }\n\n  /**\n   * @param dataMsg - An arbitrary data message to be sent to the server\n   */\n  sendRequest(dataMsg: object) {\n    // wrap in a data message envelope and send it on\n    const msg = { t: 'd', d: dataMsg };\n    this.sendData_(msg);\n  }\n\n  tryCleanupConnection() {\n    if (this.tx_ === this.secondaryConn_ && this.rx_ === this.secondaryConn_) {\n      this.log_(\n        'cleaning up and promoting a connection: ' + this.secondaryConn_.connId\n      );\n      this.conn_ = this.secondaryConn_;\n      this.secondaryConn_ = null;\n      // the server will shutdown the old connection\n    }\n  }\n\n  private onSecondaryControl_(controlData: { [k: string]: unknown }) {\n    if (MESSAGE_TYPE in controlData) {\n      const cmd = controlData[MESSAGE_TYPE] as string;\n      if (cmd === SWITCH_ACK) {\n        this.upgradeIfSecondaryHealthy_();\n      } else if (cmd === CONTROL_RESET) {\n        // Most likely the session wasn't valid. Abandon the switch attempt\n        this.log_('Got a reset on secondary, closing it');\n        this.secondaryConn_.close();\n        // If we were already using this connection for something, than we need to fully close\n        if (\n          this.tx_ === this.secondaryConn_ ||\n          this.rx_ === this.secondaryConn_\n        ) {\n          this.close();\n        }\n      } else if (cmd === CONTROL_PONG) {\n        this.log_('got pong on secondary.');\n        this.secondaryResponsesRequired_--;\n        this.upgradeIfSecondaryHealthy_();\n      }\n    }\n  }\n\n  private onSecondaryMessageReceived_(parsedData: Indexable) {\n    const layer: string = requireKey('t', parsedData) as string;\n    const data: unknown = requireKey('d', parsedData);\n    if (layer === 'c') {\n      this.onSecondaryControl_(data as Indexable);\n    } else if (layer === 'd') {\n      // got a data message, but we're still second connection. Need to buffer it up\n      this.pendingDataMessages.push(data);\n    } else {\n      throw new Error('Unknown protocol layer: ' + layer);\n    }\n  }\n\n  private upgradeIfSecondaryHealthy_() {\n    if (this.secondaryResponsesRequired_ <= 0) {\n      this.log_('Secondary connection is healthy.');\n      this.isHealthy_ = true;\n      this.secondaryConn_.markConnectionHealthy();\n      this.proceedWithUpgrade_();\n    } else {\n      // Send a ping to make sure the connection is healthy.\n      this.log_('sending ping on secondary.');\n      this.secondaryConn_.send({ t: 'c', d: { t: PING, d: {} } });\n    }\n  }\n\n  private proceedWithUpgrade_() {\n    // tell this connection to consider itself open\n    this.secondaryConn_.start();\n    // send ack\n    this.log_('sending client ack on secondary');\n    this.secondaryConn_.send({ t: 'c', d: { t: SWITCH_ACK, d: {} } });\n\n    // send end packet on primary transport, switch to sending on this one\n    // can receive on this one, buffer responses until end received on primary transport\n    this.log_('Ending transmission on primary');\n    this.conn_.send({ t: 'c', d: { t: END_TRANSMISSION, d: {} } });\n    this.tx_ = this.secondaryConn_;\n\n    this.tryCleanupConnection();\n  }\n\n  private onPrimaryMessageReceived_(parsedData: { [k: string]: unknown }) {\n    // Must refer to parsedData properties in quotes, so closure doesn't touch them.\n    const layer: string = requireKey('t', parsedData) as string;\n    const data: unknown = requireKey('d', parsedData);\n    if (layer === 'c') {\n      this.onControl_(data as { [k: string]: unknown });\n    } else if (layer === 'd') {\n      this.onDataMessage_(data);\n    }\n  }\n\n  private onDataMessage_(message: unknown) {\n    this.onPrimaryResponse_();\n\n    // We don't do anything with data messages, just kick them up a level\n    this.onMessage_(message);\n  }\n\n  private onPrimaryResponse_() {\n    if (!this.isHealthy_) {\n      this.primaryResponsesRequired_--;\n      if (this.primaryResponsesRequired_ <= 0) {\n        this.log_('Primary connection is healthy.');\n        this.isHealthy_ = true;\n        this.conn_.markConnectionHealthy();\n      }\n    }\n  }\n\n  private onControl_(controlData: { [k: string]: unknown }) {\n    const cmd: string = requireKey(MESSAGE_TYPE, controlData) as string;\n    if (MESSAGE_DATA in controlData) {\n      const payload = controlData[MESSAGE_DATA];\n      if (cmd === SERVER_HELLO) {\n        this.onHandshake_(\n          payload as {\n            ts: number;\n            v: string;\n            h: string;\n            s: string;\n          }\n        );\n      } else if (cmd === END_TRANSMISSION) {\n        this.log_('recvd end transmission on primary');\n        this.rx_ = this.secondaryConn_;\n        for (let i = 0; i < this.pendingDataMessages.length; ++i) {\n          this.onDataMessage_(this.pendingDataMessages[i]);\n        }\n        this.pendingDataMessages = [];\n        this.tryCleanupConnection();\n      } else if (cmd === CONTROL_SHUTDOWN) {\n        // This was previously the 'onKill' callback passed to the lower-level connection\n        // payload in this case is the reason for the shutdown. Generally a human-readable error\n        this.onConnectionShutdown_(payload as string);\n      } else if (cmd === CONTROL_RESET) {\n        // payload in this case is the host we should contact\n        this.onReset_(payload as string);\n      } else if (cmd === CONTROL_ERROR) {\n        error('Server Error: ' + payload);\n      } else if (cmd === CONTROL_PONG) {\n        this.log_('got pong on primary.');\n        this.onPrimaryResponse_();\n        this.sendPingOnPrimaryIfNecessary_();\n      } else {\n        error('Unknown control packet command: ' + cmd);\n      }\n    }\n  }\n\n  /**\n   * @param handshake - The handshake data returned from the server\n   */\n  private onHandshake_(handshake: {\n    ts: number;\n    v: string;\n    h: string;\n    s: string;\n  }): void {\n    const timestamp = handshake.ts;\n    const version = handshake.v;\n    const host = handshake.h;\n    this.sessionId = handshake.s;\n    this.repoInfo_.host = host;\n    // if we've already closed the connection, then don't bother trying to progress further\n    if (this.state_ === RealtimeState.CONNECTING) {\n      this.conn_.start();\n      this.onConnectionEstablished_(this.conn_, timestamp);\n      if (PROTOCOL_VERSION !== version) {\n        warn('Protocol version mismatch detected');\n      }\n      // TODO: do we want to upgrade? when? maybe a delay?\n      this.tryStartUpgrade_();\n    }\n  }\n\n  private tryStartUpgrade_() {\n    const conn = this.transportManager_.upgradeTransport();\n    if (conn) {\n      this.startUpgrade_(conn);\n    }\n  }\n\n  private startUpgrade_(conn: TransportConstructor) {\n    this.secondaryConn_ = new conn(\n      this.nextTransportId_(),\n      this.repoInfo_,\n      this.applicationId_,\n      this.appCheckToken_,\n      this.authToken_,\n      this.sessionId\n    );\n    // For certain transports (WebSockets), we need to send and receive several messages back and forth before we\n    // can consider the transport healthy.\n    this.secondaryResponsesRequired_ =\n      conn['responsesRequiredToBeHealthy'] || 0;\n\n    const onMessage = this.connReceiver_(this.secondaryConn_);\n    const onDisconnect = this.disconnReceiver_(this.secondaryConn_);\n    this.secondaryConn_.open(onMessage, onDisconnect);\n\n    // If we haven't successfully upgraded after UPGRADE_TIMEOUT, give up and kill the secondary.\n    setTimeoutNonBlocking(() => {\n      if (this.secondaryConn_) {\n        this.log_('Timed out trying to upgrade.');\n        this.secondaryConn_.close();\n      }\n    }, Math.floor(UPGRADE_TIMEOUT));\n  }\n\n  private onReset_(host: string) {\n    this.log_('Reset packet received.  New host: ' + host);\n    this.repoInfo_.host = host;\n    // TODO: if we're already \"connected\", we need to trigger a disconnect at the next layer up.\n    // We don't currently support resets after the connection has already been established\n    if (this.state_ === RealtimeState.CONNECTED) {\n      this.close();\n    } else {\n      // Close whatever connections we have open and start again.\n      this.closeConnections_();\n      this.start_();\n    }\n  }\n\n  private onConnectionEstablished_(conn: Transport, timestamp: number) {\n    this.log_('Realtime connection established.');\n    this.conn_ = conn;\n    this.state_ = RealtimeState.CONNECTED;\n\n    if (this.onReady_) {\n      this.onReady_(timestamp, this.sessionId);\n      this.onReady_ = null;\n    }\n\n    // If after 5 seconds we haven't sent enough requests to the server to get the connection healthy,\n    // send some pings.\n    if (this.primaryResponsesRequired_ === 0) {\n      this.log_('Primary connection is healthy.');\n      this.isHealthy_ = true;\n    } else {\n      setTimeoutNonBlocking(() => {\n        this.sendPingOnPrimaryIfNecessary_();\n      }, Math.floor(DELAY_BEFORE_SENDING_EXTRA_REQUESTS));\n    }\n  }\n\n  private sendPingOnPrimaryIfNecessary_() {\n    // If the connection isn't considered healthy yet, we'll send a noop ping packet request.\n    if (!this.isHealthy_ && this.state_ === RealtimeState.CONNECTED) {\n      this.log_('sending ping on primary.');\n      this.sendData_({ t: 'c', d: { t: PING, d: {} } });\n    }\n  }\n\n  private onSecondaryConnectionLost_() {\n    const conn = this.secondaryConn_;\n    this.secondaryConn_ = null;\n    if (this.tx_ === conn || this.rx_ === conn) {\n      // we are relying on this connection already in some capacity. Therefore, a failure is real\n      this.close();\n    }\n  }\n\n  /**\n   * @param everConnected - Whether or not the connection ever reached a server. Used to determine if\n   * we should flush the host cache\n   */\n  private onConnectionLost_(everConnected: boolean) {\n    this.conn_ = null;\n\n    // NOTE: IF you're seeing a Firefox error for this line, I think it might be because it's getting\n    // called on window close and RealtimeState.CONNECTING is no longer defined.  Just a guess.\n    if (!everConnected && this.state_ === RealtimeState.CONNECTING) {\n      this.log_('Realtime connection failed.');\n      // Since we failed to connect at all, clear any cached entry for this namespace in case the machine went away\n      if (this.repoInfo_.isCacheableHost()) {\n        PersistentStorage.remove('host:' + this.repoInfo_.host);\n        // reset the internal host to what we would show the user, i.e. <ns>.firebaseio.com\n        this.repoInfo_.internalHost = this.repoInfo_.host;\n      }\n    } else if (this.state_ === RealtimeState.CONNECTED) {\n      this.log_('Realtime connection lost.');\n    }\n\n    this.close();\n  }\n\n  private onConnectionShutdown_(reason: string) {\n    this.log_('Connection shutdown command received. Shutting down...');\n\n    if (this.onKill_) {\n      this.onKill_(reason);\n      this.onKill_ = null;\n    }\n\n    // We intentionally don't want to fire onDisconnect (kill is a different case),\n    // so clear the callback.\n    this.onDisconnect_ = null;\n\n    this.close();\n  }\n\n  private sendData_(data: object) {\n    if (this.state_ !== RealtimeState.CONNECTED) {\n      throw 'Connection is not connected';\n    } else {\n      this.tx_.send(data);\n    }\n  }\n\n  /**\n   * Cleans up this connection, calling the appropriate callbacks\n   */\n  close() {\n    if (this.state_ !== RealtimeState.DISCONNECTED) {\n      this.log_('Closing realtime connection.');\n      this.state_ = RealtimeState.DISCONNECTED;\n\n      this.closeConnections_();\n\n      if (this.onDisconnect_) {\n        this.onDisconnect_();\n        this.onDisconnect_ = null;\n      }\n    }\n  }\n\n  private closeConnections_() {\n    this.log_('Shutting down all connections');\n    if (this.conn_) {\n      this.conn_.close();\n      this.conn_ = null;\n    }\n\n    if (this.secondaryConn_) {\n      this.secondaryConn_.close();\n      this.secondaryConn_ = null;\n    }\n\n    if (this.healthyTimeout_) {\n      clearTimeout(this.healthyTimeout_);\n      this.healthyTimeout_ = null;\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { QueryContext } from './view/EventRegistration';\n\n/**\n * Interface defining the set of actions that can be performed against the Firebase server\n * (basically corresponds to our wire protocol).\n *\n * @interface\n */\nexport abstract class ServerActions {\n  abstract listen(\n    query: QueryContext,\n    currentHashFn: () => string,\n    tag: number | null,\n    onComplete: (a: string, b: unknown) => void\n  ): void;\n\n  /**\n   * Remove a listen.\n   */\n  abstract unlisten(query: QueryContext, tag: number | null): void;\n\n  /**\n   * Get the server value satisfying this query.\n   */\n  abstract get(query: QueryContext): Promise<string>;\n\n  put(\n    pathString: string,\n    data: unknown,\n    onComplete?: (a: string, b: string) => void,\n    hash?: string\n  ) {}\n\n  merge(\n    pathString: string,\n    data: unknown,\n    onComplete: (a: string, b: string | null) => void,\n    hash?: string\n  ) {}\n\n  /**\n   * Refreshes the auth token for the current connection.\n   * @param token - The authentication token\n   */\n  refreshAuthToken(token: string) {}\n\n  /**\n   * Refreshes the app check token for the current connection.\n   * @param token The app check token\n   */\n  refreshAppCheckToken(token: string) {}\n\n  onDisconnectPut(\n    pathString: string,\n    data: unknown,\n    onComplete?: (a: string, b: string) => void\n  ) {}\n\n  onDisconnectMerge(\n    pathString: string,\n    data: unknown,\n    onComplete?: (a: string, b: string) => void\n  ) {}\n\n  onDisconnectCancel(\n    pathString: string,\n    onComplete?: (a: string, b: string) => void\n  ) {}\n\n  reportStats(stats: { [k: string]: unknown }) {}\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\n/**\n * Base class to be used if you want to emit events. Call the constructor with\n * the set of allowed event names.\n */\nexport abstract class EventEmitter {\n  private listeners_: {\n    [eventType: string]: Array<{\n      callback(...args: unknown[]): void;\n      context: unknown;\n    }>;\n  } = {};\n\n  constructor(private allowedEvents_: string[]) {\n    assert(\n      Array.isArray(allowedEvents_) && allowedEvents_.length > 0,\n      'Requires a non-empty array'\n    );\n  }\n\n  /**\n   * To be overridden by derived classes in order to fire an initial event when\n   * somebody subscribes for data.\n   *\n   * @returns {Array.<*>} Array of parameters to trigger initial event with.\n   */\n  abstract getInitialEvent(eventType: string): unknown[];\n\n  /**\n   * To be called by derived classes to trigger events.\n   */\n  protected trigger(eventType: string, ...varArgs: unknown[]) {\n    if (Array.isArray(this.listeners_[eventType])) {\n      // Clone the list, since callbacks could add/remove listeners.\n      const listeners = [...this.listeners_[eventType]];\n\n      for (let i = 0; i < listeners.length; i++) {\n        listeners[i].callback.apply(listeners[i].context, varArgs);\n      }\n    }\n  }\n\n  on(eventType: string, callback: (a: unknown) => void, context: unknown) {\n    this.validateEventType_(eventType);\n    this.listeners_[eventType] = this.listeners_[eventType] || [];\n    this.listeners_[eventType].push({ callback, context });\n\n    const eventData = this.getInitialEvent(eventType);\n    if (eventData) {\n      callback.apply(context, eventData);\n    }\n  }\n\n  off(eventType: string, callback: (a: unknown) => void, context: unknown) {\n    this.validateEventType_(eventType);\n    const listeners = this.listeners_[eventType] || [];\n    for (let i = 0; i < listeners.length; i++) {\n      if (\n        listeners[i].callback === callback &&\n        (!context || context === listeners[i].context)\n      ) {\n        listeners.splice(i, 1);\n        return;\n      }\n    }\n  }\n\n  private validateEventType_(eventType: string) {\n    assert(\n      this.allowedEvents_.find(et => {\n        return et === eventType;\n      }),\n      'Unknown event: ' + eventType\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, isMobileCordova } from '@firebase/util';\n\nimport { EventEmitter } from './EventEmitter';\n\n/**\n * Monitors online state (as reported by window.online/offline events).\n *\n * The expectation is that this could have many false positives (thinks we are online\n * when we're not), but no false negatives.  So we can safely use it to determine when\n * we definitely cannot reach the internet.\n */\nexport class OnlineMonitor extends EventEmitter {\n  private online_ = true;\n\n  static getInstance() {\n    return new OnlineMonitor();\n  }\n\n  constructor() {\n    super(['online']);\n\n    // We've had repeated complaints that Cordova apps can get stuck \"offline\", e.g.\n    // https://forum.ionicframework.com/t/firebase-connection-is-lost-and-never-come-back/43810\n    // It would seem that the 'online' event does not always fire consistently. So we disable it\n    // for Cordova.\n    if (\n      typeof window !== 'undefined' &&\n      typeof window.addEventListener !== 'undefined' &&\n      !isMobileCordova()\n    ) {\n      window.addEventListener(\n        'online',\n        () => {\n          if (!this.online_) {\n            this.online_ = true;\n            this.trigger('online', true);\n          }\n        },\n        false\n      );\n\n      window.addEventListener(\n        'offline',\n        () => {\n          if (this.online_) {\n            this.online_ = false;\n            this.trigger('online', false);\n          }\n        },\n        false\n      );\n    }\n  }\n\n  getInitialEvent(eventType: string): boolean[] {\n    assert(eventType === 'online', 'Unknown event type: ' + eventType);\n    return [this.online_];\n  }\n\n  currentlyOnline(): boolean {\n    return this.online_;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { stringLength } from '@firebase/util';\n\nimport { nameCompare } from './util';\n\n/** Maximum key depth. */\nconst MAX_PATH_DEPTH = 32;\n\n/** Maximum number of (UTF8) bytes in a Firebase path. */\nconst MAX_PATH_LENGTH_BYTES = 768;\n\n/**\n * An immutable object representing a parsed path.  It's immutable so that you\n * can pass them around to other functions without worrying about them changing\n * it.\n */\n\nexport class Path {\n  pieces_: string[];\n  pieceNum_: number;\n\n  /**\n   * @param pathOrString - Path string to parse, or another path, or the raw\n   * tokens array\n   */\n  constructor(pathOrString: string | string[], pieceNum?: number) {\n    if (pieceNum === void 0) {\n      this.pieces_ = (pathOrString as string).split('/');\n\n      // Remove empty pieces.\n      let copyTo = 0;\n      for (let i = 0; i < this.pieces_.length; i++) {\n        if (this.pieces_[i].length > 0) {\n          this.pieces_[copyTo] = this.pieces_[i];\n          copyTo++;\n        }\n      }\n      this.pieces_.length = copyTo;\n\n      this.pieceNum_ = 0;\n    } else {\n      this.pieces_ = pathOrString as string[];\n      this.pieceNum_ = pieceNum;\n    }\n  }\n\n  toString(): string {\n    let pathString = '';\n    for (let i = this.pieceNum_; i < this.pieces_.length; i++) {\n      if (this.pieces_[i] !== '') {\n        pathString += '/' + this.pieces_[i];\n      }\n    }\n\n    return pathString || '/';\n  }\n}\n\nexport function newEmptyPath(): Path {\n  return new Path('');\n}\n\nexport function pathGetFront(path: Path): string | null {\n  if (path.pieceNum_ >= path.pieces_.length) {\n    return null;\n  }\n\n  return path.pieces_[path.pieceNum_];\n}\n\n/**\n * @returns The number of segments in this path\n */\nexport function pathGetLength(path: Path): number {\n  return path.pieces_.length - path.pieceNum_;\n}\n\nexport function pathPopFront(path: Path): Path {\n  let pieceNum = path.pieceNum_;\n  if (pieceNum < path.pieces_.length) {\n    pieceNum++;\n  }\n  return new Path(path.pieces_, pieceNum);\n}\n\nexport function pathGetBack(path: Path): string | null {\n  if (path.pieceNum_ < path.pieces_.length) {\n    return path.pieces_[path.pieces_.length - 1];\n  }\n\n  return null;\n}\n\nexport function pathToUrlEncodedString(path: Path): string {\n  let pathString = '';\n  for (let i = path.pieceNum_; i < path.pieces_.length; i++) {\n    if (path.pieces_[i] !== '') {\n      pathString += '/' + encodeURIComponent(String(path.pieces_[i]));\n    }\n  }\n\n  return pathString || '/';\n}\n\n/**\n * Shallow copy of the parts of the path.\n *\n */\nexport function pathSlice(path: Path, begin: number = 0): string[] {\n  return path.pieces_.slice(path.pieceNum_ + begin);\n}\n\nexport function pathParent(path: Path): Path | null {\n  if (path.pieceNum_ >= path.pieces_.length) {\n    return null;\n  }\n\n  const pieces = [];\n  for (let i = path.pieceNum_; i < path.pieces_.length - 1; i++) {\n    pieces.push(path.pieces_[i]);\n  }\n\n  return new Path(pieces, 0);\n}\n\nexport function pathChild(path: Path, childPathObj: string | Path): Path {\n  const pieces = [];\n  for (let i = path.pieceNum_; i < path.pieces_.length; i++) {\n    pieces.push(path.pieces_[i]);\n  }\n\n  if (childPathObj instanceof Path) {\n    for (let i = childPathObj.pieceNum_; i < childPathObj.pieces_.length; i++) {\n      pieces.push(childPathObj.pieces_[i]);\n    }\n  } else {\n    const childPieces = childPathObj.split('/');\n    for (let i = 0; i < childPieces.length; i++) {\n      if (childPieces[i].length > 0) {\n        pieces.push(childPieces[i]);\n      }\n    }\n  }\n\n  return new Path(pieces, 0);\n}\n\n/**\n * @returns True if there are no segments in this path\n */\nexport function pathIsEmpty(path: Path): boolean {\n  return path.pieceNum_ >= path.pieces_.length;\n}\n\n/**\n * @returns The path from outerPath to innerPath\n */\nexport function newRelativePath(outerPath: Path, innerPath: Path): Path {\n  const outer = pathGetFront(outerPath),\n    inner = pathGetFront(innerPath);\n  if (outer === null) {\n    return innerPath;\n  } else if (outer === inner) {\n    return newRelativePath(pathPopFront(outerPath), pathPopFront(innerPath));\n  } else {\n    throw new Error(\n      'INTERNAL ERROR: innerPath (' +\n        innerPath +\n        ') is not within ' +\n        'outerPath (' +\n        outerPath +\n        ')'\n    );\n  }\n}\n\n/**\n * @returns -1, 0, 1 if left is less, equal, or greater than the right.\n */\nexport function pathCompare(left: Path, right: Path): number {\n  const leftKeys = pathSlice(left, 0);\n  const rightKeys = pathSlice(right, 0);\n  for (let i = 0; i < leftKeys.length && i < rightKeys.length; i++) {\n    const cmp = nameCompare(leftKeys[i], rightKeys[i]);\n    if (cmp !== 0) {\n      return cmp;\n    }\n  }\n  if (leftKeys.length === rightKeys.length) {\n    return 0;\n  }\n  return leftKeys.length < rightKeys.length ? -1 : 1;\n}\n\n/**\n * @returns true if paths are the same.\n */\nexport function pathEquals(path: Path, other: Path): boolean {\n  if (pathGetLength(path) !== pathGetLength(other)) {\n    return false;\n  }\n\n  for (\n    let i = path.pieceNum_, j = other.pieceNum_;\n    i <= path.pieces_.length;\n    i++, j++\n  ) {\n    if (path.pieces_[i] !== other.pieces_[j]) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\n/**\n * @returns True if this path is a parent of (or the same as) other\n */\nexport function pathContains(path: Path, other: Path): boolean {\n  let i = path.pieceNum_;\n  let j = other.pieceNum_;\n  if (pathGetLength(path) > pathGetLength(other)) {\n    return false;\n  }\n  while (i < path.pieces_.length) {\n    if (path.pieces_[i] !== other.pieces_[j]) {\n      return false;\n    }\n    ++i;\n    ++j;\n  }\n  return true;\n}\n\n/**\n * Dynamic (mutable) path used to count path lengths.\n *\n * This class is used to efficiently check paths for valid\n * length (in UTF8 bytes) and depth (used in path validation).\n *\n * Throws Error exception if path is ever invalid.\n *\n * The definition of a path always begins with '/'.\n */\nexport class ValidationPath {\n  parts_: string[];\n  /** Initialize to number of '/' chars needed in path. */\n  byteLength_: number;\n\n  /**\n   * @param path - Initial Path.\n   * @param errorPrefix_ - Prefix for any error messages.\n   */\n  constructor(path: Path, public errorPrefix_: string) {\n    this.parts_ = pathSlice(path, 0);\n    /** Initialize to number of '/' chars needed in path. */\n    this.byteLength_ = Math.max(1, this.parts_.length);\n\n    for (let i = 0; i < this.parts_.length; i++) {\n      this.byteLength_ += stringLength(this.parts_[i]);\n    }\n    validationPathCheckValid(this);\n  }\n}\n\nexport function validationPathPush(\n  validationPath: ValidationPath,\n  child: string\n): void {\n  // Count the needed '/'\n  if (validationPath.parts_.length > 0) {\n    validationPath.byteLength_ += 1;\n  }\n  validationPath.parts_.push(child);\n  validationPath.byteLength_ += stringLength(child);\n  validationPathCheckValid(validationPath);\n}\n\nexport function validationPathPop(validationPath: ValidationPath): void {\n  const last = validationPath.parts_.pop();\n  validationPath.byteLength_ -= stringLength(last);\n  // Un-count the previous '/'\n  if (validationPath.parts_.length > 0) {\n    validationPath.byteLength_ -= 1;\n  }\n}\n\nfunction validationPathCheckValid(validationPath: ValidationPath): void {\n  if (validationPath.byteLength_ > MAX_PATH_LENGTH_BYTES) {\n    throw new Error(\n      validationPath.errorPrefix_ +\n        'has a key path longer than ' +\n        MAX_PATH_LENGTH_BYTES +\n        ' bytes (' +\n        validationPath.byteLength_ +\n        ').'\n    );\n  }\n  if (validationPath.parts_.length > MAX_PATH_DEPTH) {\n    throw new Error(\n      validationPath.errorPrefix_ +\n        'path specified exceeds the maximum depth that can be written (' +\n        MAX_PATH_DEPTH +\n        ') or object contains a cycle ' +\n        validationPathToErrorString(validationPath)\n    );\n  }\n}\n\n/**\n * String for use in error messages - uses '.' notation for path.\n */\nexport function validationPathToErrorString(\n  validationPath: ValidationPath\n): string {\n  if (validationPath.parts_.length === 0) {\n    return '';\n  }\n  return \"in property '\" + validationPath.parts_.join('.') + \"'\";\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { EventEmitter } from './EventEmitter';\n\ndeclare const document: Document;\n\nexport class VisibilityMonitor extends EventEmitter {\n  private visible_: boolean;\n\n  static getInstance() {\n    return new VisibilityMonitor();\n  }\n\n  constructor() {\n    super(['visible']);\n    let hidden: string;\n    let visibilityChange: string;\n    if (\n      typeof document !== 'undefined' &&\n      typeof document.addEventListener !== 'undefined'\n    ) {\n      if (typeof document['hidden'] !== 'undefined') {\n        // Opera 12.10 and Firefox 18 and later support\n        visibilityChange = 'visibilitychange';\n        hidden = 'hidden';\n      } else if (typeof document['mozHidden'] !== 'undefined') {\n        visibilityChange = 'mozvisibilitychange';\n        hidden = 'mozHidden';\n      } else if (typeof document['msHidden'] !== 'undefined') {\n        visibilityChange = 'msvisibilitychange';\n        hidden = 'msHidden';\n      } else if (typeof document['webkitHidden'] !== 'undefined') {\n        visibilityChange = 'webkitvisibilitychange';\n        hidden = 'webkitHidden';\n      }\n    }\n\n    // Initially, we always assume we are visible. This ensures that in browsers\n    // without page visibility support or in cases where we are never visible\n    // (e.g. chrome extension), we act as if we are visible, i.e. don't delay\n    // reconnects\n    this.visible_ = true;\n\n    if (visibilityChange) {\n      document.addEventListener(\n        visibilityChange,\n        () => {\n          const visible = !document[hidden];\n          if (visible !== this.visible_) {\n            this.visible_ = visible;\n            this.trigger('visible', visible);\n          }\n        },\n        false\n      );\n    }\n  }\n\n  getInitialEvent(eventType: string): boolean[] {\n    assert(eventType === 'visible', 'Unknown event type: ' + eventType);\n    return [this.visible_];\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  assert,\n  contains,\n  Deferred,\n  isEmpty,\n  isMobileCordova,\n  isNodeSdk,\n  isReactNative,\n  isValidFormat,\n  safeGet,\n  stringify,\n  isAdmin\n} from '@firebase/util';\n\nimport { Connection } from '../realtime/Connection';\n\nimport { AppCheckTokenProvider } from './AppCheckTokenProvider';\nimport { AuthTokenProvider } from './AuthTokenProvider';\nimport { RepoInfo } from './RepoInfo';\nimport { ServerActions } from './ServerActions';\nimport { OnlineMonitor } from './util/OnlineMonitor';\nimport { Path } from './util/Path';\nimport { error, log, logWrapper, warn, ObjectToUniqueKey } from './util/util';\nimport { VisibilityMonitor } from './util/VisibilityMonitor';\nimport { SDK_VERSION } from './version';\nimport { QueryContext } from './view/EventRegistration';\n\nconst RECONNECT_MIN_DELAY = 1000;\nconst RECONNECT_MAX_DELAY_DEFAULT = 60 * 5 * 1000; // 5 minutes in milliseconds (Case: 1858)\nconst RECONNECT_MAX_DELAY_FOR_ADMINS = 30 * 1000; // 30 seconds for admin clients (likely to be a backend server)\nconst RECONNECT_DELAY_MULTIPLIER = 1.3;\nconst RECONNECT_DELAY_RESET_TIMEOUT = 30000; // Reset delay back to MIN_DELAY after being connected for 30sec.\nconst SERVER_KILL_INTERRUPT_REASON = 'server_kill';\n\n// If auth fails repeatedly, we'll assume something is wrong and log a warning / back off.\nconst INVALID_TOKEN_THRESHOLD = 3;\n\ninterface ListenSpec {\n  onComplete(s: string, p?: unknown): void;\n\n  hashFn(): string;\n\n  query: QueryContext;\n  tag: number | null;\n}\n\ninterface OnDisconnectRequest {\n  pathString: string;\n  action: string;\n  data: unknown;\n  onComplete?: (a: string, b: string) => void;\n}\n\ninterface OutstandingPut {\n  action: string;\n  request: object;\n  queued?: boolean;\n  onComplete: (a: string, b?: string) => void;\n}\n\ninterface OutstandingGet {\n  request: object;\n  onComplete: (response: { [k: string]: unknown }) => void;\n}\n\n/**\n * Firebase connection.  Abstracts wire protocol and handles reconnecting.\n *\n * NOTE: All JSON objects sent to the realtime connection must have property names enclosed\n * in quotes to make sure the closure compiler does not minify them.\n */\nexport class PersistentConnection extends ServerActions {\n  // Used for diagnostic logging.\n  id = PersistentConnection.nextPersistentConnectionId_++;\n  private log_ = logWrapper('p:' + this.id + ':');\n\n  private interruptReasons_: { [reason: string]: boolean } = {};\n  private readonly listens: Map<\n    /* path */ string,\n    Map</* queryId */ string, ListenSpec>\n  > = new Map();\n  private outstandingPuts_: OutstandingPut[] = [];\n  private outstandingGets_: OutstandingGet[] = [];\n  private outstandingPutCount_ = 0;\n  private outstandingGetCount_ = 0;\n  private onDisconnectRequestQueue_: OnDisconnectRequest[] = [];\n  private connected_ = false;\n  private reconnectDelay_ = RECONNECT_MIN_DELAY;\n  private maxReconnectDelay_ = RECONNECT_MAX_DELAY_DEFAULT;\n  private securityDebugCallback_: ((a: object) => void) | null = null;\n  lastSessionId: string | null = null;\n\n  private establishConnectionTimer_: number | null = null;\n\n  private visible_: boolean = false;\n\n  // Before we get connected, we keep a queue of pending messages to send.\n  private requestCBHash_: { [k: number]: (a: unknown) => void } = {};\n  private requestNumber_ = 0;\n\n  private realtime_: {\n    sendRequest(a: object): void;\n    close(): void;\n  } | null = null;\n\n  private authToken_: string | null = null;\n  private appCheckToken_: string | null = null;\n  private forceTokenRefresh_ = false;\n  private invalidAuthTokenCount_ = 0;\n  private invalidAppCheckTokenCount_ = 0;\n\n  private firstConnection_ = true;\n  private lastConnectionAttemptTime_: number | null = null;\n  private lastConnectionEstablishedTime_: number | null = null;\n\n  private static nextPersistentConnectionId_ = 0;\n\n  /**\n   * Counter for number of connections created. Mainly used for tagging in the logs\n   */\n  private static nextConnectionId_ = 0;\n\n  /**\n   * @param repoInfo_ - Data about the namespace we are connecting to\n   * @param applicationId_ - The Firebase App ID for this project\n   * @param onDataUpdate_ - A callback for new data from the server\n   */\n  constructor(\n    private repoInfo_: RepoInfo,\n    private applicationId_: string,\n    private onDataUpdate_: (\n      a: string,\n      b: unknown,\n      c: boolean,\n      d: number | null\n    ) => void,\n    private onConnectStatus_: (a: boolean) => void,\n    private onServerInfoUpdate_: (a: unknown) => void,\n    private authTokenProvider_: AuthTokenProvider,\n    private appCheckTokenProvider_: AppCheckTokenProvider,\n    private authOverride_?: object | null\n  ) {\n    super();\n\n    if (authOverride_ && !isNodeSdk()) {\n      throw new Error(\n        'Auth override specified in options, but not supported on non Node.js platforms'\n      );\n    }\n\n    VisibilityMonitor.getInstance().on('visible', this.onVisible_, this);\n\n    if (repoInfo_.host.indexOf('fblocal') === -1) {\n      OnlineMonitor.getInstance().on('online', this.onOnline_, this);\n    }\n  }\n\n  protected sendRequest(\n    action: string,\n    body: unknown,\n    onResponse?: (a: unknown) => void\n  ) {\n    const curReqNum = ++this.requestNumber_;\n\n    const msg = { r: curReqNum, a: action, b: body };\n    this.log_(stringify(msg));\n    assert(\n      this.connected_,\n      \"sendRequest call when we're not connected not allowed.\"\n    );\n    this.realtime_.sendRequest(msg);\n    if (onResponse) {\n      this.requestCBHash_[curReqNum] = onResponse;\n    }\n  }\n\n  get(query: QueryContext): Promise<string> {\n    this.initConnection_();\n\n    const deferred = new Deferred<string>();\n    const request = {\n      p: query._path.toString(),\n      q: query._queryObject\n    };\n    const outstandingGet = {\n      action: 'g',\n      request,\n      onComplete: (message: { [k: string]: unknown }) => {\n        const payload = message['d'] as string;\n        if (message['s'] === 'ok') {\n          deferred.resolve(payload);\n        } else {\n          deferred.reject(payload);\n        }\n      }\n    };\n    this.outstandingGets_.push(outstandingGet);\n    this.outstandingGetCount_++;\n    const index = this.outstandingGets_.length - 1;\n\n    if (this.connected_) {\n      this.sendGet_(index);\n    }\n\n    return deferred.promise;\n  }\n\n  listen(\n    query: QueryContext,\n    currentHashFn: () => string,\n    tag: number | null,\n    onComplete: (a: string, b: unknown) => void\n  ) {\n    this.initConnection_();\n\n    const queryId = query._queryIdentifier;\n    const pathString = query._path.toString();\n    this.log_('Listen called for ' + pathString + ' ' + queryId);\n    if (!this.listens.has(pathString)) {\n      this.listens.set(pathString, new Map());\n    }\n    assert(\n      query._queryParams.isDefault() || !query._queryParams.loadsAllData(),\n      'listen() called for non-default but complete query'\n    );\n    assert(\n      !this.listens.get(pathString)!.has(queryId),\n      `listen() called twice for same path/queryId.`\n    );\n    const listenSpec: ListenSpec = {\n      onComplete,\n      hashFn: currentHashFn,\n      query,\n      tag\n    };\n    this.listens.get(pathString)!.set(queryId, listenSpec);\n\n    if (this.connected_) {\n      this.sendListen_(listenSpec);\n    }\n  }\n\n  private sendGet_(index: number) {\n    const get = this.outstandingGets_[index];\n    this.sendRequest('g', get.request, (message: { [k: string]: unknown }) => {\n      delete this.outstandingGets_[index];\n      this.outstandingGetCount_--;\n      if (this.outstandingGetCount_ === 0) {\n        this.outstandingGets_ = [];\n      }\n      if (get.onComplete) {\n        get.onComplete(message);\n      }\n    });\n  }\n\n  private sendListen_(listenSpec: ListenSpec) {\n    const query = listenSpec.query;\n    const pathString = query._path.toString();\n    const queryId = query._queryIdentifier;\n    this.log_('Listen on ' + pathString + ' for ' + queryId);\n    const req: { [k: string]: unknown } = { /*path*/ p: pathString };\n\n    const action = 'q';\n\n    // Only bother to send query if it's non-default.\n    if (listenSpec.tag) {\n      req['q'] = query._queryObject;\n      req['t'] = listenSpec.tag;\n    }\n\n    req[/*hash*/ 'h'] = listenSpec.hashFn();\n\n    this.sendRequest(action, req, (message: { [k: string]: unknown }) => {\n      const payload: unknown = message[/*data*/ 'd'];\n      const status = message[/*status*/ 's'] as string;\n\n      // print warnings in any case...\n      PersistentConnection.warnOnListenWarnings_(payload, query);\n\n      const currentListenSpec =\n        this.listens.get(pathString) &&\n        this.listens.get(pathString)!.get(queryId);\n      // only trigger actions if the listen hasn't been removed and readded\n      if (currentListenSpec === listenSpec) {\n        this.log_('listen response', message);\n\n        if (status !== 'ok') {\n          this.removeListen_(pathString, queryId);\n        }\n\n        if (listenSpec.onComplete) {\n          listenSpec.onComplete(status, payload);\n        }\n      }\n    });\n  }\n\n  private static warnOnListenWarnings_(payload: unknown, query: QueryContext) {\n    if (payload && typeof payload === 'object' && contains(payload, 'w')) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      const warnings = safeGet(payload as any, 'w');\n      if (Array.isArray(warnings) && ~warnings.indexOf('no_index')) {\n        const indexSpec =\n          '\".indexOn\": \"' + query._queryParams.getIndex().toString() + '\"';\n        const indexPath = query._path.toString();\n        warn(\n          `Using an unspecified index. Your data will be downloaded and ` +\n            `filtered on the client. Consider adding ${indexSpec} at ` +\n            `${indexPath} to your security rules for better performance.`\n        );\n      }\n    }\n  }\n\n  refreshAuthToken(token: string) {\n    this.authToken_ = token;\n    this.log_('Auth token refreshed');\n    if (this.authToken_) {\n      this.tryAuth();\n    } else {\n      //If we're connected we want to let the server know to unauthenticate us. If we're not connected, simply delete\n      //the credential so we dont become authenticated next time we connect.\n      if (this.connected_) {\n        this.sendRequest('unauth', {}, () => {});\n      }\n    }\n\n    this.reduceReconnectDelayIfAdminCredential_(token);\n  }\n\n  private reduceReconnectDelayIfAdminCredential_(credential: string) {\n    // NOTE: This isn't intended to be bulletproof (a malicious developer can always just modify the client).\n    // Additionally, we don't bother resetting the max delay back to the default if auth fails / expires.\n    const isFirebaseSecret = credential && credential.length === 40;\n    if (isFirebaseSecret || isAdmin(credential)) {\n      this.log_(\n        'Admin auth credential detected.  Reducing max reconnect time.'\n      );\n      this.maxReconnectDelay_ = RECONNECT_MAX_DELAY_FOR_ADMINS;\n    }\n  }\n\n  refreshAppCheckToken(token: string | null) {\n    this.appCheckToken_ = token;\n    this.log_('App check token refreshed');\n    if (this.appCheckToken_) {\n      this.tryAppCheck();\n    } else {\n      //If we're connected we want to let the server know to unauthenticate us.\n      //If we're not connected, simply delete the credential so we dont become\n      // authenticated next time we connect.\n      if (this.connected_) {\n        this.sendRequest('unappeck', {}, () => {});\n      }\n    }\n  }\n\n  /**\n   * Attempts to authenticate with the given credentials. If the authentication attempt fails, it's triggered like\n   * a auth revoked (the connection is closed).\n   */\n  tryAuth() {\n    if (this.connected_ && this.authToken_) {\n      const token = this.authToken_;\n      const authMethod = isValidFormat(token) ? 'auth' : 'gauth';\n      const requestData: { [k: string]: unknown } = { cred: token };\n      if (this.authOverride_ === null) {\n        requestData['noauth'] = true;\n      } else if (typeof this.authOverride_ === 'object') {\n        requestData['authvar'] = this.authOverride_;\n      }\n      this.sendRequest(\n        authMethod,\n        requestData,\n        (res: { [k: string]: unknown }) => {\n          const status = res[/*status*/ 's'] as string;\n          const data = (res[/*data*/ 'd'] as string) || 'error';\n\n          if (this.authToken_ === token) {\n            if (status === 'ok') {\n              this.invalidAuthTokenCount_ = 0;\n            } else {\n              // Triggers reconnect and force refresh for auth token\n              this.onAuthRevoked_(status, data);\n            }\n          }\n        }\n      );\n    }\n  }\n\n  /**\n   * Attempts to authenticate with the given token. If the authentication\n   * attempt fails, it's triggered like the token was revoked (the connection is\n   * closed).\n   */\n  tryAppCheck() {\n    if (this.connected_ && this.appCheckToken_) {\n      this.sendRequest(\n        'appcheck',\n        { 'token': this.appCheckToken_ },\n        (res: { [k: string]: unknown }) => {\n          const status = res[/*status*/ 's'] as string;\n          const data = (res[/*data*/ 'd'] as string) || 'error';\n          if (status === 'ok') {\n            this.invalidAppCheckTokenCount_ = 0;\n          } else {\n            this.onAppCheckRevoked_(status, data);\n          }\n        }\n      );\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  unlisten(query: QueryContext, tag: number | null) {\n    const pathString = query._path.toString();\n    const queryId = query._queryIdentifier;\n\n    this.log_('Unlisten called for ' + pathString + ' ' + queryId);\n\n    assert(\n      query._queryParams.isDefault() || !query._queryParams.loadsAllData(),\n      'unlisten() called for non-default but complete query'\n    );\n    const listen = this.removeListen_(pathString, queryId);\n    if (listen && this.connected_) {\n      this.sendUnlisten_(pathString, queryId, query._queryObject, tag);\n    }\n  }\n\n  private sendUnlisten_(\n    pathString: string,\n    queryId: string,\n    queryObj: object,\n    tag: number | null\n  ) {\n    this.log_('Unlisten on ' + pathString + ' for ' + queryId);\n\n    const req: { [k: string]: unknown } = { /*path*/ p: pathString };\n    const action = 'n';\n    // Only bother sending queryId if it's non-default.\n    if (tag) {\n      req['q'] = queryObj;\n      req['t'] = tag;\n    }\n\n    this.sendRequest(action, req);\n  }\n\n  onDisconnectPut(\n    pathString: string,\n    data: unknown,\n    onComplete?: (a: string, b: string) => void\n  ) {\n    this.initConnection_();\n\n    if (this.connected_) {\n      this.sendOnDisconnect_('o', pathString, data, onComplete);\n    } else {\n      this.onDisconnectRequestQueue_.push({\n        pathString,\n        action: 'o',\n        data,\n        onComplete\n      });\n    }\n  }\n\n  onDisconnectMerge(\n    pathString: string,\n    data: unknown,\n    onComplete?: (a: string, b: string) => void\n  ) {\n    this.initConnection_();\n\n    if (this.connected_) {\n      this.sendOnDisconnect_('om', pathString, data, onComplete);\n    } else {\n      this.onDisconnectRequestQueue_.push({\n        pathString,\n        action: 'om',\n        data,\n        onComplete\n      });\n    }\n  }\n\n  onDisconnectCancel(\n    pathString: string,\n    onComplete?: (a: string, b: string) => void\n  ) {\n    this.initConnection_();\n\n    if (this.connected_) {\n      this.sendOnDisconnect_('oc', pathString, null, onComplete);\n    } else {\n      this.onDisconnectRequestQueue_.push({\n        pathString,\n        action: 'oc',\n        data: null,\n        onComplete\n      });\n    }\n  }\n\n  private sendOnDisconnect_(\n    action: string,\n    pathString: string,\n    data: unknown,\n    onComplete: (a: string, b: string) => void\n  ) {\n    const request = { /*path*/ p: pathString, /*data*/ d: data };\n    this.log_('onDisconnect ' + action, request);\n    this.sendRequest(action, request, (response: { [k: string]: unknown }) => {\n      if (onComplete) {\n        setTimeout(() => {\n          onComplete(\n            response[/*status*/ 's'] as string,\n            response[/* data */ 'd'] as string\n          );\n        }, Math.floor(0));\n      }\n    });\n  }\n\n  put(\n    pathString: string,\n    data: unknown,\n    onComplete?: (a: string, b: string) => void,\n    hash?: string\n  ) {\n    this.putInternal('p', pathString, data, onComplete, hash);\n  }\n\n  merge(\n    pathString: string,\n    data: unknown,\n    onComplete: (a: string, b: string | null) => void,\n    hash?: string\n  ) {\n    this.putInternal('m', pathString, data, onComplete, hash);\n  }\n\n  putInternal(\n    action: string,\n    pathString: string,\n    data: unknown,\n    onComplete: (a: string, b: string | null) => void,\n    hash?: string\n  ) {\n    this.initConnection_();\n\n    const request: { [k: string]: unknown } = {\n      /*path*/ p: pathString,\n      /*data*/ d: data\n    };\n\n    if (hash !== undefined) {\n      request[/*hash*/ 'h'] = hash;\n    }\n\n    // TODO: Only keep track of the most recent put for a given path?\n    this.outstandingPuts_.push({\n      action,\n      request,\n      onComplete\n    });\n\n    this.outstandingPutCount_++;\n    const index = this.outstandingPuts_.length - 1;\n\n    if (this.connected_) {\n      this.sendPut_(index);\n    } else {\n      this.log_('Buffering put: ' + pathString);\n    }\n  }\n\n  private sendPut_(index: number) {\n    const action = this.outstandingPuts_[index].action;\n    const request = this.outstandingPuts_[index].request;\n    const onComplete = this.outstandingPuts_[index].onComplete;\n    this.outstandingPuts_[index].queued = this.connected_;\n\n    this.sendRequest(action, request, (message: { [k: string]: unknown }) => {\n      this.log_(action + ' response', message);\n\n      delete this.outstandingPuts_[index];\n      this.outstandingPutCount_--;\n\n      // Clean up array occasionally.\n      if (this.outstandingPutCount_ === 0) {\n        this.outstandingPuts_ = [];\n      }\n\n      if (onComplete) {\n        onComplete(\n          message[/*status*/ 's'] as string,\n          message[/* data */ 'd'] as string\n        );\n      }\n    });\n  }\n\n  reportStats(stats: { [k: string]: unknown }) {\n    // If we're not connected, we just drop the stats.\n    if (this.connected_) {\n      const request = { /*counters*/ c: stats };\n      this.log_('reportStats', request);\n\n      this.sendRequest(/*stats*/ 's', request, result => {\n        const status = result[/*status*/ 's'];\n        if (status !== 'ok') {\n          const errorReason = result[/* data */ 'd'];\n          this.log_('reportStats', 'Error sending stats: ' + errorReason);\n        }\n      });\n    }\n  }\n\n  private onDataMessage_(message: { [k: string]: unknown }) {\n    if ('r' in message) {\n      // this is a response\n      this.log_('from server: ' + stringify(message));\n      const reqNum = message['r'] as string;\n      const onResponse = this.requestCBHash_[reqNum];\n      if (onResponse) {\n        delete this.requestCBHash_[reqNum];\n        onResponse(message[/*body*/ 'b']);\n      }\n    } else if ('error' in message) {\n      throw 'A server-side error has occurred: ' + message['error'];\n    } else if ('a' in message) {\n      // a and b are action and body, respectively\n      this.onDataPush_(message['a'] as string, message['b'] as {});\n    }\n  }\n\n  private onDataPush_(action: string, body: { [k: string]: unknown }) {\n    this.log_('handleServerMessage', action, body);\n    if (action === 'd') {\n      this.onDataUpdate_(\n        body[/*path*/ 'p'] as string,\n        body[/*data*/ 'd'],\n        /*isMerge*/ false,\n        body['t'] as number\n      );\n    } else if (action === 'm') {\n      this.onDataUpdate_(\n        body[/*path*/ 'p'] as string,\n        body[/*data*/ 'd'],\n        /*isMerge=*/ true,\n        body['t'] as number\n      );\n    } else if (action === 'c') {\n      this.onListenRevoked_(\n        body[/*path*/ 'p'] as string,\n        body[/*query*/ 'q'] as unknown[]\n      );\n    } else if (action === 'ac') {\n      this.onAuthRevoked_(\n        body[/*status code*/ 's'] as string,\n        body[/* explanation */ 'd'] as string\n      );\n    } else if (action === 'apc') {\n      this.onAppCheckRevoked_(\n        body[/*status code*/ 's'] as string,\n        body[/* explanation */ 'd'] as string\n      );\n    } else if (action === 'sd') {\n      this.onSecurityDebugPacket_(body);\n    } else {\n      error(\n        'Unrecognized action received from server: ' +\n          stringify(action) +\n          '\\nAre you using the latest client?'\n      );\n    }\n  }\n\n  private onReady_(timestamp: number, sessionId: string) {\n    this.log_('connection ready');\n    this.connected_ = true;\n    this.lastConnectionEstablishedTime_ = new Date().getTime();\n    this.handleTimestamp_(timestamp);\n    this.lastSessionId = sessionId;\n    if (this.firstConnection_) {\n      this.sendConnectStats_();\n    }\n    this.restoreState_();\n    this.firstConnection_ = false;\n    this.onConnectStatus_(true);\n  }\n\n  private scheduleConnect_(timeout: number) {\n    assert(\n      !this.realtime_,\n      \"Scheduling a connect when we're already connected/ing?\"\n    );\n\n    if (this.establishConnectionTimer_) {\n      clearTimeout(this.establishConnectionTimer_);\n    }\n\n    // NOTE: Even when timeout is 0, it's important to do a setTimeout to work around an infuriating \"Security Error\" in\n    // Firefox when trying to write to our long-polling iframe in some scenarios (e.g. Forge or our unit tests).\n\n    this.establishConnectionTimer_ = setTimeout(() => {\n      this.establishConnectionTimer_ = null;\n      this.establishConnection_();\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    }, Math.floor(timeout)) as any;\n  }\n\n  private initConnection_() {\n    if (!this.realtime_ && this.firstConnection_) {\n      this.scheduleConnect_(0);\n    }\n  }\n\n  private onVisible_(visible: boolean) {\n    // NOTE: Tabbing away and back to a window will defeat our reconnect backoff, but I think that's fine.\n    if (\n      visible &&\n      !this.visible_ &&\n      this.reconnectDelay_ === this.maxReconnectDelay_\n    ) {\n      this.log_('Window became visible.  Reducing delay.');\n      this.reconnectDelay_ = RECONNECT_MIN_DELAY;\n\n      if (!this.realtime_) {\n        this.scheduleConnect_(0);\n      }\n    }\n    this.visible_ = visible;\n  }\n\n  private onOnline_(online: boolean) {\n    if (online) {\n      this.log_('Browser went online.');\n      this.reconnectDelay_ = RECONNECT_MIN_DELAY;\n      if (!this.realtime_) {\n        this.scheduleConnect_(0);\n      }\n    } else {\n      this.log_('Browser went offline.  Killing connection.');\n      if (this.realtime_) {\n        this.realtime_.close();\n      }\n    }\n  }\n\n  private onRealtimeDisconnect_() {\n    this.log_('data client disconnected');\n    this.connected_ = false;\n    this.realtime_ = null;\n\n    // Since we don't know if our sent transactions succeeded or not, we need to cancel them.\n    this.cancelSentTransactions_();\n\n    // Clear out the pending requests.\n    this.requestCBHash_ = {};\n\n    if (this.shouldReconnect_()) {\n      if (!this.visible_) {\n        this.log_(\"Window isn't visible.  Delaying reconnect.\");\n        this.reconnectDelay_ = this.maxReconnectDelay_;\n        this.lastConnectionAttemptTime_ = new Date().getTime();\n      } else if (this.lastConnectionEstablishedTime_) {\n        // If we've been connected long enough, reset reconnect delay to minimum.\n        const timeSinceLastConnectSucceeded =\n          new Date().getTime() - this.lastConnectionEstablishedTime_;\n        if (timeSinceLastConnectSucceeded > RECONNECT_DELAY_RESET_TIMEOUT) {\n          this.reconnectDelay_ = RECONNECT_MIN_DELAY;\n        }\n        this.lastConnectionEstablishedTime_ = null;\n      }\n\n      const timeSinceLastConnectAttempt =\n        new Date().getTime() - this.lastConnectionAttemptTime_;\n      let reconnectDelay = Math.max(\n        0,\n        this.reconnectDelay_ - timeSinceLastConnectAttempt\n      );\n      reconnectDelay = Math.random() * reconnectDelay;\n\n      this.log_('Trying to reconnect in ' + reconnectDelay + 'ms');\n      this.scheduleConnect_(reconnectDelay);\n\n      // Adjust reconnect delay for next time.\n      this.reconnectDelay_ = Math.min(\n        this.maxReconnectDelay_,\n        this.reconnectDelay_ * RECONNECT_DELAY_MULTIPLIER\n      );\n    }\n    this.onConnectStatus_(false);\n  }\n\n  private async establishConnection_() {\n    if (this.shouldReconnect_()) {\n      this.log_('Making a connection attempt');\n      this.lastConnectionAttemptTime_ = new Date().getTime();\n      this.lastConnectionEstablishedTime_ = null;\n      const onDataMessage = this.onDataMessage_.bind(this);\n      const onReady = this.onReady_.bind(this);\n      const onDisconnect = this.onRealtimeDisconnect_.bind(this);\n      const connId = this.id + ':' + PersistentConnection.nextConnectionId_++;\n      const lastSessionId = this.lastSessionId;\n      let canceled = false;\n      let connection: Connection | null = null;\n      const closeFn = function () {\n        if (connection) {\n          connection.close();\n        } else {\n          canceled = true;\n          onDisconnect();\n        }\n      };\n      const sendRequestFn = function (msg: object) {\n        assert(\n          connection,\n          \"sendRequest call when we're not connected not allowed.\"\n        );\n        connection.sendRequest(msg);\n      };\n\n      this.realtime_ = {\n        close: closeFn,\n        sendRequest: sendRequestFn\n      };\n\n      const forceRefresh = this.forceTokenRefresh_;\n      this.forceTokenRefresh_ = false;\n\n      try {\n        // First fetch auth and app check token, and establish connection after\n        // fetching the token was successful\n        const [authToken, appCheckToken] = await Promise.all([\n          this.authTokenProvider_.getToken(forceRefresh),\n          this.appCheckTokenProvider_.getToken(forceRefresh)\n        ]);\n\n        if (!canceled) {\n          log('getToken() completed. Creating connection.');\n          this.authToken_ = authToken && authToken.accessToken;\n          this.appCheckToken_ = appCheckToken && appCheckToken.token;\n          connection = new Connection(\n            connId,\n            this.repoInfo_,\n            this.applicationId_,\n            this.appCheckToken_,\n            this.authToken_,\n            onDataMessage,\n            onReady,\n            onDisconnect,\n            /* onKill= */ reason => {\n              warn(reason + ' (' + this.repoInfo_.toString() + ')');\n              this.interrupt(SERVER_KILL_INTERRUPT_REASON);\n            },\n            lastSessionId\n          );\n        } else {\n          log('getToken() completed but was canceled');\n        }\n      } catch (error) {\n        this.log_('Failed to get token: ' + error);\n        if (!canceled) {\n          if (this.repoInfo_.nodeAdmin) {\n            // This may be a critical error for the Admin Node.js SDK, so log a warning.\n            // But getToken() may also just have temporarily failed, so we still want to\n            // continue retrying.\n            warn(error);\n          }\n          closeFn();\n        }\n      }\n    }\n  }\n\n  interrupt(reason: string) {\n    log('Interrupting connection for reason: ' + reason);\n    this.interruptReasons_[reason] = true;\n    if (this.realtime_) {\n      this.realtime_.close();\n    } else {\n      if (this.establishConnectionTimer_) {\n        clearTimeout(this.establishConnectionTimer_);\n        this.establishConnectionTimer_ = null;\n      }\n      if (this.connected_) {\n        this.onRealtimeDisconnect_();\n      }\n    }\n  }\n\n  resume(reason: string) {\n    log('Resuming connection for reason: ' + reason);\n    delete this.interruptReasons_[reason];\n    if (isEmpty(this.interruptReasons_)) {\n      this.reconnectDelay_ = RECONNECT_MIN_DELAY;\n      if (!this.realtime_) {\n        this.scheduleConnect_(0);\n      }\n    }\n  }\n\n  private handleTimestamp_(timestamp: number) {\n    const delta = timestamp - new Date().getTime();\n    this.onServerInfoUpdate_({ serverTimeOffset: delta });\n  }\n\n  private cancelSentTransactions_() {\n    for (let i = 0; i < this.outstandingPuts_.length; i++) {\n      const put = this.outstandingPuts_[i];\n      if (put && /*hash*/ 'h' in put.request && put.queued) {\n        if (put.onComplete) {\n          put.onComplete('disconnect');\n        }\n\n        delete this.outstandingPuts_[i];\n        this.outstandingPutCount_--;\n      }\n    }\n\n    // Clean up array occasionally.\n    if (this.outstandingPutCount_ === 0) {\n      this.outstandingPuts_ = [];\n    }\n  }\n\n  private onListenRevoked_(pathString: string, query?: unknown[]) {\n    // Remove the listen and manufacture a \"permission_denied\" error for the failed listen.\n    let queryId;\n    if (!query) {\n      queryId = 'default';\n    } else {\n      queryId = query.map(q => ObjectToUniqueKey(q)).join('$');\n    }\n    const listen = this.removeListen_(pathString, queryId);\n    if (listen && listen.onComplete) {\n      listen.onComplete('permission_denied');\n    }\n  }\n\n  private removeListen_(pathString: string, queryId: string): ListenSpec {\n    const normalizedPathString = new Path(pathString).toString(); // normalize path.\n    let listen;\n    if (this.listens.has(normalizedPathString)) {\n      const map = this.listens.get(normalizedPathString)!;\n      listen = map.get(queryId);\n      map.delete(queryId);\n      if (map.size === 0) {\n        this.listens.delete(normalizedPathString);\n      }\n    } else {\n      // all listens for this path has already been removed\n      listen = undefined;\n    }\n    return listen;\n  }\n\n  private onAuthRevoked_(statusCode: string, explanation: string) {\n    log('Auth token revoked: ' + statusCode + '/' + explanation);\n    this.authToken_ = null;\n    this.forceTokenRefresh_ = true;\n    this.realtime_.close();\n    if (statusCode === 'invalid_token' || statusCode === 'permission_denied') {\n      // We'll wait a couple times before logging the warning / increasing the\n      // retry period since oauth tokens will report as \"invalid\" if they're\n      // just expired. Plus there may be transient issues that resolve themselves.\n      this.invalidAuthTokenCount_++;\n      if (this.invalidAuthTokenCount_ >= INVALID_TOKEN_THRESHOLD) {\n        // Set a long reconnect delay because recovery is unlikely\n        this.reconnectDelay_ = RECONNECT_MAX_DELAY_FOR_ADMINS;\n\n        // Notify the auth token provider that the token is invalid, which will log\n        // a warning\n        this.authTokenProvider_.notifyForInvalidToken();\n      }\n    }\n  }\n\n  private onAppCheckRevoked_(statusCode: string, explanation: string) {\n    log('App check token revoked: ' + statusCode + '/' + explanation);\n    this.appCheckToken_ = null;\n    this.forceTokenRefresh_ = true;\n    // Note: We don't close the connection as the developer may not have\n    // enforcement enabled. The backend closes connections with enforcements.\n    if (statusCode === 'invalid_token' || statusCode === 'permission_denied') {\n      // We'll wait a couple times before logging the warning / increasing the\n      // retry period since oauth tokens will report as \"invalid\" if they're\n      // just expired. Plus there may be transient issues that resolve themselves.\n      this.invalidAppCheckTokenCount_++;\n      if (this.invalidAppCheckTokenCount_ >= INVALID_TOKEN_THRESHOLD) {\n        this.appCheckTokenProvider_.notifyForInvalidToken();\n      }\n    }\n  }\n\n  private onSecurityDebugPacket_(body: { [k: string]: unknown }) {\n    if (this.securityDebugCallback_) {\n      this.securityDebugCallback_(body);\n    } else {\n      if ('msg' in body) {\n        console.log(\n          'FIREBASE: ' + (body['msg'] as string).replace('\\n', '\\nFIREBASE: ')\n        );\n      }\n    }\n  }\n\n  private restoreState_() {\n    //Re-authenticate ourselves if we have a credential stored.\n    this.tryAuth();\n    this.tryAppCheck();\n\n    // Puts depend on having received the corresponding data update from the server before they complete, so we must\n    // make sure to send listens before puts.\n    for (const queries of this.listens.values()) {\n      for (const listenSpec of queries.values()) {\n        this.sendListen_(listenSpec);\n      }\n    }\n\n    for (let i = 0; i < this.outstandingPuts_.length; i++) {\n      if (this.outstandingPuts_[i]) {\n        this.sendPut_(i);\n      }\n    }\n\n    while (this.onDisconnectRequestQueue_.length) {\n      const request = this.onDisconnectRequestQueue_.shift();\n      this.sendOnDisconnect_(\n        request.action,\n        request.pathString,\n        request.data,\n        request.onComplete\n      );\n    }\n\n    for (let i = 0; i < this.outstandingGets_.length; i++) {\n      if (this.outstandingGets_[i]) {\n        this.sendGet_(i);\n      }\n    }\n  }\n\n  /**\n   * Sends client stats for first connection\n   */\n  private sendConnectStats_() {\n    const stats: { [k: string]: number } = {};\n\n    let clientName = 'js';\n    if (isNodeSdk()) {\n      if (this.repoInfo_.nodeAdmin) {\n        clientName = 'admin_node';\n      } else {\n        clientName = 'node';\n      }\n    }\n\n    stats['sdk.' + clientName + '.' + SDK_VERSION.replace(/\\./g, '-')] = 1;\n\n    if (isMobileCordova()) {\n      stats['framework.cordova'] = 1;\n    } else if (isReactNative()) {\n      stats['framework.reactnative'] = 1;\n    }\n    this.reportStats(stats);\n  }\n\n  private shouldReconnect_(): boolean {\n    const online = OnlineMonitor.getInstance().currentlyOnline();\n    return isEmpty(this.interruptReasons_) && online;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, assertionError } from '@firebase/util';\n\nimport { nameCompare, MAX_NAME } from '../../util/util';\nimport { ChildrenNode } from '../ChildrenNode';\nimport { Node, NamedNode } from '../Node';\n\nimport { Index } from './Index';\n\nlet __EMPTY_NODE: ChildrenNode;\n\nexport class KeyIndex extends Index {\n  static get __EMPTY_NODE() {\n    return __EMPTY_NODE;\n  }\n\n  static set __EMPTY_NODE(val) {\n    __EMPTY_NODE = val;\n  }\n  compare(a: NamedNode, b: NamedNode): number {\n    return nameCompare(a.name, b.name);\n  }\n  isDefinedOn(node: Node): boolean {\n    // We could probably return true here (since every node has a key), but it's never called\n    // so just leaving unimplemented for now.\n    throw assertionError('KeyIndex.isDefinedOn not expected to be called.');\n  }\n  indexedValueChanged(oldNode: Node, newNode: Node): boolean {\n    return false; // The key for a node never changes.\n  }\n  minPost() {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return (NamedNode as any).MIN;\n  }\n  maxPost(): NamedNode {\n    // TODO: This should really be created once and cached in a static property, but\n    // NamedNode isn't defined yet, so I can't use it in a static.  Bleh.\n    return new NamedNode(MAX_NAME, __EMPTY_NODE);\n  }\n\n  makePost(indexValue: string, name: string): NamedNode {\n    assert(\n      typeof indexValue === 'string',\n      'KeyIndex indexValue must always be a string.'\n    );\n    // We just use empty node, but it'll never be compared, since our comparator only looks at name.\n    return new NamedNode(indexValue, __EMPTY_NODE);\n  }\n\n  /**\n   * @returns String representation for inclusion in a query spec\n   */\n  toString(): string {\n    return '.key';\n  }\n}\n\nexport const KEY_INDEX = new KeyIndex();\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Path } from '../util/Path';\n\nimport { Index } from './indexes/Index';\n\n/**\n * Node is an interface defining the common functionality for nodes in\n * a DataSnapshot.\n *\n * @interface\n */\nexport interface Node {\n  /**\n   * Whether this node is a leaf node.\n   * @returns Whether this is a leaf node.\n   */\n  isLeafNode(): boolean;\n\n  /**\n   * Gets the priority of the node.\n   * @returns The priority of the node.\n   */\n  getPriority(): Node;\n\n  /**\n   * Returns a duplicate node with the new priority.\n   * @param newPriorityNode - New priority to set for the node.\n   * @returns Node with new priority.\n   */\n  updatePriority(newPriorityNode: Node): Node;\n\n  /**\n   * Returns the specified immediate child, or null if it doesn't exist.\n   * @param childName - The name of the child to retrieve.\n   * @returns The retrieved child, or an empty node.\n   */\n  getImmediateChild(childName: string): Node;\n\n  /**\n   * Returns a child by path, or null if it doesn't exist.\n   * @param path - The path of the child to retrieve.\n   * @returns The retrieved child or an empty node.\n   */\n  getChild(path: Path): Node;\n\n  /**\n   * Returns the name of the child immediately prior to the specified childNode, or null.\n   * @param childName - The name of the child to find the predecessor of.\n   * @param childNode - The node to find the predecessor of.\n   * @param index - The index to use to determine the predecessor\n   * @returns The name of the predecessor child, or null if childNode is the first child.\n   */\n  getPredecessorChildName(\n    childName: string,\n    childNode: Node,\n    index: Index\n  ): string | null;\n\n  /**\n   * Returns a duplicate node, with the specified immediate child updated.\n   * Any value in the node will be removed.\n   * @param childName - The name of the child to update.\n   * @param newChildNode - The new child node\n   * @returns The updated node.\n   */\n  updateImmediateChild(childName: string, newChildNode: Node): Node;\n\n  /**\n   * Returns a duplicate node, with the specified child updated.  Any value will\n   * be removed.\n   * @param path - The path of the child to update.\n   * @param newChildNode - The new child node, which may be an empty node\n   * @returns The updated node.\n   */\n  updateChild(path: Path, newChildNode: Node): Node;\n\n  /**\n   * True if the immediate child specified exists\n   */\n  hasChild(childName: string): boolean;\n\n  /**\n   * @returns True if this node has no value or children.\n   */\n  isEmpty(): boolean;\n\n  /**\n   * @returns The number of children of this node.\n   */\n  numChildren(): number;\n\n  /**\n   * Calls action for each child.\n   * @param action - Action to be called for\n   * each child.  It's passed the child name and the child node.\n   * @returns The first truthy value return by action, or the last falsey one\n   */\n  forEachChild(index: Index, action: (a: string, b: Node) => void): unknown;\n\n  /**\n   * @param exportFormat - True for export format (also wire protocol format).\n   * @returns Value of this node as JSON.\n   */\n  val(exportFormat?: boolean): unknown;\n\n  /**\n   * @returns hash representing the node contents.\n   */\n  hash(): string;\n\n  /**\n   * @param other - Another node\n   * @returns -1 for less than, 0 for equal, 1 for greater than other\n   */\n  compareTo(other: Node): number;\n\n  /**\n   * @returns Whether or not this snapshot equals other\n   */\n  equals(other: Node): boolean;\n\n  /**\n   * @returns This node, with the specified index now available\n   */\n  withIndex(indexDefinition: Index): Node;\n\n  isIndexed(indexDefinition: Index): boolean;\n}\n\nexport class NamedNode {\n  constructor(public name: string, public node: Node) {}\n\n  static Wrap(name: string, node: Node) {\n    return new NamedNode(name, node);\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Comparator } from '../../util/SortedMap';\nimport { MIN_NAME } from '../../util/util';\nimport { Node, NamedNode } from '../Node';\n\nexport abstract class Index {\n  abstract compare(a: NamedNode, b: NamedNode): number;\n\n  abstract isDefinedOn(node: Node): boolean;\n\n  /**\n   * @returns A standalone comparison function for\n   * this index\n   */\n  getCompare(): Comparator<NamedNode> {\n    return this.compare.bind(this);\n  }\n\n  /**\n   * Given a before and after value for a node, determine if the indexed value has changed. Even if they are different,\n   * it's possible that the changes are isolated to parts of the snapshot that are not indexed.\n   *\n   *\n   * @returns True if the portion of the snapshot being indexed changed between oldNode and newNode\n   */\n  indexedValueChanged(oldNode: Node, newNode: Node): boolean {\n    const oldWrapped = new NamedNode(MIN_NAME, oldNode);\n    const newWrapped = new NamedNode(MIN_NAME, newNode);\n    return this.compare(oldWrapped, newWrapped) !== 0;\n  }\n\n  /**\n   * @returns a node wrapper that will sort equal to or less than\n   * any other node wrapper, using this index\n   */\n  minPost(): NamedNode {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return (NamedNode as any).MIN;\n  }\n\n  /**\n   * @returns a node wrapper that will sort greater than or equal to\n   * any other node wrapper, using this index\n   */\n  abstract maxPost(): NamedNode;\n\n  abstract makePost(indexValue: unknown, name: string): NamedNode;\n\n  /**\n   * @returns String representation for inclusion in a query spec\n   */\n  abstract toString(): string;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Implementation of an immutable SortedMap using a Left-leaning\n * Red-Black Tree, adapted from the implementation in Mugs\n * (http://mads379.github.com/mugs/) by Mads Hartmann Jensen\n * (mads379\\@gmail.com).\n *\n * Original paper on Left-leaning Red-Black Trees:\n *   http://www.cs.princeton.edu/~rs/talks/LLRB/LLRB.pdf\n *\n * Invariant 1: No red node has a red child\n * Invariant 2: Every leaf path has the same number of black nodes\n * Invariant 3: Only the left child can be red (left leaning)\n */\n\n// TODO: There are some improvements I'd like to make to improve memory / perf:\n//  * Create two prototypes, LLRedNode and LLBlackNode, instead of storing a\n//    color property in every node.\n// TODO: It would also be good (and possibly necessary) to create a base\n// interface for LLRBNode and LLRBEmptyNode.\n\nexport type Comparator<K> = (key1: K, key2: K) => number;\n\n/**\n * An iterator over an LLRBNode.\n */\nexport class SortedMapIterator<K, V, T> {\n  private nodeStack_: Array<LLRBNode<K, V> | LLRBEmptyNode<K, V>> = [];\n\n  /**\n   * @param node - Node to iterate.\n   * @param isReverse_ - Whether or not to iterate in reverse\n   */\n  constructor(\n    node: LLRBNode<K, V> | LLRBEmptyNode<K, V>,\n    startKey: K | null,\n    comparator: Comparator<K>,\n    private isReverse_: boolean,\n    private resultGenerator_: ((k: K, v: V) => T) | null = null\n  ) {\n    let cmp = 1;\n    while (!node.isEmpty()) {\n      node = node as LLRBNode<K, V>;\n      cmp = startKey ? comparator(node.key, startKey) : 1;\n      // flip the comparison if we're going in reverse\n      if (isReverse_) {\n        cmp *= -1;\n      }\n\n      if (cmp < 0) {\n        // This node is less than our start key. ignore it\n        if (this.isReverse_) {\n          node = node.left;\n        } else {\n          node = node.right;\n        }\n      } else if (cmp === 0) {\n        // This node is exactly equal to our start key. Push it on the stack, but stop iterating;\n        this.nodeStack_.push(node);\n        break;\n      } else {\n        // This node is greater than our start key, add it to the stack and move to the next one\n        this.nodeStack_.push(node);\n        if (this.isReverse_) {\n          node = node.right;\n        } else {\n          node = node.left;\n        }\n      }\n    }\n  }\n\n  getNext(): T {\n    if (this.nodeStack_.length === 0) {\n      return null;\n    }\n\n    let node = this.nodeStack_.pop();\n    let result: T;\n    if (this.resultGenerator_) {\n      result = this.resultGenerator_(node.key, node.value);\n    } else {\n      result = { key: node.key, value: node.value } as unknown as T;\n    }\n\n    if (this.isReverse_) {\n      node = node.left;\n      while (!node.isEmpty()) {\n        this.nodeStack_.push(node);\n        node = node.right;\n      }\n    } else {\n      node = node.right;\n      while (!node.isEmpty()) {\n        this.nodeStack_.push(node);\n        node = node.left;\n      }\n    }\n\n    return result;\n  }\n\n  hasNext(): boolean {\n    return this.nodeStack_.length > 0;\n  }\n\n  peek(): T {\n    if (this.nodeStack_.length === 0) {\n      return null;\n    }\n\n    const node = this.nodeStack_[this.nodeStack_.length - 1];\n    if (this.resultGenerator_) {\n      return this.resultGenerator_(node.key, node.value);\n    } else {\n      return { key: node.key, value: node.value } as unknown as T;\n    }\n  }\n}\n\n/**\n * Represents a node in a Left-leaning Red-Black tree.\n */\nexport class LLRBNode<K, V> {\n  color: boolean;\n  left: LLRBNode<K, V> | LLRBEmptyNode<K, V>;\n  right: LLRBNode<K, V> | LLRBEmptyNode<K, V>;\n\n  /**\n   * @param key - Key associated with this node.\n   * @param value - Value associated with this node.\n   * @param color - Whether this node is red.\n   * @param left - Left child.\n   * @param right - Right child.\n   */\n  constructor(\n    public key: K,\n    public value: V,\n    color: boolean | null,\n    left?: LLRBNode<K, V> | LLRBEmptyNode<K, V> | null,\n    right?: LLRBNode<K, V> | LLRBEmptyNode<K, V> | null\n  ) {\n    this.color = color != null ? color : LLRBNode.RED;\n    this.left =\n      left != null ? left : (SortedMap.EMPTY_NODE as LLRBEmptyNode<K, V>);\n    this.right =\n      right != null ? right : (SortedMap.EMPTY_NODE as LLRBEmptyNode<K, V>);\n  }\n\n  static RED = true;\n  static BLACK = false;\n\n  /**\n   * Returns a copy of the current node, optionally replacing pieces of it.\n   *\n   * @param key - New key for the node, or null.\n   * @param value - New value for the node, or null.\n   * @param color - New color for the node, or null.\n   * @param left - New left child for the node, or null.\n   * @param right - New right child for the node, or null.\n   * @returns The node copy.\n   */\n  copy(\n    key: K | null,\n    value: V | null,\n    color: boolean | null,\n    left: LLRBNode<K, V> | LLRBEmptyNode<K, V> | null,\n    right: LLRBNode<K, V> | LLRBEmptyNode<K, V> | null\n  ): LLRBNode<K, V> {\n    return new LLRBNode(\n      key != null ? key : this.key,\n      value != null ? value : this.value,\n      color != null ? color : this.color,\n      left != null ? left : this.left,\n      right != null ? right : this.right\n    );\n  }\n\n  /**\n   * @returns The total number of nodes in the tree.\n   */\n  count(): number {\n    return this.left.count() + 1 + this.right.count();\n  }\n\n  /**\n   * @returns True if the tree is empty.\n   */\n  isEmpty(): boolean {\n    return false;\n  }\n\n  /**\n   * Traverses the tree in key order and calls the specified action function\n   * for each node.\n   *\n   * @param action - Callback function to be called for each\n   *   node.  If it returns true, traversal is aborted.\n   * @returns The first truthy value returned by action, or the last falsey\n   *   value returned by action\n   */\n  inorderTraversal(action: (k: K, v: V) => unknown): boolean {\n    return (\n      this.left.inorderTraversal(action) ||\n      !!action(this.key, this.value) ||\n      this.right.inorderTraversal(action)\n    );\n  }\n\n  /**\n   * Traverses the tree in reverse key order and calls the specified action function\n   * for each node.\n   *\n   * @param action - Callback function to be called for each\n   * node.  If it returns true, traversal is aborted.\n   * @returns True if traversal was aborted.\n   */\n  reverseTraversal(action: (k: K, v: V) => void): boolean {\n    return (\n      this.right.reverseTraversal(action) ||\n      action(this.key, this.value) ||\n      this.left.reverseTraversal(action)\n    );\n  }\n\n  /**\n   * @returns The minimum node in the tree.\n   */\n  private min_(): LLRBNode<K, V> {\n    if (this.left.isEmpty()) {\n      return this;\n    } else {\n      return (this.left as LLRBNode<K, V>).min_();\n    }\n  }\n\n  /**\n   * @returns The maximum key in the tree.\n   */\n  minKey(): K {\n    return this.min_().key;\n  }\n\n  /**\n   * @returns The maximum key in the tree.\n   */\n  maxKey(): K {\n    if (this.right.isEmpty()) {\n      return this.key;\n    } else {\n      return this.right.maxKey();\n    }\n  }\n\n  /**\n   * @param key - Key to insert.\n   * @param value - Value to insert.\n   * @param comparator - Comparator.\n   * @returns New tree, with the key/value added.\n   */\n  insert(key: K, value: V, comparator: Comparator<K>): LLRBNode<K, V> {\n    let n: LLRBNode<K, V> = this;\n    const cmp = comparator(key, n.key);\n    if (cmp < 0) {\n      n = n.copy(null, null, null, n.left.insert(key, value, comparator), null);\n    } else if (cmp === 0) {\n      n = n.copy(null, value, null, null, null);\n    } else {\n      n = n.copy(\n        null,\n        null,\n        null,\n        null,\n        n.right.insert(key, value, comparator)\n      );\n    }\n    return n.fixUp_();\n  }\n\n  /**\n   * @returns New tree, with the minimum key removed.\n   */\n  private removeMin_(): LLRBNode<K, V> | LLRBEmptyNode<K, V> {\n    if (this.left.isEmpty()) {\n      return SortedMap.EMPTY_NODE as LLRBEmptyNode<K, V>;\n    }\n    let n: LLRBNode<K, V> = this;\n    if (!n.left.isRed_() && !n.left.left.isRed_()) {\n      n = n.moveRedLeft_();\n    }\n    n = n.copy(null, null, null, (n.left as LLRBNode<K, V>).removeMin_(), null);\n    return n.fixUp_();\n  }\n\n  /**\n   * @param key - The key of the item to remove.\n   * @param comparator - Comparator.\n   * @returns New tree, with the specified item removed.\n   */\n  remove(\n    key: K,\n    comparator: Comparator<K>\n  ): LLRBNode<K, V> | LLRBEmptyNode<K, V> {\n    let n, smallest;\n    n = this;\n    if (comparator(key, n.key) < 0) {\n      if (!n.left.isEmpty() && !n.left.isRed_() && !n.left.left.isRed_()) {\n        n = n.moveRedLeft_();\n      }\n      n = n.copy(null, null, null, n.left.remove(key, comparator), null);\n    } else {\n      if (n.left.isRed_()) {\n        n = n.rotateRight_();\n      }\n      if (!n.right.isEmpty() && !n.right.isRed_() && !n.right.left.isRed_()) {\n        n = n.moveRedRight_();\n      }\n      if (comparator(key, n.key) === 0) {\n        if (n.right.isEmpty()) {\n          return SortedMap.EMPTY_NODE as LLRBEmptyNode<K, V>;\n        } else {\n          smallest = (n.right as LLRBNode<K, V>).min_();\n          n = n.copy(\n            smallest.key,\n            smallest.value,\n            null,\n            null,\n            (n.right as LLRBNode<K, V>).removeMin_()\n          );\n        }\n      }\n      n = n.copy(null, null, null, null, n.right.remove(key, comparator));\n    }\n    return n.fixUp_();\n  }\n\n  /**\n   * @returns Whether this is a RED node.\n   */\n  isRed_(): boolean {\n    return this.color;\n  }\n\n  /**\n   * @returns New tree after performing any needed rotations.\n   */\n  private fixUp_(): LLRBNode<K, V> {\n    let n: LLRBNode<K, V> = this;\n    if (n.right.isRed_() && !n.left.isRed_()) {\n      n = n.rotateLeft_();\n    }\n    if (n.left.isRed_() && n.left.left.isRed_()) {\n      n = n.rotateRight_();\n    }\n    if (n.left.isRed_() && n.right.isRed_()) {\n      n = n.colorFlip_();\n    }\n    return n;\n  }\n\n  /**\n   * @returns New tree, after moveRedLeft.\n   */\n  private moveRedLeft_(): LLRBNode<K, V> {\n    let n = this.colorFlip_();\n    if (n.right.left.isRed_()) {\n      n = n.copy(\n        null,\n        null,\n        null,\n        null,\n        (n.right as LLRBNode<K, V>).rotateRight_()\n      );\n      n = n.rotateLeft_();\n      n = n.colorFlip_();\n    }\n    return n;\n  }\n\n  /**\n   * @returns New tree, after moveRedRight.\n   */\n  private moveRedRight_(): LLRBNode<K, V> {\n    let n = this.colorFlip_();\n    if (n.left.left.isRed_()) {\n      n = n.rotateRight_();\n      n = n.colorFlip_();\n    }\n    return n;\n  }\n\n  /**\n   * @returns New tree, after rotateLeft.\n   */\n  private rotateLeft_(): LLRBNode<K, V> {\n    const nl = this.copy(null, null, LLRBNode.RED, null, this.right.left);\n    return this.right.copy(null, null, this.color, nl, null) as LLRBNode<K, V>;\n  }\n\n  /**\n   * @returns New tree, after rotateRight.\n   */\n  private rotateRight_(): LLRBNode<K, V> {\n    const nr = this.copy(null, null, LLRBNode.RED, this.left.right, null);\n    return this.left.copy(null, null, this.color, null, nr) as LLRBNode<K, V>;\n  }\n\n  /**\n   * @returns Newt ree, after colorFlip.\n   */\n  private colorFlip_(): LLRBNode<K, V> {\n    const left = this.left.copy(null, null, !this.left.color, null, null);\n    const right = this.right.copy(null, null, !this.right.color, null, null);\n    return this.copy(null, null, !this.color, left, right);\n  }\n\n  /**\n   * For testing.\n   *\n   * @returns True if all is well.\n   */\n  private checkMaxDepth_(): boolean {\n    const blackDepth = this.check_();\n    return Math.pow(2.0, blackDepth) <= this.count() + 1;\n  }\n\n  check_(): number {\n    if (this.isRed_() && this.left.isRed_()) {\n      throw new Error(\n        'Red node has red child(' + this.key + ',' + this.value + ')'\n      );\n    }\n    if (this.right.isRed_()) {\n      throw new Error(\n        'Right child of (' + this.key + ',' + this.value + ') is red'\n      );\n    }\n    const blackDepth = this.left.check_();\n    if (blackDepth !== this.right.check_()) {\n      throw new Error('Black depths differ');\n    } else {\n      return blackDepth + (this.isRed_() ? 0 : 1);\n    }\n  }\n}\n\n/**\n * Represents an empty node (a leaf node in the Red-Black Tree).\n */\nexport class LLRBEmptyNode<K, V> {\n  key: K;\n  value: V;\n  left: LLRBNode<K, V> | LLRBEmptyNode<K, V>;\n  right: LLRBNode<K, V> | LLRBEmptyNode<K, V>;\n  color: boolean;\n\n  /**\n   * Returns a copy of the current node.\n   *\n   * @returns The node copy.\n   */\n  copy(\n    key: K | null,\n    value: V | null,\n    color: boolean | null,\n    left: LLRBNode<K, V> | LLRBEmptyNode<K, V> | null,\n    right: LLRBNode<K, V> | LLRBEmptyNode<K, V> | null\n  ): LLRBEmptyNode<K, V> {\n    return this;\n  }\n\n  /**\n   * Returns a copy of the tree, with the specified key/value added.\n   *\n   * @param key - Key to be added.\n   * @param value - Value to be added.\n   * @param comparator - Comparator.\n   * @returns New tree, with item added.\n   */\n  insert(key: K, value: V, comparator: Comparator<K>): LLRBNode<K, V> {\n    return new LLRBNode(key, value, null);\n  }\n\n  /**\n   * Returns a copy of the tree, with the specified key removed.\n   *\n   * @param key - The key to remove.\n   * @param comparator - Comparator.\n   * @returns New tree, with item removed.\n   */\n  remove(key: K, comparator: Comparator<K>): LLRBEmptyNode<K, V> {\n    return this;\n  }\n\n  /**\n   * @returns The total number of nodes in the tree.\n   */\n  count(): number {\n    return 0;\n  }\n\n  /**\n   * @returns True if the tree is empty.\n   */\n  isEmpty(): boolean {\n    return true;\n  }\n\n  /**\n   * Traverses the tree in key order and calls the specified action function\n   * for each node.\n   *\n   * @param action - Callback function to be called for each\n   * node.  If it returns true, traversal is aborted.\n   * @returns True if traversal was aborted.\n   */\n  inorderTraversal(action: (k: K, v: V) => unknown): boolean {\n    return false;\n  }\n\n  /**\n   * Traverses the tree in reverse key order and calls the specified action function\n   * for each node.\n   *\n   * @param action - Callback function to be called for each\n   * node.  If it returns true, traversal is aborted.\n   * @returns True if traversal was aborted.\n   */\n  reverseTraversal(action: (k: K, v: V) => void): boolean {\n    return false;\n  }\n\n  minKey(): null {\n    return null;\n  }\n\n  maxKey(): null {\n    return null;\n  }\n\n  check_(): number {\n    return 0;\n  }\n\n  /**\n   * @returns Whether this node is red.\n   */\n  isRed_() {\n    return false;\n  }\n}\n\n/**\n * An immutable sorted map implementation, based on a Left-leaning Red-Black\n * tree.\n */\nexport class SortedMap<K, V> {\n  /**\n   * Always use the same empty node, to reduce memory.\n   */\n  static EMPTY_NODE = new LLRBEmptyNode();\n\n  /**\n   * @param comparator_ - Key comparator.\n   * @param root_ - Optional root node for the map.\n   */\n  constructor(\n    private comparator_: Comparator<K>,\n    private root_:\n      | LLRBNode<K, V>\n      | LLRBEmptyNode<K, V> = SortedMap.EMPTY_NODE as LLRBEmptyNode<K, V>\n  ) {}\n\n  /**\n   * Returns a copy of the map, with the specified key/value added or replaced.\n   * (TODO: We should perhaps rename this method to 'put')\n   *\n   * @param key - Key to be added.\n   * @param value - Value to be added.\n   * @returns New map, with item added.\n   */\n  insert(key: K, value: V): SortedMap<K, V> {\n    return new SortedMap(\n      this.comparator_,\n      this.root_\n        .insert(key, value, this.comparator_)\n        .copy(null, null, LLRBNode.BLACK, null, null)\n    );\n  }\n\n  /**\n   * Returns a copy of the map, with the specified key removed.\n   *\n   * @param key - The key to remove.\n   * @returns New map, with item removed.\n   */\n  remove(key: K): SortedMap<K, V> {\n    return new SortedMap(\n      this.comparator_,\n      this.root_\n        .remove(key, this.comparator_)\n        .copy(null, null, LLRBNode.BLACK, null, null)\n    );\n  }\n\n  /**\n   * Returns the value of the node with the given key, or null.\n   *\n   * @param key - The key to look up.\n   * @returns The value of the node with the given key, or null if the\n   * key doesn't exist.\n   */\n  get(key: K): V | null {\n    let cmp;\n    let node = this.root_;\n    while (!node.isEmpty()) {\n      cmp = this.comparator_(key, node.key);\n      if (cmp === 0) {\n        return node.value;\n      } else if (cmp < 0) {\n        node = node.left;\n      } else if (cmp > 0) {\n        node = node.right;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Returns the key of the item *before* the specified key, or null if key is the first item.\n   * @param key - The key to find the predecessor of\n   * @returns The predecessor key.\n   */\n  getPredecessorKey(key: K): K | null {\n    let cmp,\n      node = this.root_,\n      rightParent = null;\n    while (!node.isEmpty()) {\n      cmp = this.comparator_(key, node.key);\n      if (cmp === 0) {\n        if (!node.left.isEmpty()) {\n          node = node.left;\n          while (!node.right.isEmpty()) {\n            node = node.right;\n          }\n          return node.key;\n        } else if (rightParent) {\n          return rightParent.key;\n        } else {\n          return null; // first item.\n        }\n      } else if (cmp < 0) {\n        node = node.left;\n      } else if (cmp > 0) {\n        rightParent = node;\n        node = node.right;\n      }\n    }\n\n    throw new Error(\n      'Attempted to find predecessor key for a nonexistent key.  What gives?'\n    );\n  }\n\n  /**\n   * @returns True if the map is empty.\n   */\n  isEmpty(): boolean {\n    return this.root_.isEmpty();\n  }\n\n  /**\n   * @returns The total number of nodes in the map.\n   */\n  count(): number {\n    return this.root_.count();\n  }\n\n  /**\n   * @returns The minimum key in the map.\n   */\n  minKey(): K | null {\n    return this.root_.minKey();\n  }\n\n  /**\n   * @returns The maximum key in the map.\n   */\n  maxKey(): K | null {\n    return this.root_.maxKey();\n  }\n\n  /**\n   * Traverses the map in key order and calls the specified action function\n   * for each key/value pair.\n   *\n   * @param action - Callback function to be called\n   * for each key/value pair.  If action returns true, traversal is aborted.\n   * @returns The first truthy value returned by action, or the last falsey\n   *   value returned by action\n   */\n  inorderTraversal(action: (k: K, v: V) => unknown): boolean {\n    return this.root_.inorderTraversal(action);\n  }\n\n  /**\n   * Traverses the map in reverse key order and calls the specified action function\n   * for each key/value pair.\n   *\n   * @param action - Callback function to be called\n   * for each key/value pair.  If action returns true, traversal is aborted.\n   * @returns True if the traversal was aborted.\n   */\n  reverseTraversal(action: (k: K, v: V) => void): boolean {\n    return this.root_.reverseTraversal(action);\n  }\n\n  /**\n   * Returns an iterator over the SortedMap.\n   * @returns The iterator.\n   */\n  getIterator<T>(\n    resultGenerator?: (k: K, v: V) => T\n  ): SortedMapIterator<K, V, T> {\n    return new SortedMapIterator(\n      this.root_,\n      null,\n      this.comparator_,\n      false,\n      resultGenerator\n    );\n  }\n\n  getIteratorFrom<T>(\n    key: K,\n    resultGenerator?: (k: K, v: V) => T\n  ): SortedMapIterator<K, V, T> {\n    return new SortedMapIterator(\n      this.root_,\n      key,\n      this.comparator_,\n      false,\n      resultGenerator\n    );\n  }\n\n  getReverseIteratorFrom<T>(\n    key: K,\n    resultGenerator?: (k: K, v: V) => T\n  ): SortedMapIterator<K, V, T> {\n    return new SortedMapIterator(\n      this.root_,\n      key,\n      this.comparator_,\n      true,\n      resultGenerator\n    );\n  }\n\n  getReverseIterator<T>(\n    resultGenerator?: (k: K, v: V) => T\n  ): SortedMapIterator<K, V, T> {\n    return new SortedMapIterator(\n      this.root_,\n      null,\n      this.comparator_,\n      true,\n      resultGenerator\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, contains } from '@firebase/util';\n\nimport { Indexable } from '../util/misc';\nimport { doubleToIEEE754String } from '../util/util';\n\nimport { Node } from './Node';\n\nlet MAX_NODE: Node;\n\nexport function setMaxNode(val: Node) {\n  MAX_NODE = val;\n}\n\nexport const priorityHashText = function (priority: string | number): string {\n  if (typeof priority === 'number') {\n    return 'number:' + doubleToIEEE754String(priority);\n  } else {\n    return 'string:' + priority;\n  }\n};\n\n/**\n * Validates that a priority snapshot Node is valid.\n */\nexport const validatePriorityNode = function (priorityNode: Node) {\n  if (priorityNode.isLeafNode()) {\n    const val = priorityNode.val();\n    assert(\n      typeof val === 'string' ||\n        typeof val === 'number' ||\n        (typeof val === 'object' && contains(val as Indexable, '.sv')),\n      'Priority must be a string or number.'\n    );\n  } else {\n    assert(\n      priorityNode === MAX_NODE || priorityNode.isEmpty(),\n      'priority of unexpected type.'\n    );\n  }\n  // Don't call getPriority() on MAX_NODE to avoid hitting assertion.\n  assert(\n    priorityNode === MAX_NODE || priorityNode.getPriority().isEmpty(),\n    \"Priority nodes can't have a priority of their own.\"\n  );\n};\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { nameCompare } from '../util/util';\n\nimport { NamedNode } from './Node';\n\nexport function NAME_ONLY_COMPARATOR(left: NamedNode, right: NamedNode) {\n  return nameCompare(left.name, right.name);\n}\n\nexport function NAME_COMPARATOR(left: string, right: string) {\n  return nameCompare(left, right);\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { Indexable } from '../util/misc';\nimport {\n  Path,\n  pathGetFront,\n  pathGetLength,\n  pathIsEmpty,\n  pathPopFront\n} from '../util/Path';\nimport { doubleToIEEE754String, sha1 } from '../util/util';\n\nimport { ChildrenNodeConstructor } from './ChildrenNode';\nimport { Index } from './indexes/Index';\nimport { Node } from './Node';\nimport { priorityHashText, validatePriorityNode } from './snap';\n\nlet __childrenNodeConstructor: ChildrenNodeConstructor;\n\n/**\n * LeafNode is a class for storing leaf nodes in a DataSnapshot.  It\n * implements Node and stores the value of the node (a string,\n * number, or boolean) accessible via getValue().\n */\nexport class LeafNode implements Node {\n  static set __childrenNodeConstructor(val: ChildrenNodeConstructor) {\n    __childrenNodeConstructor = val;\n  }\n\n  static get __childrenNodeConstructor() {\n    return __childrenNodeConstructor;\n  }\n\n  /**\n   * The sort order for comparing leaf nodes of different types. If two leaf nodes have\n   * the same type, the comparison falls back to their value\n   */\n  static VALUE_TYPE_ORDER = ['object', 'boolean', 'number', 'string'];\n\n  private lazyHash_: string | null = null;\n\n  /**\n   * @param value_ - The value to store in this leaf node. The object type is\n   * possible in the event of a deferred value\n   * @param priorityNode_ - The priority of this node.\n   */\n  constructor(\n    private readonly value_: string | number | boolean | Indexable,\n    private priorityNode_: Node = LeafNode.__childrenNodeConstructor.EMPTY_NODE\n  ) {\n    assert(\n      this.value_ !== undefined && this.value_ !== null,\n      \"LeafNode shouldn't be created with null/undefined value.\"\n    );\n\n    validatePriorityNode(this.priorityNode_);\n  }\n\n  /** @inheritDoc */\n  isLeafNode(): boolean {\n    return true;\n  }\n\n  /** @inheritDoc */\n  getPriority(): Node {\n    return this.priorityNode_;\n  }\n\n  /** @inheritDoc */\n  updatePriority(newPriorityNode: Node): Node {\n    return new LeafNode(this.value_, newPriorityNode);\n  }\n\n  /** @inheritDoc */\n  getImmediateChild(childName: string): Node {\n    // Hack to treat priority as a regular child\n    if (childName === '.priority') {\n      return this.priorityNode_;\n    } else {\n      return LeafNode.__childrenNodeConstructor.EMPTY_NODE;\n    }\n  }\n\n  /** @inheritDoc */\n  getChild(path: Path): Node {\n    if (pathIsEmpty(path)) {\n      return this;\n    } else if (pathGetFront(path) === '.priority') {\n      return this.priorityNode_;\n    } else {\n      return LeafNode.__childrenNodeConstructor.EMPTY_NODE;\n    }\n  }\n  hasChild(): boolean {\n    return false;\n  }\n\n  /** @inheritDoc */\n  getPredecessorChildName(childName: string, childNode: Node): null {\n    return null;\n  }\n\n  /** @inheritDoc */\n  updateImmediateChild(childName: string, newChildNode: Node): Node {\n    if (childName === '.priority') {\n      return this.updatePriority(newChildNode);\n    } else if (newChildNode.isEmpty() && childName !== '.priority') {\n      return this;\n    } else {\n      return LeafNode.__childrenNodeConstructor.EMPTY_NODE.updateImmediateChild(\n        childName,\n        newChildNode\n      ).updatePriority(this.priorityNode_);\n    }\n  }\n\n  /** @inheritDoc */\n  updateChild(path: Path, newChildNode: Node): Node {\n    const front = pathGetFront(path);\n    if (front === null) {\n      return newChildNode;\n    } else if (newChildNode.isEmpty() && front !== '.priority') {\n      return this;\n    } else {\n      assert(\n        front !== '.priority' || pathGetLength(path) === 1,\n        '.priority must be the last token in a path'\n      );\n\n      return this.updateImmediateChild(\n        front,\n        LeafNode.__childrenNodeConstructor.EMPTY_NODE.updateChild(\n          pathPopFront(path),\n          newChildNode\n        )\n      );\n    }\n  }\n\n  /** @inheritDoc */\n  isEmpty(): boolean {\n    return false;\n  }\n\n  /** @inheritDoc */\n  numChildren(): number {\n    return 0;\n  }\n\n  /** @inheritDoc */\n  forEachChild(index: Index, action: (s: string, n: Node) => void): boolean {\n    return false;\n  }\n  val(exportFormat?: boolean): {} {\n    if (exportFormat && !this.getPriority().isEmpty()) {\n      return {\n        '.value': this.getValue(),\n        '.priority': this.getPriority().val()\n      };\n    } else {\n      return this.getValue();\n    }\n  }\n\n  /** @inheritDoc */\n  hash(): string {\n    if (this.lazyHash_ === null) {\n      let toHash = '';\n      if (!this.priorityNode_.isEmpty()) {\n        toHash +=\n          'priority:' +\n          priorityHashText(this.priorityNode_.val() as number | string) +\n          ':';\n      }\n\n      const type = typeof this.value_;\n      toHash += type + ':';\n      if (type === 'number') {\n        toHash += doubleToIEEE754String(this.value_ as number);\n      } else {\n        toHash += this.value_;\n      }\n      this.lazyHash_ = sha1(toHash);\n    }\n    return this.lazyHash_;\n  }\n\n  /**\n   * Returns the value of the leaf node.\n   * @returns The value of the node.\n   */\n  getValue(): Indexable | string | number | boolean {\n    return this.value_;\n  }\n  compareTo(other: Node): number {\n    if (other === LeafNode.__childrenNodeConstructor.EMPTY_NODE) {\n      return 1;\n    } else if (other instanceof LeafNode.__childrenNodeConstructor) {\n      return -1;\n    } else {\n      assert(other.isLeafNode(), 'Unknown node type');\n      return this.compareToLeafNode_(other as LeafNode);\n    }\n  }\n\n  /**\n   * Comparison specifically for two leaf nodes\n   */\n  private compareToLeafNode_(otherLeaf: LeafNode): number {\n    const otherLeafType = typeof otherLeaf.value_;\n    const thisLeafType = typeof this.value_;\n    const otherIndex = LeafNode.VALUE_TYPE_ORDER.indexOf(otherLeafType);\n    const thisIndex = LeafNode.VALUE_TYPE_ORDER.indexOf(thisLeafType);\n    assert(otherIndex >= 0, 'Unknown leaf type: ' + otherLeafType);\n    assert(thisIndex >= 0, 'Unknown leaf type: ' + thisLeafType);\n    if (otherIndex === thisIndex) {\n      // Same type, compare values\n      if (thisLeafType === 'object') {\n        // Deferred value nodes are all equal, but we should also never get to this point...\n        return 0;\n      } else {\n        // Note that this works because true > false, all others are number or string comparisons\n        if (this.value_ < otherLeaf.value_) {\n          return -1;\n        } else if (this.value_ === otherLeaf.value_) {\n          return 0;\n        } else {\n          return 1;\n        }\n      }\n    } else {\n      return thisIndex - otherIndex;\n    }\n  }\n  withIndex(): Node {\n    return this;\n  }\n  isIndexed(): boolean {\n    return true;\n  }\n  equals(other: Node): boolean {\n    if (other === this) {\n      return true;\n    } else if (other.isLeafNode()) {\n      const otherLeaf = other as LeafNode;\n      return (\n        this.value_ === otherLeaf.value_ &&\n        this.priorityNode_.equals(otherLeaf.priorityNode_)\n      );\n    } else {\n      return false;\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { nameCompare, MAX_NAME } from '../../util/util';\nimport { LeafNode } from '../LeafNode';\nimport { NamedNode, Node } from '../Node';\n\nimport { Index } from './Index';\n\nlet nodeFromJSON: (a: unknown) => Node;\nlet MAX_NODE: Node;\n\nexport function setNodeFromJSON(val: (a: unknown) => Node) {\n  nodeFromJSON = val;\n}\n\nexport function setMaxNode(val: Node) {\n  MAX_NODE = val;\n}\n\nexport class PriorityIndex extends Index {\n  compare(a: NamedNode, b: NamedNode): number {\n    const aPriority = a.node.getPriority();\n    const bPriority = b.node.getPriority();\n    const indexCmp = aPriority.compareTo(bPriority);\n    if (indexCmp === 0) {\n      return nameCompare(a.name, b.name);\n    } else {\n      return indexCmp;\n    }\n  }\n  isDefinedOn(node: Node): boolean {\n    return !node.getPriority().isEmpty();\n  }\n  indexedValueChanged(oldNode: Node, newNode: Node): boolean {\n    return !oldNode.getPriority().equals(newNode.getPriority());\n  }\n  minPost(): NamedNode {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return (NamedNode as any).MIN;\n  }\n  maxPost(): NamedNode {\n    return new NamedNode(MAX_NAME, new LeafNode('[PRIORITY-POST]', MAX_NODE));\n  }\n\n  makePost(indexValue: unknown, name: string): NamedNode {\n    const priorityNode = nodeFromJSON(indexValue);\n    return new NamedNode(name, new LeafNode('[PRIORITY-POST]', priorityNode));\n  }\n\n  /**\n   * @returns String representation for inclusion in a query spec\n   */\n  toString(): string {\n    return '.priority';\n  }\n}\n\nexport const PRIORITY_INDEX = new PriorityIndex();\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, contains, map, safeGet } from '@firebase/util';\n\nimport { SortedMap } from '../util/SortedMap';\n\nimport { buildChildSet } from './childSet';\nimport { Index } from './indexes/Index';\nimport { KEY_INDEX } from './indexes/KeyIndex';\nimport { PRIORITY_INDEX } from './indexes/PriorityIndex';\nimport { NamedNode, Node } from './Node';\n\nlet _defaultIndexMap: IndexMap;\n\nconst fallbackObject = {};\n\nexport class IndexMap {\n  /**\n   * The default IndexMap for nodes without a priority\n   */\n  static get Default(): IndexMap {\n    assert(\n      fallbackObject && PRIORITY_INDEX,\n      'ChildrenNode.ts has not been loaded'\n    );\n    _defaultIndexMap =\n      _defaultIndexMap ||\n      new IndexMap(\n        { '.priority': fallbackObject },\n        { '.priority': PRIORITY_INDEX }\n      );\n    return _defaultIndexMap;\n  }\n\n  constructor(\n    private indexes_: {\n      [k: string]: SortedMap<NamedNode, Node> | /*FallbackType*/ object;\n    },\n    private indexSet_: { [k: string]: Index }\n  ) {}\n\n  get(indexKey: string): SortedMap<NamedNode, Node> | null {\n    const sortedMap = safeGet(this.indexes_, indexKey);\n    if (!sortedMap) {\n      throw new Error('No index defined for ' + indexKey);\n    }\n\n    if (sortedMap instanceof SortedMap) {\n      return sortedMap;\n    } else {\n      // The index exists, but it falls back to just name comparison. Return null so that the calling code uses the\n      // regular child map\n      return null;\n    }\n  }\n\n  hasIndex(indexDefinition: Index): boolean {\n    return contains(this.indexSet_, indexDefinition.toString());\n  }\n\n  addIndex(\n    indexDefinition: Index,\n    existingChildren: SortedMap<string, Node>\n  ): IndexMap {\n    assert(\n      indexDefinition !== KEY_INDEX,\n      \"KeyIndex always exists and isn't meant to be added to the IndexMap.\"\n    );\n    const childList = [];\n    let sawIndexedValue = false;\n    const iter = existingChildren.getIterator(NamedNode.Wrap);\n    let next = iter.getNext();\n    while (next) {\n      sawIndexedValue =\n        sawIndexedValue || indexDefinition.isDefinedOn(next.node);\n      childList.push(next);\n      next = iter.getNext();\n    }\n    let newIndex;\n    if (sawIndexedValue) {\n      newIndex = buildChildSet(childList, indexDefinition.getCompare());\n    } else {\n      newIndex = fallbackObject;\n    }\n    const indexName = indexDefinition.toString();\n    const newIndexSet = { ...this.indexSet_ };\n    newIndexSet[indexName] = indexDefinition;\n    const newIndexes = { ...this.indexes_ };\n    newIndexes[indexName] = newIndex;\n    return new IndexMap(newIndexes, newIndexSet);\n  }\n\n  /**\n   * Ensure that this node is properly tracked in any indexes that we're maintaining\n   */\n  addToIndexes(\n    namedNode: NamedNode,\n    existingChildren: SortedMap<string, Node>\n  ): IndexMap {\n    const newIndexes = map(\n      this.indexes_,\n      (indexedChildren: SortedMap<NamedNode, Node>, indexName: string) => {\n        const index = safeGet(this.indexSet_, indexName);\n        assert(index, 'Missing index implementation for ' + indexName);\n        if (indexedChildren === fallbackObject) {\n          // Check to see if we need to index everything\n          if (index.isDefinedOn(namedNode.node)) {\n            // We need to build this index\n            const childList = [];\n            const iter = existingChildren.getIterator(NamedNode.Wrap);\n            let next = iter.getNext();\n            while (next) {\n              if (next.name !== namedNode.name) {\n                childList.push(next);\n              }\n              next = iter.getNext();\n            }\n            childList.push(namedNode);\n            return buildChildSet(childList, index.getCompare());\n          } else {\n            // No change, this remains a fallback\n            return fallbackObject;\n          }\n        } else {\n          const existingSnap = existingChildren.get(namedNode.name);\n          let newChildren = indexedChildren;\n          if (existingSnap) {\n            newChildren = newChildren.remove(\n              new NamedNode(namedNode.name, existingSnap)\n            );\n          }\n          return newChildren.insert(namedNode, namedNode.node);\n        }\n      }\n    );\n    return new IndexMap(newIndexes, this.indexSet_);\n  }\n\n  /**\n   * Create a new IndexMap instance with the given value removed\n   */\n  removeFromIndexes(\n    namedNode: NamedNode,\n    existingChildren: SortedMap<string, Node>\n  ): IndexMap {\n    const newIndexes = map(\n      this.indexes_,\n      (indexedChildren: SortedMap<NamedNode, Node>) => {\n        if (indexedChildren === fallbackObject) {\n          // This is the fallback. Just return it, nothing to do in this case\n          return indexedChildren;\n        } else {\n          const existingSnap = existingChildren.get(namedNode.name);\n          if (existingSnap) {\n            return indexedChildren.remove(\n              new NamedNode(namedNode.name, existingSnap)\n            );\n          } else {\n            // No record of this child\n            return indexedChildren;\n          }\n        }\n      }\n    );\n    return new IndexMap(newIndexes, this.indexSet_);\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { Path, pathGetFront, pathGetLength, pathPopFront } from '../util/Path';\nimport { SortedMap, SortedMapIterator } from '../util/SortedMap';\nimport { MAX_NAME, MIN_NAME, sha1 } from '../util/util';\n\nimport { NAME_COMPARATOR } from './comparators';\nimport { Index } from './indexes/Index';\nimport { KEY_INDEX, KeyIndex } from './indexes/KeyIndex';\nimport {\n  PRIORITY_INDEX,\n  setMaxNode as setPriorityMaxNode\n} from './indexes/PriorityIndex';\nimport { IndexMap } from './IndexMap';\nimport { LeafNode } from './LeafNode';\nimport { NamedNode, Node } from './Node';\nimport { priorityHashText, setMaxNode, validatePriorityNode } from './snap';\n\nexport interface ChildrenNodeConstructor {\n  new (\n    children_: SortedMap<string, Node>,\n    priorityNode_: Node | null,\n    indexMap_: IndexMap\n  ): ChildrenNode;\n  EMPTY_NODE: ChildrenNode;\n}\n\n// TODO: For memory savings, don't store priorityNode_ if it's empty.\n\nlet EMPTY_NODE: ChildrenNode;\n\n/**\n * ChildrenNode is a class for storing internal nodes in a DataSnapshot\n * (i.e. nodes with children).  It implements Node and stores the\n * list of children in the children property, sorted by child name.\n */\nexport class ChildrenNode implements Node {\n  private lazyHash_: string | null = null;\n\n  static get EMPTY_NODE(): ChildrenNode {\n    return (\n      EMPTY_NODE ||\n      (EMPTY_NODE = new ChildrenNode(\n        new SortedMap<string, Node>(NAME_COMPARATOR),\n        null,\n        IndexMap.Default\n      ))\n    );\n  }\n\n  /**\n   * @param children_ - List of children of this node..\n   * @param priorityNode_ - The priority of this node (as a snapshot node).\n   */\n  constructor(\n    private readonly children_: SortedMap<string, Node>,\n    private readonly priorityNode_: Node | null,\n    private indexMap_: IndexMap\n  ) {\n    /**\n     * Note: The only reason we allow null priority is for EMPTY_NODE, since we can't use\n     * EMPTY_NODE as the priority of EMPTY_NODE.  We might want to consider making EMPTY_NODE its own\n     * class instead of an empty ChildrenNode.\n     */\n    if (this.priorityNode_) {\n      validatePriorityNode(this.priorityNode_);\n    }\n\n    if (this.children_.isEmpty()) {\n      assert(\n        !this.priorityNode_ || this.priorityNode_.isEmpty(),\n        'An empty node cannot have a priority'\n      );\n    }\n  }\n\n  /** @inheritDoc */\n  isLeafNode(): boolean {\n    return false;\n  }\n\n  /** @inheritDoc */\n  getPriority(): Node {\n    return this.priorityNode_ || EMPTY_NODE;\n  }\n\n  /** @inheritDoc */\n  updatePriority(newPriorityNode: Node): Node {\n    if (this.children_.isEmpty()) {\n      // Don't allow priorities on empty nodes\n      return this;\n    } else {\n      return new ChildrenNode(this.children_, newPriorityNode, this.indexMap_);\n    }\n  }\n\n  /** @inheritDoc */\n  getImmediateChild(childName: string): Node {\n    // Hack to treat priority as a regular child\n    if (childName === '.priority') {\n      return this.getPriority();\n    } else {\n      const child = this.children_.get(childName);\n      return child === null ? EMPTY_NODE : child;\n    }\n  }\n\n  /** @inheritDoc */\n  getChild(path: Path): Node {\n    const front = pathGetFront(path);\n    if (front === null) {\n      return this;\n    }\n\n    return this.getImmediateChild(front).getChild(pathPopFront(path));\n  }\n\n  /** @inheritDoc */\n  hasChild(childName: string): boolean {\n    return this.children_.get(childName) !== null;\n  }\n\n  /** @inheritDoc */\n  updateImmediateChild(childName: string, newChildNode: Node): Node {\n    assert(newChildNode, 'We should always be passing snapshot nodes');\n    if (childName === '.priority') {\n      return this.updatePriority(newChildNode);\n    } else {\n      const namedNode = new NamedNode(childName, newChildNode);\n      let newChildren, newIndexMap;\n      if (newChildNode.isEmpty()) {\n        newChildren = this.children_.remove(childName);\n        newIndexMap = this.indexMap_.removeFromIndexes(\n          namedNode,\n          this.children_\n        );\n      } else {\n        newChildren = this.children_.insert(childName, newChildNode);\n        newIndexMap = this.indexMap_.addToIndexes(namedNode, this.children_);\n      }\n\n      const newPriority = newChildren.isEmpty()\n        ? EMPTY_NODE\n        : this.priorityNode_;\n      return new ChildrenNode(newChildren, newPriority, newIndexMap);\n    }\n  }\n\n  /** @inheritDoc */\n  updateChild(path: Path, newChildNode: Node): Node {\n    const front = pathGetFront(path);\n    if (front === null) {\n      return newChildNode;\n    } else {\n      assert(\n        pathGetFront(path) !== '.priority' || pathGetLength(path) === 1,\n        '.priority must be the last token in a path'\n      );\n      const newImmediateChild = this.getImmediateChild(front).updateChild(\n        pathPopFront(path),\n        newChildNode\n      );\n      return this.updateImmediateChild(front, newImmediateChild);\n    }\n  }\n\n  /** @inheritDoc */\n  isEmpty(): boolean {\n    return this.children_.isEmpty();\n  }\n\n  /** @inheritDoc */\n  numChildren(): number {\n    return this.children_.count();\n  }\n\n  private static INTEGER_REGEXP_ = /^(0|[1-9]\\d*)$/;\n\n  /** @inheritDoc */\n  val(exportFormat?: boolean): object {\n    if (this.isEmpty()) {\n      return null;\n    }\n\n    const obj: { [k: string]: unknown } = {};\n    let numKeys = 0,\n      maxKey = 0,\n      allIntegerKeys = true;\n    this.forEachChild(PRIORITY_INDEX, (key: string, childNode: Node) => {\n      obj[key] = childNode.val(exportFormat);\n\n      numKeys++;\n      if (allIntegerKeys && ChildrenNode.INTEGER_REGEXP_.test(key)) {\n        maxKey = Math.max(maxKey, Number(key));\n      } else {\n        allIntegerKeys = false;\n      }\n    });\n\n    if (!exportFormat && allIntegerKeys && maxKey < 2 * numKeys) {\n      // convert to array.\n      const array: unknown[] = [];\n      // eslint-disable-next-line guard-for-in\n      for (const key in obj) {\n        array[key as unknown as number] = obj[key];\n      }\n\n      return array;\n    } else {\n      if (exportFormat && !this.getPriority().isEmpty()) {\n        obj['.priority'] = this.getPriority().val();\n      }\n      return obj;\n    }\n  }\n\n  /** @inheritDoc */\n  hash(): string {\n    if (this.lazyHash_ === null) {\n      let toHash = '';\n      if (!this.getPriority().isEmpty()) {\n        toHash +=\n          'priority:' +\n          priorityHashText(this.getPriority().val() as string | number) +\n          ':';\n      }\n\n      this.forEachChild(PRIORITY_INDEX, (key, childNode) => {\n        const childHash = childNode.hash();\n        if (childHash !== '') {\n          toHash += ':' + key + ':' + childHash;\n        }\n      });\n\n      this.lazyHash_ = toHash === '' ? '' : sha1(toHash);\n    }\n    return this.lazyHash_;\n  }\n\n  /** @inheritDoc */\n  getPredecessorChildName(\n    childName: string,\n    childNode: Node,\n    index: Index\n  ): string {\n    const idx = this.resolveIndex_(index);\n    if (idx) {\n      const predecessor = idx.getPredecessorKey(\n        new NamedNode(childName, childNode)\n      );\n      return predecessor ? predecessor.name : null;\n    } else {\n      return this.children_.getPredecessorKey(childName);\n    }\n  }\n\n  getFirstChildName(indexDefinition: Index): string | null {\n    const idx = this.resolveIndex_(indexDefinition);\n    if (idx) {\n      const minKey = idx.minKey();\n      return minKey && minKey.name;\n    } else {\n      return this.children_.minKey();\n    }\n  }\n\n  getFirstChild(indexDefinition: Index): NamedNode | null {\n    const minKey = this.getFirstChildName(indexDefinition);\n    if (minKey) {\n      return new NamedNode(minKey, this.children_.get(minKey));\n    } else {\n      return null;\n    }\n  }\n\n  /**\n   * Given an index, return the key name of the largest value we have, according to that index\n   */\n  getLastChildName(indexDefinition: Index): string | null {\n    const idx = this.resolveIndex_(indexDefinition);\n    if (idx) {\n      const maxKey = idx.maxKey();\n      return maxKey && maxKey.name;\n    } else {\n      return this.children_.maxKey();\n    }\n  }\n\n  getLastChild(indexDefinition: Index): NamedNode | null {\n    const maxKey = this.getLastChildName(indexDefinition);\n    if (maxKey) {\n      return new NamedNode(maxKey, this.children_.get(maxKey));\n    } else {\n      return null;\n    }\n  }\n  forEachChild(\n    index: Index,\n    action: (key: string, node: Node) => boolean | void\n  ): boolean {\n    const idx = this.resolveIndex_(index);\n    if (idx) {\n      return idx.inorderTraversal(wrappedNode => {\n        return action(wrappedNode.name, wrappedNode.node);\n      });\n    } else {\n      return this.children_.inorderTraversal(action);\n    }\n  }\n\n  getIterator(\n    indexDefinition: Index\n  ): SortedMapIterator<string | NamedNode, Node, NamedNode> {\n    return this.getIteratorFrom(indexDefinition.minPost(), indexDefinition);\n  }\n\n  getIteratorFrom(\n    startPost: NamedNode,\n    indexDefinition: Index\n  ): SortedMapIterator<string | NamedNode, Node, NamedNode> {\n    const idx = this.resolveIndex_(indexDefinition);\n    if (idx) {\n      return idx.getIteratorFrom(startPost, key => key);\n    } else {\n      const iterator = this.children_.getIteratorFrom(\n        startPost.name,\n        NamedNode.Wrap\n      );\n      let next = iterator.peek();\n      while (next != null && indexDefinition.compare(next, startPost) < 0) {\n        iterator.getNext();\n        next = iterator.peek();\n      }\n      return iterator;\n    }\n  }\n\n  getReverseIterator(\n    indexDefinition: Index\n  ): SortedMapIterator<string | NamedNode, Node, NamedNode> {\n    return this.getReverseIteratorFrom(\n      indexDefinition.maxPost(),\n      indexDefinition\n    );\n  }\n\n  getReverseIteratorFrom(\n    endPost: NamedNode,\n    indexDefinition: Index\n  ): SortedMapIterator<string | NamedNode, Node, NamedNode> {\n    const idx = this.resolveIndex_(indexDefinition);\n    if (idx) {\n      return idx.getReverseIteratorFrom(endPost, key => {\n        return key;\n      });\n    } else {\n      const iterator = this.children_.getReverseIteratorFrom(\n        endPost.name,\n        NamedNode.Wrap\n      );\n      let next = iterator.peek();\n      while (next != null && indexDefinition.compare(next, endPost) > 0) {\n        iterator.getNext();\n        next = iterator.peek();\n      }\n      return iterator;\n    }\n  }\n  compareTo(other: ChildrenNode): number {\n    if (this.isEmpty()) {\n      if (other.isEmpty()) {\n        return 0;\n      } else {\n        return -1;\n      }\n    } else if (other.isLeafNode() || other.isEmpty()) {\n      return 1;\n    } else if (other === MAX_NODE) {\n      return -1;\n    } else {\n      // Must be another node with children.\n      return 0;\n    }\n  }\n  withIndex(indexDefinition: Index): Node {\n    if (\n      indexDefinition === KEY_INDEX ||\n      this.indexMap_.hasIndex(indexDefinition)\n    ) {\n      return this;\n    } else {\n      const newIndexMap = this.indexMap_.addIndex(\n        indexDefinition,\n        this.children_\n      );\n      return new ChildrenNode(this.children_, this.priorityNode_, newIndexMap);\n    }\n  }\n  isIndexed(index: Index): boolean {\n    return index === KEY_INDEX || this.indexMap_.hasIndex(index);\n  }\n  equals(other: Node): boolean {\n    if (other === this) {\n      return true;\n    } else if (other.isLeafNode()) {\n      return false;\n    } else {\n      const otherChildrenNode = other as ChildrenNode;\n      if (!this.getPriority().equals(otherChildrenNode.getPriority())) {\n        return false;\n      } else if (\n        this.children_.count() === otherChildrenNode.children_.count()\n      ) {\n        const thisIter = this.getIterator(PRIORITY_INDEX);\n        const otherIter = otherChildrenNode.getIterator(PRIORITY_INDEX);\n        let thisCurrent = thisIter.getNext();\n        let otherCurrent = otherIter.getNext();\n        while (thisCurrent && otherCurrent) {\n          if (\n            thisCurrent.name !== otherCurrent.name ||\n            !thisCurrent.node.equals(otherCurrent.node)\n          ) {\n            return false;\n          }\n          thisCurrent = thisIter.getNext();\n          otherCurrent = otherIter.getNext();\n        }\n        return thisCurrent === null && otherCurrent === null;\n      } else {\n        return false;\n      }\n    }\n  }\n\n  /**\n   * Returns a SortedMap ordered by index, or null if the default (by-key) ordering can be used\n   * instead.\n   *\n   */\n  private resolveIndex_(\n    indexDefinition: Index\n  ): SortedMap<NamedNode, Node> | null {\n    if (indexDefinition === KEY_INDEX) {\n      return null;\n    } else {\n      return this.indexMap_.get(indexDefinition.toString());\n    }\n  }\n}\n\nexport class MaxNode extends ChildrenNode {\n  constructor() {\n    super(\n      new SortedMap<string, Node>(NAME_COMPARATOR),\n      ChildrenNode.EMPTY_NODE,\n      IndexMap.Default\n    );\n  }\n\n  compareTo(other: Node): number {\n    if (other === this) {\n      return 0;\n    } else {\n      return 1;\n    }\n  }\n\n  equals(other: Node): boolean {\n    // Not that we every compare it, but MAX_NODE is only ever equal to itself\n    return other === this;\n  }\n\n  getPriority(): MaxNode {\n    return this;\n  }\n\n  getImmediateChild(childName: string): ChildrenNode {\n    return ChildrenNode.EMPTY_NODE;\n  }\n\n  isEmpty(): boolean {\n    return false;\n  }\n}\n\n/**\n * Marker that will sort higher than any other snapshot.\n */\nexport const MAX_NODE = new MaxNode();\n\n/**\n * Document NamedNode extensions\n */\ndeclare module './Node' {\n  interface NamedNode {\n    MIN: NamedNode;\n    MAX: NamedNode;\n  }\n}\n\nObject.defineProperties(NamedNode, {\n  MIN: {\n    value: new NamedNode(MIN_NAME, ChildrenNode.EMPTY_NODE)\n  },\n  MAX: {\n    value: new NamedNode(MAX_NAME, MAX_NODE)\n  }\n});\n\n/**\n * Reference Extensions\n */\nKeyIndex.__EMPTY_NODE = ChildrenNode.EMPTY_NODE;\nLeafNode.__childrenNodeConstructor = ChildrenNode;\nsetMaxNode(MAX_NODE);\nsetPriorityMaxNode(MAX_NODE);\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { LLRBNode, SortedMap } from '../util/SortedMap';\n\nimport { NamedNode } from './Node';\n\nconst LOG_2 = Math.log(2);\n\nclass Base12Num {\n  count: number;\n  private current_: number;\n  private bits_: number;\n\n  constructor(length: number) {\n    const logBase2 = (num: number) =>\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      parseInt((Math.log(num) / LOG_2) as any, 10);\n    const bitMask = (bits: number) => parseInt(Array(bits + 1).join('1'), 2);\n    this.count = logBase2(length + 1);\n    this.current_ = this.count - 1;\n    const mask = bitMask(this.count);\n    this.bits_ = (length + 1) & mask;\n  }\n\n  nextBitIsOne(): boolean {\n    //noinspection JSBitwiseOperatorUsage\n    const result = !(this.bits_ & (0x1 << this.current_));\n    this.current_--;\n    return result;\n  }\n}\n\n/**\n * Takes a list of child nodes and constructs a SortedSet using the given comparison\n * function\n *\n * Uses the algorithm described in the paper linked here:\n * http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.46.1458\n *\n * @param childList - Unsorted list of children\n * @param cmp - The comparison method to be used\n * @param keyFn - An optional function to extract K from a node wrapper, if K's\n * type is not NamedNode\n * @param mapSortFn - An optional override for comparator used by the generated sorted map\n */\nexport const buildChildSet = function <K, V>(\n  childList: NamedNode[],\n  cmp: (a: NamedNode, b: NamedNode) => number,\n  keyFn?: (a: NamedNode) => K,\n  mapSortFn?: (a: K, b: K) => number\n): SortedMap<K, V> {\n  childList.sort(cmp);\n\n  const buildBalancedTree = function (\n    low: number,\n    high: number\n  ): LLRBNode<K, V> | null {\n    const length = high - low;\n    let namedNode: NamedNode;\n    let key: K;\n    if (length === 0) {\n      return null;\n    } else if (length === 1) {\n      namedNode = childList[low];\n      key = keyFn ? keyFn(namedNode) : (namedNode as unknown as K);\n      return new LLRBNode(\n        key,\n        namedNode.node as unknown as V,\n        LLRBNode.BLACK,\n        null,\n        null\n      );\n    } else {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      const middle = parseInt((length / 2) as any, 10) + low;\n      const left = buildBalancedTree(low, middle);\n      const right = buildBalancedTree(middle + 1, high);\n      namedNode = childList[middle];\n      key = keyFn ? keyFn(namedNode) : (namedNode as unknown as K);\n      return new LLRBNode(\n        key,\n        namedNode.node as unknown as V,\n        LLRBNode.BLACK,\n        left,\n        right\n      );\n    }\n  };\n\n  const buildFrom12Array = function (base12: Base12Num): LLRBNode<K, V> {\n    let node: LLRBNode<K, V> = null;\n    let root = null;\n    let index = childList.length;\n\n    const buildPennant = function (chunkSize: number, color: boolean) {\n      const low = index - chunkSize;\n      const high = index;\n      index -= chunkSize;\n      const childTree = buildBalancedTree(low + 1, high);\n      const namedNode = childList[low];\n      const key: K = keyFn ? keyFn(namedNode) : (namedNode as unknown as K);\n      attachPennant(\n        new LLRBNode(\n          key,\n          namedNode.node as unknown as V,\n          color,\n          null,\n          childTree\n        )\n      );\n    };\n\n    const attachPennant = function (pennant: LLRBNode<K, V>) {\n      if (node) {\n        node.left = pennant;\n        node = pennant;\n      } else {\n        root = pennant;\n        node = pennant;\n      }\n    };\n\n    for (let i = 0; i < base12.count; ++i) {\n      const isOne = base12.nextBitIsOne();\n      // The number of nodes taken in each slice is 2^(arr.length - (i + 1))\n      const chunkSize = Math.pow(2, base12.count - (i + 1));\n      if (isOne) {\n        buildPennant(chunkSize, LLRBNode.BLACK);\n      } else {\n        // current == 2\n        buildPennant(chunkSize, LLRBNode.BLACK);\n        buildPennant(chunkSize, LLRBNode.RED);\n      }\n    }\n    return root;\n  };\n\n  const base12 = new Base12Num(childList.length);\n  const root = buildFrom12Array(base12);\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  return new SortedMap<K, V>(mapSortFn || (cmp as any), root);\n};\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { contains, assert } from '@firebase/util';\n\nimport { Indexable } from '../util/misc';\nimport { SortedMap } from '../util/SortedMap';\nimport { each } from '../util/util';\n\nimport { ChildrenNode } from './ChildrenNode';\nimport { buildChildSet } from './childSet';\nimport { NAME_COMPARATOR, NAME_ONLY_COMPARATOR } from './comparators';\nimport { PRIORITY_INDEX, setNodeFromJSON } from './indexes/PriorityIndex';\nimport { IndexMap } from './IndexMap';\nimport { LeafNode } from './LeafNode';\nimport { NamedNode, Node } from './Node';\n\nconst USE_HINZE = true;\n\n/**\n * Constructs a snapshot node representing the passed JSON and returns it.\n * @param json - JSON to create a node for.\n * @param priority - Optional priority to use.  This will be ignored if the\n * passed JSON contains a .priority property.\n */\nexport function nodeFromJSON(\n  json: unknown | null,\n  priority: unknown = null\n): Node {\n  if (json === null) {\n    return ChildrenNode.EMPTY_NODE;\n  }\n\n  if (typeof json === 'object' && '.priority' in json) {\n    priority = json['.priority'];\n  }\n\n  assert(\n    priority === null ||\n      typeof priority === 'string' ||\n      typeof priority === 'number' ||\n      (typeof priority === 'object' && '.sv' in (priority as object)),\n    'Invalid priority type found: ' + typeof priority\n  );\n\n  if (typeof json === 'object' && '.value' in json && json['.value'] !== null) {\n    json = json['.value'];\n  }\n\n  // Valid leaf nodes include non-objects or server-value wrapper objects\n  if (typeof json !== 'object' || '.sv' in json) {\n    const jsonLeaf = json as string | number | boolean | Indexable;\n    return new LeafNode(jsonLeaf, nodeFromJSON(priority));\n  }\n\n  if (!(json instanceof Array) && USE_HINZE) {\n    const children: NamedNode[] = [];\n    let childrenHavePriority = false;\n    const hinzeJsonObj = json;\n    each(hinzeJsonObj, (key, child) => {\n      if (key.substring(0, 1) !== '.') {\n        // Ignore metadata nodes\n        const childNode = nodeFromJSON(child);\n        if (!childNode.isEmpty()) {\n          childrenHavePriority =\n            childrenHavePriority || !childNode.getPriority().isEmpty();\n          children.push(new NamedNode(key, childNode));\n        }\n      }\n    });\n\n    if (children.length === 0) {\n      return ChildrenNode.EMPTY_NODE;\n    }\n\n    const childSet = buildChildSet(\n      children,\n      NAME_ONLY_COMPARATOR,\n      namedNode => namedNode.name,\n      NAME_COMPARATOR\n    ) as SortedMap<string, Node>;\n    if (childrenHavePriority) {\n      const sortedChildSet = buildChildSet(\n        children,\n        PRIORITY_INDEX.getCompare()\n      );\n      return new ChildrenNode(\n        childSet,\n        nodeFromJSON(priority),\n        new IndexMap(\n          { '.priority': sortedChildSet },\n          { '.priority': PRIORITY_INDEX }\n        )\n      );\n    } else {\n      return new ChildrenNode(\n        childSet,\n        nodeFromJSON(priority),\n        IndexMap.Default\n      );\n    }\n  } else {\n    let node: Node = ChildrenNode.EMPTY_NODE;\n    each(json, (key: string, childData: unknown) => {\n      if (contains(json as object, key)) {\n        if (key.substring(0, 1) !== '.') {\n          // ignore metadata nodes.\n          const childNode = nodeFromJSON(childData);\n          if (childNode.isLeafNode() || !childNode.isEmpty()) {\n            node = node.updateImmediateChild(key, childNode);\n          }\n        }\n      }\n    });\n\n    return node.updatePriority(nodeFromJSON(priority));\n  }\n}\n\nsetNodeFromJSON(nodeFromJSON);\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { Path, pathGetFront, pathIsEmpty, pathSlice } from '../../util/Path';\nimport { MAX_NAME, nameCompare } from '../../util/util';\nimport { ChildrenNode, MAX_NODE } from '../ChildrenNode';\nimport { NamedNode, Node } from '../Node';\nimport { nodeFromJSON } from '../nodeFromJSON';\n\nimport { Index } from './Index';\n\nexport class PathIndex extends Index {\n  constructor(private indexPath_: Path) {\n    super();\n\n    assert(\n      !pathIsEmpty(indexPath_) && pathGetFront(indexPath_) !== '.priority',\n      \"Can't create PathIndex with empty path or .priority key\"\n    );\n  }\n\n  protected extractChild(snap: Node): Node {\n    return snap.getChild(this.indexPath_);\n  }\n  isDefinedOn(node: Node): boolean {\n    return !node.getChild(this.indexPath_).isEmpty();\n  }\n  compare(a: NamedNode, b: NamedNode): number {\n    const aChild = this.extractChild(a.node);\n    const bChild = this.extractChild(b.node);\n    const indexCmp = aChild.compareTo(bChild);\n    if (indexCmp === 0) {\n      return nameCompare(a.name, b.name);\n    } else {\n      return indexCmp;\n    }\n  }\n  makePost(indexValue: object, name: string): NamedNode {\n    const valueNode = nodeFromJSON(indexValue);\n    const node = ChildrenNode.EMPTY_NODE.updateChild(\n      this.indexPath_,\n      valueNode\n    );\n    return new NamedNode(name, node);\n  }\n  maxPost(): NamedNode {\n    const node = ChildrenNode.EMPTY_NODE.updateChild(this.indexPath_, MAX_NODE);\n    return new NamedNode(MAX_NAME, node);\n  }\n  toString(): string {\n    return pathSlice(this.indexPath_, 0).join('/');\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { nameCompare } from '../../util/util';\nimport { NamedNode, Node } from '../Node';\nimport { nodeFromJSON } from '../nodeFromJSON';\n\nimport { Index } from './Index';\n\nexport class ValueIndex extends Index {\n  compare(a: NamedNode, b: NamedNode): number {\n    const indexCmp = a.node.compareTo(b.node);\n    if (indexCmp === 0) {\n      return nameCompare(a.name, b.name);\n    } else {\n      return indexCmp;\n    }\n  }\n  isDefinedOn(node: Node): boolean {\n    return true;\n  }\n  indexedValueChanged(oldNode: Node, newNode: Node): boolean {\n    return !oldNode.equals(newNode);\n  }\n  minPost(): NamedNode {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return (NamedNode as any).MIN;\n  }\n  maxPost(): NamedNode {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return (NamedNode as any).MAX;\n  }\n\n  makePost(indexValue: object, name: string): NamedNode {\n    const valueNode = nodeFromJSON(indexValue);\n    return new NamedNode(name, valueNode);\n  }\n\n  /**\n   * @returns String representation for inclusion in a query spec\n   */\n  toString(): string {\n    return '.value';\n  }\n}\n\nexport const VALUE_INDEX = new ValueIndex();\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport {\n  tryParseInt,\n  MAX_NAME,\n  MIN_NAME,\n  INTEGER_32_MIN,\n  INTEGER_32_MAX\n} from '../util/util';\n\n// Modeled after base64 web-safe chars, but ordered by ASCII.\nconst PUSH_CHARS =\n  '-0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz';\n\nconst MIN_PUSH_CHAR = '-';\n\nconst MAX_PUSH_CHAR = 'z';\n\nconst MAX_KEY_LEN = 786;\n\n/**\n * Fancy ID generator that creates 20-character string identifiers with the\n * following properties:\n *\n * 1. They're based on timestamp so that they sort *after* any existing ids.\n * 2. They contain 72-bits of random data after the timestamp so that IDs won't\n *    collide with other clients' IDs.\n * 3. They sort *lexicographically* (so the timestamp is converted to characters\n *    that will sort properly).\n * 4. They're monotonically increasing. Even if you generate more than one in\n *    the same timestamp, the latter ones will sort after the former ones. We do\n *    this by using the previous random bits but \"incrementing\" them by 1 (only\n *    in the case of a timestamp collision).\n */\nexport const nextPushId = (function () {\n  // Timestamp of last push, used to prevent local collisions if you push twice\n  // in one ms.\n  let lastPushTime = 0;\n\n  // We generate 72-bits of randomness which get turned into 12 characters and\n  // appended to the timestamp to prevent collisions with other clients. We\n  // store the last characters we generated because in the event of a collision,\n  // we'll use those same characters except \"incremented\" by one.\n  const lastRandChars: number[] = [];\n\n  return function (now: number) {\n    const duplicateTime = now === lastPushTime;\n    lastPushTime = now;\n\n    let i;\n    const timeStampChars = new Array(8);\n    for (i = 7; i >= 0; i--) {\n      timeStampChars[i] = PUSH_CHARS.charAt(now % 64);\n      // NOTE: Can't use << here because javascript will convert to int and lose\n      // the upper bits.\n      now = Math.floor(now / 64);\n    }\n    assert(now === 0, 'Cannot push at time == 0');\n\n    let id = timeStampChars.join('');\n\n    if (!duplicateTime) {\n      for (i = 0; i < 12; i++) {\n        lastRandChars[i] = Math.floor(Math.random() * 64);\n      }\n    } else {\n      // If the timestamp hasn't changed since last push, use the same random\n      // number, except incremented by 1.\n      for (i = 11; i >= 0 && lastRandChars[i] === 63; i--) {\n        lastRandChars[i] = 0;\n      }\n      lastRandChars[i]++;\n    }\n    for (i = 0; i < 12; i++) {\n      id += PUSH_CHARS.charAt(lastRandChars[i]);\n    }\n    assert(id.length === 20, 'nextPushId: Length should be 20.');\n\n    return id;\n  };\n})();\n\nexport const successor = function (key: string) {\n  if (key === '' + INTEGER_32_MAX) {\n    // See https://firebase.google.com/docs/database/web/lists-of-data#data-order\n    return MIN_PUSH_CHAR;\n  }\n  const keyAsInt: number = tryParseInt(key);\n  if (keyAsInt != null) {\n    return '' + (keyAsInt + 1);\n  }\n  const next = new Array(key.length);\n\n  for (let i = 0; i < next.length; i++) {\n    next[i] = key.charAt(i);\n  }\n\n  if (next.length < MAX_KEY_LEN) {\n    next.push(MIN_PUSH_CHAR);\n    return next.join('');\n  }\n\n  let i = next.length - 1;\n\n  while (i >= 0 && next[i] === MAX_PUSH_CHAR) {\n    i--;\n  }\n\n  // `successor` was called on the largest possible key, so return the\n  // MAX_NAME, which sorts larger than all keys.\n  if (i === -1) {\n    return MAX_NAME;\n  }\n\n  const source = next[i];\n  const sourcePlusOne = PUSH_CHARS.charAt(PUSH_CHARS.indexOf(source) + 1);\n  next[i] = sourcePlusOne;\n\n  return next.slice(0, i + 1).join('');\n};\n\n// `key` is assumed to be non-empty.\nexport const predecessor = function (key: string) {\n  if (key === '' + INTEGER_32_MIN) {\n    return MIN_NAME;\n  }\n  const keyAsInt: number = tryParseInt(key);\n  if (keyAsInt != null) {\n    return '' + (keyAsInt - 1);\n  }\n  const next = new Array(key.length);\n  for (let i = 0; i < next.length; i++) {\n    next[i] = key.charAt(i);\n  }\n  // If `key` ends in `MIN_PUSH_CHAR`, the largest key lexicographically\n  // smaller than `key`, is `key[0:key.length - 1]`. The next key smaller\n  // than that, `predecessor(predecessor(key))`, is\n  //\n  // `key[0:key.length - 2] + (key[key.length - 1] - 1) + \\\n  //   { MAX_PUSH_CHAR repeated MAX_KEY_LEN - (key.length - 1) times }\n  //\n  // analogous to increment/decrement for base-10 integers.\n  //\n  // This works because lexigographic comparison works character-by-character,\n  // using length as a tie-breaker if one key is a prefix of the other.\n  if (next[next.length - 1] === MIN_PUSH_CHAR) {\n    if (next.length === 1) {\n      // See https://firebase.google.com/docs/database/web/lists-of-data#orderbykey\n      return '' + INTEGER_32_MAX;\n    }\n    delete next[next.length - 1];\n    return next.join('');\n  }\n  // Replace the last character with it's immediate predecessor, and\n  // fill the suffix of the key with MAX_PUSH_CHAR. This is the\n  // lexicographically largest possible key smaller than `key`.\n  next[next.length - 1] = PUSH_CHARS.charAt(\n    PUSH_CHARS.indexOf(next[next.length - 1]) - 1\n  );\n  return next.join('') + MAX_PUSH_CHAR.repeat(MAX_KEY_LEN - next.length);\n};\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Node } from '../snap/Node';\n\nexport const enum ChangeType {\n  /** Event type for a child added */\n  CHILD_ADDED = 'child_added',\n  /** Event type for a child removed */\n  CHILD_REMOVED = 'child_removed',\n  /** Event type for a child changed */\n  CHILD_CHANGED = 'child_changed',\n  /** Event type for a child moved */\n  CHILD_MOVED = 'child_moved',\n  /** Event type for a value change */\n  VALUE = 'value'\n}\n\nexport interface Change {\n  /** @param type - The event type */\n  type: ChangeType;\n  /** @param snapshotNode - The data */\n  snapshotNode: Node;\n  /** @param childName - The name for this child, if it's a child even */\n  childName?: string;\n  /** @param oldSnap - Used for intermediate processing of child changed events */\n  oldSnap?: Node;\n  /**  * @param prevName - The name for the previous child, if applicable */\n  prevName?: string | null;\n}\n\nexport function changeValue(snapshotNode: Node): Change {\n  return { type: ChangeType.VALUE, snapshotNode };\n}\n\nexport function changeChildAdded(\n  childName: string,\n  snapshotNode: Node\n): Change {\n  return { type: ChangeType.CHILD_ADDED, snapshotNode, childName };\n}\n\nexport function changeChildRemoved(\n  childName: string,\n  snapshotNode: Node\n): Change {\n  return { type: ChangeType.CHILD_REMOVED, snapshotNode, childName };\n}\n\nexport function changeChildChanged(\n  childName: string,\n  snapshotNode: Node,\n  oldSnap: Node\n): Change {\n  return {\n    type: ChangeType.CHILD_CHANGED,\n    snapshotNode,\n    childName,\n    oldSnap\n  };\n}\n\nexport function changeChildMoved(\n  childName: string,\n  snapshotNode: Node\n): Change {\n  return { type: ChangeType.CHILD_MOVED, snapshotNode, childName };\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, stringify } from '@firebase/util';\n\nimport { Index } from '../snap/indexes/Index';\nimport { KEY_INDEX } from '../snap/indexes/KeyIndex';\nimport { PathIndex } from '../snap/indexes/PathIndex';\nimport { PRIORITY_INDEX, PriorityIndex } from '../snap/indexes/PriorityIndex';\nimport { VALUE_INDEX } from '../snap/indexes/ValueIndex';\nimport { predecessor, successor } from '../util/NextPushId';\nimport { MAX_NAME, MIN_NAME } from '../util/util';\n\nimport { IndexedFilter } from './filter/IndexedFilter';\nimport { LimitedFilter } from './filter/LimitedFilter';\nimport { NodeFilter } from './filter/NodeFilter';\nimport { RangedFilter } from './filter/RangedFilter';\n\n/**\n * Wire Protocol Constants\n */\nconst enum WIRE_PROTOCOL_CONSTANTS {\n  INDEX_START_VALUE = 'sp',\n  INDEX_START_NAME = 'sn',\n  INDEX_END_VALUE = 'ep',\n  INDEX_END_NAME = 'en',\n  LIMIT = 'l',\n  VIEW_FROM = 'vf',\n  VIEW_FROM_LEFT = 'l',\n  VIEW_FROM_RIGHT = 'r',\n  INDEX = 'i'\n}\n\n/**\n * REST Query Constants\n */\nconst enum REST_QUERY_CONSTANTS {\n  ORDER_BY = 'orderBy',\n  PRIORITY_INDEX = '$priority',\n  VALUE_INDEX = '$value',\n  KEY_INDEX = '$key',\n  START_AT = 'startAt',\n  END_AT = 'endAt',\n  LIMIT_TO_FIRST = 'limitToFirst',\n  LIMIT_TO_LAST = 'limitToLast'\n}\n\n/**\n * This class is an immutable-from-the-public-api struct containing a set of query parameters defining a\n * range to be returned for a particular location. It is assumed that validation of parameters is done at the\n * user-facing API level, so it is not done here.\n *\n * @internal\n */\nexport class QueryParams {\n  limitSet_ = false;\n  startSet_ = false;\n  startNameSet_ = false;\n  startAfterSet_ = false;\n  endSet_ = false;\n  endNameSet_ = false;\n  endBeforeSet_ = false;\n  limit_ = 0;\n  viewFrom_ = '';\n  indexStartValue_: unknown | null = null;\n  indexStartName_ = '';\n  indexEndValue_: unknown | null = null;\n  indexEndName_ = '';\n  index_: PriorityIndex = PRIORITY_INDEX;\n\n  hasStart(): boolean {\n    return this.startSet_;\n  }\n\n  hasStartAfter(): boolean {\n    return this.startAfterSet_;\n  }\n\n  hasEndBefore(): boolean {\n    return this.endBeforeSet_;\n  }\n\n  /**\n   * @returns True if it would return from left.\n   */\n  isViewFromLeft(): boolean {\n    if (this.viewFrom_ === '') {\n      // limit(), rather than limitToFirst or limitToLast was called.\n      // This means that only one of startSet_ and endSet_ is true. Use them\n      // to calculate which side of the view to anchor to. If neither is set,\n      // anchor to the end.\n      return this.startSet_;\n    } else {\n      return this.viewFrom_ === WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_LEFT;\n    }\n  }\n\n  /**\n   * Only valid to call if hasStart() returns true\n   */\n  getIndexStartValue(): unknown {\n    assert(this.startSet_, 'Only valid if start has been set');\n    return this.indexStartValue_;\n  }\n\n  /**\n   * Only valid to call if hasStart() returns true.\n   * Returns the starting key name for the range defined by these query parameters\n   */\n  getIndexStartName(): string {\n    assert(this.startSet_, 'Only valid if start has been set');\n    if (this.startNameSet_) {\n      return this.indexStartName_;\n    } else {\n      return MIN_NAME;\n    }\n  }\n\n  hasEnd(): boolean {\n    return this.endSet_;\n  }\n\n  /**\n   * Only valid to call if hasEnd() returns true.\n   */\n  getIndexEndValue(): unknown {\n    assert(this.endSet_, 'Only valid if end has been set');\n    return this.indexEndValue_;\n  }\n\n  /**\n   * Only valid to call if hasEnd() returns true.\n   * Returns the end key name for the range defined by these query parameters\n   */\n  getIndexEndName(): string {\n    assert(this.endSet_, 'Only valid if end has been set');\n    if (this.endNameSet_) {\n      return this.indexEndName_;\n    } else {\n      return MAX_NAME;\n    }\n  }\n\n  hasLimit(): boolean {\n    return this.limitSet_;\n  }\n\n  /**\n   * @returns True if a limit has been set and it has been explicitly anchored\n   */\n  hasAnchoredLimit(): boolean {\n    return this.limitSet_ && this.viewFrom_ !== '';\n  }\n\n  /**\n   * Only valid to call if hasLimit() returns true\n   */\n  getLimit(): number {\n    assert(this.limitSet_, 'Only valid if limit has been set');\n    return this.limit_;\n  }\n\n  getIndex(): Index {\n    return this.index_;\n  }\n\n  loadsAllData(): boolean {\n    return !(this.startSet_ || this.endSet_ || this.limitSet_);\n  }\n\n  isDefault(): boolean {\n    return this.loadsAllData() && this.index_ === PRIORITY_INDEX;\n  }\n\n  copy(): QueryParams {\n    const copy = new QueryParams();\n    copy.limitSet_ = this.limitSet_;\n    copy.limit_ = this.limit_;\n    copy.startSet_ = this.startSet_;\n    copy.indexStartValue_ = this.indexStartValue_;\n    copy.startNameSet_ = this.startNameSet_;\n    copy.indexStartName_ = this.indexStartName_;\n    copy.endSet_ = this.endSet_;\n    copy.indexEndValue_ = this.indexEndValue_;\n    copy.endNameSet_ = this.endNameSet_;\n    copy.indexEndName_ = this.indexEndName_;\n    copy.index_ = this.index_;\n    copy.viewFrom_ = this.viewFrom_;\n    return copy;\n  }\n}\n\nexport function queryParamsGetNodeFilter(queryParams: QueryParams): NodeFilter {\n  if (queryParams.loadsAllData()) {\n    return new IndexedFilter(queryParams.getIndex());\n  } else if (queryParams.hasLimit()) {\n    return new LimitedFilter(queryParams);\n  } else {\n    return new RangedFilter(queryParams);\n  }\n}\n\nexport function queryParamsLimit(\n  queryParams: QueryParams,\n  newLimit: number\n): QueryParams {\n  const newParams = queryParams.copy();\n  newParams.limitSet_ = true;\n  newParams.limit_ = newLimit;\n  newParams.viewFrom_ = '';\n  return newParams;\n}\n\nexport function queryParamsLimitToFirst(\n  queryParams: QueryParams,\n  newLimit: number\n): QueryParams {\n  const newParams = queryParams.copy();\n  newParams.limitSet_ = true;\n  newParams.limit_ = newLimit;\n  newParams.viewFrom_ = WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_LEFT;\n  return newParams;\n}\n\nexport function queryParamsLimitToLast(\n  queryParams: QueryParams,\n  newLimit: number\n): QueryParams {\n  const newParams = queryParams.copy();\n  newParams.limitSet_ = true;\n  newParams.limit_ = newLimit;\n  newParams.viewFrom_ = WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_RIGHT;\n  return newParams;\n}\n\nexport function queryParamsStartAt(\n  queryParams: QueryParams,\n  indexValue: unknown,\n  key?: string | null\n): QueryParams {\n  const newParams = queryParams.copy();\n  newParams.startSet_ = true;\n  if (indexValue === undefined) {\n    indexValue = null;\n  }\n  newParams.indexStartValue_ = indexValue;\n  if (key != null) {\n    newParams.startNameSet_ = true;\n    newParams.indexStartName_ = key;\n  } else {\n    newParams.startNameSet_ = false;\n    newParams.indexStartName_ = '';\n  }\n  return newParams;\n}\n\nexport function queryParamsStartAfter(\n  queryParams: QueryParams,\n  indexValue: unknown,\n  key?: string | null\n): QueryParams {\n  let params: QueryParams;\n  if (queryParams.index_ === KEY_INDEX) {\n    if (typeof indexValue === 'string') {\n      indexValue = successor(indexValue as string);\n    }\n    params = queryParamsStartAt(queryParams, indexValue, key);\n  } else {\n    let childKey: string;\n    if (key == null) {\n      childKey = MAX_NAME;\n    } else {\n      childKey = successor(key);\n    }\n    params = queryParamsStartAt(queryParams, indexValue, childKey);\n  }\n  params.startAfterSet_ = true;\n  return params;\n}\n\nexport function queryParamsEndAt(\n  queryParams: QueryParams,\n  indexValue: unknown,\n  key?: string | null\n): QueryParams {\n  const newParams = queryParams.copy();\n  newParams.endSet_ = true;\n  if (indexValue === undefined) {\n    indexValue = null;\n  }\n  newParams.indexEndValue_ = indexValue;\n  if (key !== undefined) {\n    newParams.endNameSet_ = true;\n    newParams.indexEndName_ = key;\n  } else {\n    newParams.endNameSet_ = false;\n    newParams.indexEndName_ = '';\n  }\n  return newParams;\n}\n\nexport function queryParamsEndBefore(\n  queryParams: QueryParams,\n  indexValue: unknown,\n  key?: string | null\n): QueryParams {\n  let childKey: string;\n  let params: QueryParams;\n  if (queryParams.index_ === KEY_INDEX) {\n    if (typeof indexValue === 'string') {\n      indexValue = predecessor(indexValue as string);\n    }\n    params = queryParamsEndAt(queryParams, indexValue, key);\n  } else {\n    if (key == null) {\n      childKey = MIN_NAME;\n    } else {\n      childKey = predecessor(key);\n    }\n    params = queryParamsEndAt(queryParams, indexValue, childKey);\n  }\n  params.endBeforeSet_ = true;\n  return params;\n}\n\nexport function queryParamsOrderBy(\n  queryParams: QueryParams,\n  index: Index\n): QueryParams {\n  const newParams = queryParams.copy();\n  newParams.index_ = index;\n  return newParams;\n}\n\n/**\n * Returns a set of REST query string parameters representing this query.\n *\n * @returns query string parameters\n */\nexport function queryParamsToRestQueryStringParameters(\n  queryParams: QueryParams\n): Record<string, string | number> {\n  const qs: Record<string, string | number> = {};\n\n  if (queryParams.isDefault()) {\n    return qs;\n  }\n\n  let orderBy;\n  if (queryParams.index_ === PRIORITY_INDEX) {\n    orderBy = REST_QUERY_CONSTANTS.PRIORITY_INDEX;\n  } else if (queryParams.index_ === VALUE_INDEX) {\n    orderBy = REST_QUERY_CONSTANTS.VALUE_INDEX;\n  } else if (queryParams.index_ === KEY_INDEX) {\n    orderBy = REST_QUERY_CONSTANTS.KEY_INDEX;\n  } else {\n    assert(queryParams.index_ instanceof PathIndex, 'Unrecognized index type!');\n    orderBy = queryParams.index_.toString();\n  }\n  qs[REST_QUERY_CONSTANTS.ORDER_BY] = stringify(orderBy);\n\n  if (queryParams.startSet_) {\n    qs[REST_QUERY_CONSTANTS.START_AT] = stringify(queryParams.indexStartValue_);\n    if (queryParams.startNameSet_) {\n      qs[REST_QUERY_CONSTANTS.START_AT] +=\n        ',' + stringify(queryParams.indexStartName_);\n    }\n  }\n\n  if (queryParams.endSet_) {\n    qs[REST_QUERY_CONSTANTS.END_AT] = stringify(queryParams.indexEndValue_);\n    if (queryParams.endNameSet_) {\n      qs[REST_QUERY_CONSTANTS.END_AT] +=\n        ',' + stringify(queryParams.indexEndName_);\n    }\n  }\n\n  if (queryParams.limitSet_) {\n    if (queryParams.isViewFromLeft()) {\n      qs[REST_QUERY_CONSTANTS.LIMIT_TO_FIRST] = queryParams.limit_;\n    } else {\n      qs[REST_QUERY_CONSTANTS.LIMIT_TO_LAST] = queryParams.limit_;\n    }\n  }\n\n  return qs;\n}\n\nexport function queryParamsGetQueryObject(\n  queryParams: QueryParams\n): Record<string, unknown> {\n  const obj: Record<string, unknown> = {};\n  if (queryParams.startSet_) {\n    obj[WIRE_PROTOCOL_CONSTANTS.INDEX_START_VALUE] =\n      queryParams.indexStartValue_;\n    if (queryParams.startNameSet_) {\n      obj[WIRE_PROTOCOL_CONSTANTS.INDEX_START_NAME] =\n        queryParams.indexStartName_;\n    }\n  }\n  if (queryParams.endSet_) {\n    obj[WIRE_PROTOCOL_CONSTANTS.INDEX_END_VALUE] = queryParams.indexEndValue_;\n    if (queryParams.endNameSet_) {\n      obj[WIRE_PROTOCOL_CONSTANTS.INDEX_END_NAME] = queryParams.indexEndName_;\n    }\n  }\n  if (queryParams.limitSet_) {\n    obj[WIRE_PROTOCOL_CONSTANTS.LIMIT] = queryParams.limit_;\n    let viewFrom = queryParams.viewFrom_;\n    if (viewFrom === '') {\n      if (queryParams.isViewFromLeft()) {\n        viewFrom = WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_LEFT;\n      } else {\n        viewFrom = WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_RIGHT;\n      }\n    }\n    obj[WIRE_PROTOCOL_CONSTANTS.VIEW_FROM] = viewFrom;\n  }\n  // For now, priority index is the default, so we only specify if it's some other index\n  if (queryParams.index_ !== PRIORITY_INDEX) {\n    obj[WIRE_PROTOCOL_CONSTANTS.INDEX] = queryParams.index_.toString();\n  }\n  return obj;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  assert,\n  jsonEval,\n  safeGet,\n  querystring,\n  Deferred\n} from '@firebase/util';\n\nimport { AppCheckTokenProvider } from './AppCheckTokenProvider';\nimport { AuthTokenProvider } from './AuthTokenProvider';\nimport { RepoInfo } from './RepoInfo';\nimport { ServerActions } from './ServerActions';\nimport { logWrapper, warn } from './util/util';\nimport { QueryContext } from './view/EventRegistration';\nimport { queryParamsToRestQueryStringParameters } from './view/QueryParams';\n\n/**\n * An implementation of ServerActions that communicates with the server via REST requests.\n * This is mostly useful for compatibility with crawlers, where we don't want to spin up a full\n * persistent connection (using WebSockets or long-polling)\n */\nexport class ReadonlyRestClient extends ServerActions {\n  reportStats(stats: { [k: string]: unknown }): void {\n    throw new Error('Method not implemented.');\n  }\n\n  /** @private {function(...[*])} */\n  private log_: (...args: unknown[]) => void = logWrapper('p:rest:');\n\n  /**\n   * We don't actually need to track listens, except to prevent us calling an onComplete for a listen\n   * that's been removed. :-/\n   */\n  private listens_: { [k: string]: object } = {};\n\n  static getListenId_(query: QueryContext, tag?: number | null): string {\n    if (tag !== undefined) {\n      return 'tag$' + tag;\n    } else {\n      assert(\n        query._queryParams.isDefault(),\n        \"should have a tag if it's not a default query.\"\n      );\n      return query._path.toString();\n    }\n  }\n\n  /**\n   * @param repoInfo_ - Data about the namespace we are connecting to\n   * @param onDataUpdate_ - A callback for new data from the server\n   */\n  constructor(\n    private repoInfo_: RepoInfo,\n    private onDataUpdate_: (\n      a: string,\n      b: unknown,\n      c: boolean,\n      d: number | null\n    ) => void,\n    private authTokenProvider_: AuthTokenProvider,\n    private appCheckTokenProvider_: AppCheckTokenProvider\n  ) {\n    super();\n  }\n\n  /** @inheritDoc */\n  listen(\n    query: QueryContext,\n    currentHashFn: () => string,\n    tag: number | null,\n    onComplete: (a: string, b: unknown) => void\n  ) {\n    const pathString = query._path.toString();\n    this.log_('Listen called for ' + pathString + ' ' + query._queryIdentifier);\n\n    // Mark this listener so we can tell if it's removed.\n    const listenId = ReadonlyRestClient.getListenId_(query, tag);\n    const thisListen = {};\n    this.listens_[listenId] = thisListen;\n\n    const queryStringParameters = queryParamsToRestQueryStringParameters(\n      query._queryParams\n    );\n\n    this.restRequest_(\n      pathString + '.json',\n      queryStringParameters,\n      (error, result) => {\n        let data = result;\n\n        if (error === 404) {\n          data = null;\n          error = null;\n        }\n\n        if (error === null) {\n          this.onDataUpdate_(pathString, data, /*isMerge=*/ false, tag);\n        }\n\n        if (safeGet(this.listens_, listenId) === thisListen) {\n          let status;\n          if (!error) {\n            status = 'ok';\n          } else if (error === 401) {\n            status = 'permission_denied';\n          } else {\n            status = 'rest_error:' + error;\n          }\n\n          onComplete(status, null);\n        }\n      }\n    );\n  }\n\n  /** @inheritDoc */\n  unlisten(query: QueryContext, tag: number | null) {\n    const listenId = ReadonlyRestClient.getListenId_(query, tag);\n    delete this.listens_[listenId];\n  }\n\n  get(query: QueryContext): Promise<string> {\n    const queryStringParameters = queryParamsToRestQueryStringParameters(\n      query._queryParams\n    );\n\n    const pathString = query._path.toString();\n\n    const deferred = new Deferred<string>();\n\n    this.restRequest_(\n      pathString + '.json',\n      queryStringParameters,\n      (error, result) => {\n        let data = result;\n\n        if (error === 404) {\n          data = null;\n          error = null;\n        }\n\n        if (error === null) {\n          this.onDataUpdate_(\n            pathString,\n            data,\n            /*isMerge=*/ false,\n            /*tag=*/ null\n          );\n          deferred.resolve(data as string);\n        } else {\n          deferred.reject(new Error(data as string));\n        }\n      }\n    );\n    return deferred.promise;\n  }\n\n  /** @inheritDoc */\n  refreshAuthToken(token: string) {\n    // no-op since we just always call getToken.\n  }\n\n  /**\n   * Performs a REST request to the given path, with the provided query string parameters,\n   * and any auth credentials we have.\n   */\n  private restRequest_(\n    pathString: string,\n    queryStringParameters: { [k: string]: string | number } = {},\n    callback: ((a: number | null, b?: unknown) => void) | null\n  ) {\n    queryStringParameters['format'] = 'export';\n\n    return Promise.all([\n      this.authTokenProvider_.getToken(/*forceRefresh=*/ false),\n      this.appCheckTokenProvider_.getToken(/*forceRefresh=*/ false)\n    ]).then(([authToken, appCheckToken]) => {\n      if (authToken && authToken.accessToken) {\n        queryStringParameters['auth'] = authToken.accessToken;\n      }\n      if (appCheckToken && appCheckToken.token) {\n        queryStringParameters['ac'] = appCheckToken.token;\n      }\n\n      const url =\n        (this.repoInfo_.secure ? 'https://' : 'http://') +\n        this.repoInfo_.host +\n        pathString +\n        '?' +\n        'ns=' +\n        this.repoInfo_.namespace +\n        querystring(queryStringParameters);\n\n      this.log_('Sending REST request for ' + url);\n      const xhr = new XMLHttpRequest();\n      xhr.onreadystatechange = () => {\n        if (callback && xhr.readyState === 4) {\n          this.log_(\n            'REST Response for ' + url + ' received. status:',\n            xhr.status,\n            'response:',\n            xhr.responseText\n          );\n          let res = null;\n          if (xhr.status >= 200 && xhr.status < 300) {\n            try {\n              res = jsonEval(xhr.responseText);\n            } catch (e) {\n              warn(\n                'Failed to parse JSON response for ' +\n                  url +\n                  ': ' +\n                  xhr.responseText\n              );\n            }\n            callback(null, res);\n          } else {\n            // 401 and 404 are expected.\n            if (xhr.status !== 401 && xhr.status !== 404) {\n              warn(\n                'Got unsuccessful REST response for ' +\n                  url +\n                  ' Status: ' +\n                  xhr.status\n              );\n            }\n            callback(xhr.status);\n          }\n          callback = null;\n        }\n      };\n\n      xhr.open('GET', url, /*asynchronous=*/ true);\n      xhr.send();\n    });\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ChildrenNode } from './snap/ChildrenNode';\nimport { Node } from './snap/Node';\nimport { Path } from './util/Path';\n\n/**\n * Mutable object which basically just stores a reference to the \"latest\" immutable snapshot.\n */\nexport class SnapshotHolder {\n  private rootNode_: Node = ChildrenNode.EMPTY_NODE;\n\n  getNode(path: Path): Node {\n    return this.rootNode_.getChild(path);\n  }\n\n  updateSnapshot(path: Path, newSnapshotNode: Node) {\n    this.rootNode_ = this.rootNode_.updateChild(path, newSnapshotNode);\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { PRIORITY_INDEX } from './snap/indexes/PriorityIndex';\nimport { Node } from './snap/Node';\nimport { Path, pathGetFront, pathIsEmpty, pathPopFront } from './util/Path';\n\n/**\n * Helper class to store a sparse set of snapshots.\n */\nexport interface SparseSnapshotTree {\n  value: Node | null;\n  readonly children: Map<string, SparseSnapshotTree>;\n}\n\nexport function newSparseSnapshotTree(): SparseSnapshotTree {\n  return {\n    value: null,\n    children: new Map()\n  };\n}\n\n/**\n * Gets the node stored at the given path if one exists.\n * Only seems to be used in tests.\n *\n * @param path - Path to look up snapshot for.\n * @returns The retrieved node, or null.\n */\nexport function sparseSnapshotTreeFind(\n  sparseSnapshotTree: SparseSnapshotTree,\n  path: Path\n): Node | null {\n  if (sparseSnapshotTree.value != null) {\n    return sparseSnapshotTree.value.getChild(path);\n  } else if (!pathIsEmpty(path) && sparseSnapshotTree.children.size > 0) {\n    const childKey = pathGetFront(path);\n    path = pathPopFront(path);\n    if (sparseSnapshotTree.children.has(childKey)) {\n      const childTree = sparseSnapshotTree.children.get(childKey);\n      return sparseSnapshotTreeFind(childTree, path);\n    } else {\n      return null;\n    }\n  } else {\n    return null;\n  }\n}\n\n/**\n * Stores the given node at the specified path. If there is already a node\n * at a shallower path, it merges the new data into that snapshot node.\n *\n * @param path - Path to look up snapshot for.\n * @param data - The new data, or null.\n */\nexport function sparseSnapshotTreeRemember(\n  sparseSnapshotTree: SparseSnapshotTree,\n  path: Path,\n  data: Node\n): void {\n  if (pathIsEmpty(path)) {\n    sparseSnapshotTree.value = data;\n    sparseSnapshotTree.children.clear();\n  } else if (sparseSnapshotTree.value !== null) {\n    sparseSnapshotTree.value = sparseSnapshotTree.value.updateChild(path, data);\n  } else {\n    const childKey = pathGetFront(path);\n    if (!sparseSnapshotTree.children.has(childKey)) {\n      sparseSnapshotTree.children.set(childKey, newSparseSnapshotTree());\n    }\n\n    const child = sparseSnapshotTree.children.get(childKey);\n    path = pathPopFront(path);\n    sparseSnapshotTreeRemember(child, path, data);\n  }\n}\n\n/**\n * Purge the data at path from the cache.\n *\n * @param path - Path to look up snapshot for.\n * @returns True if this node should now be removed.\n */\nexport function sparseSnapshotTreeForget(\n  sparseSnapshotTree: SparseSnapshotTree,\n  path: Path\n): boolean {\n  if (pathIsEmpty(path)) {\n    sparseSnapshotTree.value = null;\n    sparseSnapshotTree.children.clear();\n    return true;\n  } else {\n    if (sparseSnapshotTree.value !== null) {\n      if (sparseSnapshotTree.value.isLeafNode()) {\n        // We're trying to forget a node that doesn't exist\n        return false;\n      } else {\n        const value = sparseSnapshotTree.value;\n        sparseSnapshotTree.value = null;\n\n        value.forEachChild(PRIORITY_INDEX, (key, tree) => {\n          sparseSnapshotTreeRemember(sparseSnapshotTree, new Path(key), tree);\n        });\n\n        return sparseSnapshotTreeForget(sparseSnapshotTree, path);\n      }\n    } else if (sparseSnapshotTree.children.size > 0) {\n      const childKey = pathGetFront(path);\n      path = pathPopFront(path);\n      if (sparseSnapshotTree.children.has(childKey)) {\n        const safeToRemove = sparseSnapshotTreeForget(\n          sparseSnapshotTree.children.get(childKey),\n          path\n        );\n        if (safeToRemove) {\n          sparseSnapshotTree.children.delete(childKey);\n        }\n      }\n\n      return sparseSnapshotTree.children.size === 0;\n    } else {\n      return true;\n    }\n  }\n}\n\n/**\n * Recursively iterates through all of the stored tree and calls the\n * callback on each one.\n *\n * @param prefixPath - Path to look up node for.\n * @param func - The function to invoke for each tree.\n */\nexport function sparseSnapshotTreeForEachTree(\n  sparseSnapshotTree: SparseSnapshotTree,\n  prefixPath: Path,\n  func: (a: Path, b: Node) => unknown\n): void {\n  if (sparseSnapshotTree.value !== null) {\n    func(prefixPath, sparseSnapshotTree.value);\n  } else {\n    sparseSnapshotTreeForEachChild(sparseSnapshotTree, (key, tree) => {\n      const path = new Path(prefixPath.toString() + '/' + key);\n      sparseSnapshotTreeForEachTree(tree, path, func);\n    });\n  }\n}\n\n/**\n * Iterates through each immediate child and triggers the callback.\n * Only seems to be used in tests.\n *\n * @param func - The function to invoke for each child.\n */\nexport function sparseSnapshotTreeForEachChild(\n  sparseSnapshotTree: SparseSnapshotTree,\n  func: (a: string, b: SparseSnapshotTree) => void\n): void {\n  sparseSnapshotTree.children.forEach((tree, key) => {\n    func(key, tree);\n  });\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Path } from '../util/Path';\n\n/**\n *\n * @enum\n */\nexport enum OperationType {\n  OVERWRITE,\n  MERGE,\n  ACK_USER_WRITE,\n  LISTEN_COMPLETE\n}\n\n/**\n * @interface\n */\nexport interface Operation {\n  source: OperationSource;\n\n  type: OperationType;\n\n  path: Path;\n\n  operationForChild(childName: string): Operation | null;\n}\n\nexport interface OperationSource {\n  fromUser: boolean;\n  fromServer: boolean;\n  queryId: string | null;\n  tagged: boolean;\n}\n\nexport function newOperationSourceUser(): OperationSource {\n  return {\n    fromUser: true,\n    fromServer: false,\n    queryId: null,\n    tagged: false\n  };\n}\n\nexport function newOperationSourceServer(): OperationSource {\n  return {\n    fromUser: false,\n    fromServer: true,\n    queryId: null,\n    tagged: false\n  };\n}\n\nexport function newOperationSourceServerTaggedQuery(\n  queryId: string\n): OperationSource {\n  return {\n    fromUser: false,\n    fromServer: true,\n    queryId,\n    tagged: true\n  };\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { each } from '../util/util';\n\nimport { StatsCollection } from './StatsCollection';\n\n/**\n * Returns the delta from the previous call to get stats.\n *\n * @param collection_ - The collection to \"listen\" to.\n */\nexport class StatsListener {\n  private last_: { [k: string]: number } | null = null;\n\n  constructor(private collection_: StatsCollection) {}\n\n  get(): { [k: string]: number } {\n    const newStats = this.collection_.get();\n\n    const delta = { ...newStats };\n    if (this.last_) {\n      each(this.last_, (stat: string, value: number) => {\n        delta[stat] = delta[stat] - value;\n      });\n    }\n    this.last_ = newStats;\n\n    return delta;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { contains } from '@firebase/util';\n\nimport { ServerActions } from '../ServerActions';\nimport { setTimeoutNonBlocking, each } from '../util/util';\n\nimport { StatsCollection } from './StatsCollection';\nimport { StatsListener } from './StatsListener';\n\n// Assuming some apps may have a short amount of time on page, and a bulk of firebase operations probably\n// happen on page load, we try to report our first set of stats pretty quickly, but we wait at least 10\n// seconds to try to ensure the Firebase connection is established / settled.\nconst FIRST_STATS_MIN_TIME = 10 * 1000;\nconst FIRST_STATS_MAX_TIME = 30 * 1000;\n\n// We'll continue to report stats on average every 5 minutes.\nconst REPORT_STATS_INTERVAL = 5 * 60 * 1000;\n\nexport class StatsReporter {\n  private statsListener_: StatsListener;\n  statsToReport_: { [k: string]: boolean } = {};\n\n  constructor(collection: StatsCollection, private server_: ServerActions) {\n    this.statsListener_ = new StatsListener(collection);\n\n    const timeout =\n      FIRST_STATS_MIN_TIME +\n      (FIRST_STATS_MAX_TIME - FIRST_STATS_MIN_TIME) * Math.random();\n    setTimeoutNonBlocking(this.reportStats_.bind(this), Math.floor(timeout));\n  }\n\n  private reportStats_() {\n    const stats = this.statsListener_.get();\n    const reportedStats: typeof stats = {};\n    let haveStatsToReport = false;\n\n    each(stats, (stat: string, value: number) => {\n      if (value > 0 && contains(this.statsToReport_, stat)) {\n        reportedStats[stat] = value;\n        haveStatsToReport = true;\n      }\n    });\n\n    if (haveStatsToReport) {\n      this.server_.reportStats(reportedStats);\n    }\n\n    // queue our next run.\n    setTimeoutNonBlocking(\n      this.reportStats_.bind(this),\n      Math.floor(Math.random() * 2 * REPORT_STATS_INTERVAL)\n    );\n  }\n}\n\nexport function statsReporterIncludeStat(\n  reporter: StatsReporter,\n  stat: string\n) {\n  reporter.statsToReport_[stat] = true;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  newEmptyPath,\n  Path,\n  pathChild,\n  pathGetFront,\n  pathIsEmpty,\n  pathPopFront\n} from './Path';\nimport { SortedMap } from './SortedMap';\nimport { each, stringCompare } from './util';\n\nlet emptyChildrenSingleton: SortedMap<string, ImmutableTree<null>>;\n\n/**\n * Singleton empty children collection.\n *\n */\nconst EmptyChildren = (): SortedMap<string, ImmutableTree<null>> => {\n  if (!emptyChildrenSingleton) {\n    emptyChildrenSingleton = new SortedMap<string, ImmutableTree<null>>(\n      stringCompare\n    );\n  }\n  return emptyChildrenSingleton;\n};\n\n/**\n * A tree with immutable elements.\n */\nexport class ImmutableTree<T> {\n  static fromObject<T>(obj: { [k: string]: T }): ImmutableTree<T> {\n    let tree: ImmutableTree<T> = new ImmutableTree<T>(null);\n    each(obj, (childPath: string, childSnap: T) => {\n      tree = tree.set(new Path(childPath), childSnap);\n    });\n    return tree;\n  }\n\n  constructor(\n    public readonly value: T | null,\n    public readonly children: SortedMap<\n      string,\n      ImmutableTree<T>\n    > = EmptyChildren()\n  ) {}\n\n  /**\n   * True if the value is empty and there are no children\n   */\n  isEmpty(): boolean {\n    return this.value === null && this.children.isEmpty();\n  }\n\n  /**\n   * Given a path and predicate, return the first node and the path to that node\n   * where the predicate returns true.\n   *\n   * TODO Do a perf test -- If we're creating a bunch of `{path: value:}`\n   * objects on the way back out, it may be better to pass down a pathSoFar obj.\n   *\n   * @param relativePath - The remainder of the path\n   * @param predicate - The predicate to satisfy to return a node\n   */\n  findRootMostMatchingPathAndValue(\n    relativePath: Path,\n    predicate: (a: T) => boolean\n  ): { path: Path; value: T } | null {\n    if (this.value != null && predicate(this.value)) {\n      return { path: newEmptyPath(), value: this.value };\n    } else {\n      if (pathIsEmpty(relativePath)) {\n        return null;\n      } else {\n        const front = pathGetFront(relativePath);\n        const child = this.children.get(front);\n        if (child !== null) {\n          const childExistingPathAndValue =\n            child.findRootMostMatchingPathAndValue(\n              pathPopFront(relativePath),\n              predicate\n            );\n          if (childExistingPathAndValue != null) {\n            const fullPath = pathChild(\n              new Path(front),\n              childExistingPathAndValue.path\n            );\n            return { path: fullPath, value: childExistingPathAndValue.value };\n          } else {\n            return null;\n          }\n        } else {\n          return null;\n        }\n      }\n    }\n  }\n\n  /**\n   * Find, if it exists, the shortest subpath of the given path that points a defined\n   * value in the tree\n   */\n  findRootMostValueAndPath(\n    relativePath: Path\n  ): { path: Path; value: T } | null {\n    return this.findRootMostMatchingPathAndValue(relativePath, () => true);\n  }\n\n  /**\n   * @returns The subtree at the given path\n   */\n  subtree(relativePath: Path): ImmutableTree<T> {\n    if (pathIsEmpty(relativePath)) {\n      return this;\n    } else {\n      const front = pathGetFront(relativePath);\n      const childTree = this.children.get(front);\n      if (childTree !== null) {\n        return childTree.subtree(pathPopFront(relativePath));\n      } else {\n        return new ImmutableTree<T>(null);\n      }\n    }\n  }\n\n  /**\n   * Sets a value at the specified path.\n   *\n   * @param relativePath - Path to set value at.\n   * @param toSet - Value to set.\n   * @returns Resulting tree.\n   */\n  set(relativePath: Path, toSet: T | null): ImmutableTree<T> {\n    if (pathIsEmpty(relativePath)) {\n      return new ImmutableTree(toSet, this.children);\n    } else {\n      const front = pathGetFront(relativePath);\n      const child = this.children.get(front) || new ImmutableTree<T>(null);\n      const newChild = child.set(pathPopFront(relativePath), toSet);\n      const newChildren = this.children.insert(front, newChild);\n      return new ImmutableTree(this.value, newChildren);\n    }\n  }\n\n  /**\n   * Removes the value at the specified path.\n   *\n   * @param relativePath - Path to value to remove.\n   * @returns Resulting tree.\n   */\n  remove(relativePath: Path): ImmutableTree<T> {\n    if (pathIsEmpty(relativePath)) {\n      if (this.children.isEmpty()) {\n        return new ImmutableTree<T>(null);\n      } else {\n        return new ImmutableTree(null, this.children);\n      }\n    } else {\n      const front = pathGetFront(relativePath);\n      const child = this.children.get(front);\n      if (child) {\n        const newChild = child.remove(pathPopFront(relativePath));\n        let newChildren;\n        if (newChild.isEmpty()) {\n          newChildren = this.children.remove(front);\n        } else {\n          newChildren = this.children.insert(front, newChild);\n        }\n        if (this.value === null && newChildren.isEmpty()) {\n          return new ImmutableTree<T>(null);\n        } else {\n          return new ImmutableTree(this.value, newChildren);\n        }\n      } else {\n        return this;\n      }\n    }\n  }\n\n  /**\n   * Gets a value from the tree.\n   *\n   * @param relativePath - Path to get value for.\n   * @returns Value at path, or null.\n   */\n  get(relativePath: Path): T | null {\n    if (pathIsEmpty(relativePath)) {\n      return this.value;\n    } else {\n      const front = pathGetFront(relativePath);\n      const child = this.children.get(front);\n      if (child) {\n        return child.get(pathPopFront(relativePath));\n      } else {\n        return null;\n      }\n    }\n  }\n\n  /**\n   * Replace the subtree at the specified path with the given new tree.\n   *\n   * @param relativePath - Path to replace subtree for.\n   * @param newTree - New tree.\n   * @returns Resulting tree.\n   */\n  setTree(relativePath: Path, newTree: ImmutableTree<T>): ImmutableTree<T> {\n    if (pathIsEmpty(relativePath)) {\n      return newTree;\n    } else {\n      const front = pathGetFront(relativePath);\n      const child = this.children.get(front) || new ImmutableTree<T>(null);\n      const newChild = child.setTree(pathPopFront(relativePath), newTree);\n      let newChildren;\n      if (newChild.isEmpty()) {\n        newChildren = this.children.remove(front);\n      } else {\n        newChildren = this.children.insert(front, newChild);\n      }\n      return new ImmutableTree(this.value, newChildren);\n    }\n  }\n\n  /**\n   * Performs a depth first fold on this tree. Transforms a tree into a single\n   * value, given a function that operates on the path to a node, an optional\n   * current value, and a map of child names to folded subtrees\n   */\n  fold<V>(fn: (path: Path, value: T, children: { [k: string]: V }) => V): V {\n    return this.fold_(newEmptyPath(), fn);\n  }\n\n  /**\n   * Recursive helper for public-facing fold() method\n   */\n  private fold_<V>(\n    pathSoFar: Path,\n    fn: (path: Path, value: T | null, children: { [k: string]: V }) => V\n  ): V {\n    const accum: { [k: string]: V } = {};\n    this.children.inorderTraversal(\n      (childKey: string, childTree: ImmutableTree<T>) => {\n        accum[childKey] = childTree.fold_(pathChild(pathSoFar, childKey), fn);\n      }\n    );\n    return fn(pathSoFar, this.value, accum);\n  }\n\n  /**\n   * Find the first matching value on the given path. Return the result of applying f to it.\n   */\n  findOnPath<V>(path: Path, f: (path: Path, value: T) => V | null): V | null {\n    return this.findOnPath_(path, newEmptyPath(), f);\n  }\n\n  private findOnPath_<V>(\n    pathToFollow: Path,\n    pathSoFar: Path,\n    f: (path: Path, value: T) => V | null\n  ): V | null {\n    const result = this.value ? f(pathSoFar, this.value) : false;\n    if (result) {\n      return result;\n    } else {\n      if (pathIsEmpty(pathToFollow)) {\n        return null;\n      } else {\n        const front = pathGetFront(pathToFollow)!;\n        const nextChild = this.children.get(front);\n        if (nextChild) {\n          return nextChild.findOnPath_(\n            pathPopFront(pathToFollow),\n            pathChild(pathSoFar, front),\n            f\n          );\n        } else {\n          return null;\n        }\n      }\n    }\n  }\n\n  foreachOnPath(\n    path: Path,\n    f: (path: Path, value: T) => void\n  ): ImmutableTree<T> {\n    return this.foreachOnPath_(path, newEmptyPath(), f);\n  }\n\n  private foreachOnPath_(\n    pathToFollow: Path,\n    currentRelativePath: Path,\n    f: (path: Path, value: T) => void\n  ): ImmutableTree<T> {\n    if (pathIsEmpty(pathToFollow)) {\n      return this;\n    } else {\n      if (this.value) {\n        f(currentRelativePath, this.value);\n      }\n      const front = pathGetFront(pathToFollow);\n      const nextChild = this.children.get(front);\n      if (nextChild) {\n        return nextChild.foreachOnPath_(\n          pathPopFront(pathToFollow),\n          pathChild(currentRelativePath, front),\n          f\n        );\n      } else {\n        return new ImmutableTree<T>(null);\n      }\n    }\n  }\n\n  /**\n   * Calls the given function for each node in the tree that has a value.\n   *\n   * @param f - A function to be called with the path from the root of the tree to\n   * a node, and the value at that node. Called in depth-first order.\n   */\n  foreach(f: (path: Path, value: T) => void) {\n    this.foreach_(newEmptyPath(), f);\n  }\n\n  private foreach_(\n    currentRelativePath: Path,\n    f: (path: Path, value: T) => void\n  ) {\n    this.children.inorderTraversal((childName, childTree) => {\n      childTree.foreach_(pathChild(currentRelativePath, childName), f);\n    });\n    if (this.value) {\n      f(currentRelativePath, this.value);\n    }\n  }\n\n  foreachChild(f: (name: string, value: T) => void) {\n    this.children.inorderTraversal(\n      (childName: string, childTree: ImmutableTree<T>) => {\n        if (childTree.value) {\n          f(childName, childTree.value);\n        }\n      }\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { ImmutableTree } from '../util/ImmutableTree';\nimport {\n  newEmptyPath,\n  Path,\n  pathGetFront,\n  pathIsEmpty,\n  pathPopFront\n} from '../util/Path';\n\nimport { newOperationSourceUser, Operation, OperationType } from './Operation';\n\nexport class AckUserWrite implements Operation {\n  /** @inheritDoc */\n  type = OperationType.ACK_USER_WRITE;\n\n  /** @inheritDoc */\n  source = newOperationSourceUser();\n\n  /**\n   * @param affectedTree - A tree containing true for each affected path. Affected paths can't overlap.\n   */\n  constructor(\n    /** @inheritDoc */ public path: Path,\n    /** @inheritDoc */ public affectedTree: ImmutableTree<boolean>,\n    /** @inheritDoc */ public revert: boolean\n  ) {}\n  operationForChild(childName: string): AckUserWrite {\n    if (!pathIsEmpty(this.path)) {\n      assert(\n        pathGetFront(this.path) === childName,\n        'operationForChild called for unrelated child.'\n      );\n      return new AckUserWrite(\n        pathPopFront(this.path),\n        this.affectedTree,\n        this.revert\n      );\n    } else if (this.affectedTree.value != null) {\n      assert(\n        this.affectedTree.children.isEmpty(),\n        'affectedTree should not have overlapping affected paths.'\n      );\n      // All child locations are affected as well; just return same operation.\n      return this;\n    } else {\n      const childTree = this.affectedTree.subtree(new Path(childName));\n      return new AckUserWrite(newEmptyPath(), childTree, this.revert);\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Node } from '../snap/Node';\nimport { newEmptyPath, Path, pathIsEmpty, pathPopFront } from '../util/Path';\n\nimport { Operation, OperationSource, OperationType } from './Operation';\n\nexport class Overwrite implements Operation {\n  /** @inheritDoc */\n  type = OperationType.OVERWRITE;\n\n  constructor(\n    public source: OperationSource,\n    public path: Path,\n    public snap: Node\n  ) {}\n\n  operationForChild(childName: string): Overwrite {\n    if (pathIsEmpty(this.path)) {\n      return new Overwrite(\n        this.source,\n        newEmptyPath(),\n        this.snap.getImmediateChild(childName)\n      );\n    } else {\n      return new Overwrite(this.source, pathPopFront(this.path), this.snap);\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { Node } from '../snap/Node';\nimport { ImmutableTree } from '../util/ImmutableTree';\nimport {\n  newEmptyPath,\n  Path,\n  pathGetFront,\n  pathIsEmpty,\n  pathPopFront\n} from '../util/Path';\n\nimport { Operation, OperationSource, OperationType } from './Operation';\nimport { Overwrite } from './Overwrite';\n\nexport class Merge implements Operation {\n  /** @inheritDoc */\n  type = OperationType.MERGE;\n\n  constructor(\n    /** @inheritDoc */ public source: OperationSource,\n    /** @inheritDoc */ public path: Path,\n    /** @inheritDoc */ public children: ImmutableTree<Node>\n  ) {}\n  operationForChild(childName: string): Operation {\n    if (pathIsEmpty(this.path)) {\n      const childTree = this.children.subtree(new Path(childName));\n      if (childTree.isEmpty()) {\n        // This child is unaffected\n        return null;\n      } else if (childTree.value) {\n        // We have a snapshot for the child in question.  This becomes an overwrite of the child.\n        return new Overwrite(this.source, newEmptyPath(), childTree.value);\n      } else {\n        // This is a merge at a deeper level\n        return new Merge(this.source, newEmptyPath(), childTree);\n      }\n    } else {\n      assert(\n        pathGetFront(this.path) === childName,\n        \"Can't get a merge for a child not on the path of the operation\"\n      );\n      return new Merge(this.source, pathPopFront(this.path), this.children);\n    }\n  }\n  toString(): string {\n    return (\n      'Operation(' +\n      this.path +\n      ': ' +\n      this.source.toString() +\n      ' merge: ' +\n      this.children.toString() +\n      ')'\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Node } from '../snap/Node';\nimport { Path, pathGetFront, pathIsEmpty } from '../util/Path';\n\n/**\n * A cache node only stores complete children. Additionally it holds a flag whether the node can be considered fully\n * initialized in the sense that we know at one point in time this represented a valid state of the world, e.g.\n * initialized with data from the server, or a complete overwrite by the client. The filtered flag also tracks\n * whether a node potentially had children removed due to a filter.\n */\nexport class CacheNode {\n  constructor(\n    private node_: Node,\n    private fullyInitialized_: boolean,\n    private filtered_: boolean\n  ) {}\n\n  /**\n   * Returns whether this node was fully initialized with either server data or a complete overwrite by the client\n   */\n  isFullyInitialized(): boolean {\n    return this.fullyInitialized_;\n  }\n\n  /**\n   * Returns whether this node is potentially missing children due to a filter applied to the node\n   */\n  isFiltered(): boolean {\n    return this.filtered_;\n  }\n\n  isCompleteForPath(path: Path): boolean {\n    if (pathIsEmpty(path)) {\n      return this.isFullyInitialized() && !this.filtered_;\n    }\n\n    const childKey = pathGetFront(path);\n    return this.isCompleteForChild(childKey);\n  }\n\n  isCompleteForChild(key: string): boolean {\n    return (\n      (this.isFullyInitialized() && !this.filtered_) || this.node_.hasChild(key)\n    );\n  }\n\n  getNode(): Node {\n    return this.node_;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assertionError } from '@firebase/util';\n\nimport { Index } from '../snap/indexes/Index';\nimport { NamedNode, Node } from '../snap/Node';\n\nimport { Change, ChangeType, changeChildMoved } from './Change';\nimport { Event } from './Event';\nimport { EventRegistration, QueryContext } from './EventRegistration';\n\n/**\n * An EventGenerator is used to convert \"raw\" changes (Change) as computed by the\n * CacheDiffer into actual events (Event) that can be raised.  See generateEventsForChanges()\n * for details.\n *\n */\nexport class EventGenerator {\n  index_: Index;\n\n  constructor(public query_: QueryContext) {\n    this.index_ = this.query_._queryParams.getIndex();\n  }\n}\n\n/**\n * Given a set of raw changes (no moved events and prevName not specified yet), and a set of\n * EventRegistrations that should be notified of these changes, generate the actual events to be raised.\n *\n * Notes:\n *  - child_moved events will be synthesized at this time for any child_changed events that affect\n *    our index.\n *  - prevName will be calculated based on the index ordering.\n */\nexport function eventGeneratorGenerateEventsForChanges(\n  eventGenerator: EventGenerator,\n  changes: Change[],\n  eventCache: Node,\n  eventRegistrations: EventRegistration[]\n): Event[] {\n  const events: Event[] = [];\n  const moves: Change[] = [];\n\n  changes.forEach(change => {\n    if (\n      change.type === ChangeType.CHILD_CHANGED &&\n      eventGenerator.index_.indexedValueChanged(\n        change.oldSnap as Node,\n        change.snapshotNode\n      )\n    ) {\n      moves.push(changeChildMoved(change.childName, change.snapshotNode));\n    }\n  });\n\n  eventGeneratorGenerateEventsForType(\n    eventGenerator,\n    events,\n    ChangeType.CHILD_REMOVED,\n    changes,\n    eventRegistrations,\n    eventCache\n  );\n  eventGeneratorGenerateEventsForType(\n    eventGenerator,\n    events,\n    ChangeType.CHILD_ADDED,\n    changes,\n    eventRegistrations,\n    eventCache\n  );\n  eventGeneratorGenerateEventsForType(\n    eventGenerator,\n    events,\n    ChangeType.CHILD_MOVED,\n    moves,\n    eventRegistrations,\n    eventCache\n  );\n  eventGeneratorGenerateEventsForType(\n    eventGenerator,\n    events,\n    ChangeType.CHILD_CHANGED,\n    changes,\n    eventRegistrations,\n    eventCache\n  );\n  eventGeneratorGenerateEventsForType(\n    eventGenerator,\n    events,\n    ChangeType.VALUE,\n    changes,\n    eventRegistrations,\n    eventCache\n  );\n\n  return events;\n}\n\n/**\n * Given changes of a single change type, generate the corresponding events.\n */\nfunction eventGeneratorGenerateEventsForType(\n  eventGenerator: EventGenerator,\n  events: Event[],\n  eventType: string,\n  changes: Change[],\n  registrations: EventRegistration[],\n  eventCache: Node\n) {\n  const filteredChanges = changes.filter(change => change.type === eventType);\n\n  filteredChanges.sort((a, b) =>\n    eventGeneratorCompareChanges(eventGenerator, a, b)\n  );\n  filteredChanges.forEach(change => {\n    const materializedChange = eventGeneratorMaterializeSingleChange(\n      eventGenerator,\n      change,\n      eventCache\n    );\n    registrations.forEach(registration => {\n      if (registration.respondsTo(change.type)) {\n        events.push(\n          registration.createEvent(materializedChange, eventGenerator.query_)\n        );\n      }\n    });\n  });\n}\n\nfunction eventGeneratorMaterializeSingleChange(\n  eventGenerator: EventGenerator,\n  change: Change,\n  eventCache: Node\n): Change {\n  if (change.type === 'value' || change.type === 'child_removed') {\n    return change;\n  } else {\n    change.prevName = eventCache.getPredecessorChildName(\n      change.childName,\n      change.snapshotNode,\n      eventGenerator.index_\n    );\n    return change;\n  }\n}\n\nfunction eventGeneratorCompareChanges(\n  eventGenerator: EventGenerator,\n  a: Change,\n  b: Change\n) {\n  if (a.childName == null || b.childName == null) {\n    throw assertionError('Should only compare child_ events.');\n  }\n  const aWrapped = new NamedNode(a.childName, a.snapshotNode);\n  const bWrapped = new NamedNode(b.childName, b.snapshotNode);\n  return eventGenerator.index_.compare(aWrapped, bWrapped);\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Node } from '../snap/Node';\n\nimport { CacheNode } from './CacheNode';\n\n/**\n * Stores the data we have cached for a view.\n *\n * serverSnap is the cached server data, eventSnap is the cached event data (server data plus any local writes).\n */\nexport interface ViewCache {\n  readonly eventCache: CacheNode;\n  readonly serverCache: CacheNode;\n}\n\nexport function newViewCache(\n  eventCache: CacheNode,\n  serverCache: CacheNode\n): ViewCache {\n  return { eventCache, serverCache };\n}\n\nexport function viewCacheUpdateEventSnap(\n  viewCache: ViewCache,\n  eventSnap: Node,\n  complete: boolean,\n  filtered: boolean\n): ViewCache {\n  return newViewCache(\n    new CacheNode(eventSnap, complete, filtered),\n    viewCache.serverCache\n  );\n}\n\nexport function viewCacheUpdateServerSnap(\n  viewCache: ViewCache,\n  serverSnap: Node,\n  complete: boolean,\n  filtered: boolean\n): ViewCache {\n  return newViewCache(\n    viewCache.eventCache,\n    new CacheNode(serverSnap, complete, filtered)\n  );\n}\n\nexport function viewCacheGetCompleteEventSnap(\n  viewCache: ViewCache\n): Node | null {\n  return viewCache.eventCache.isFullyInitialized()\n    ? viewCache.eventCache.getNode()\n    : null;\n}\n\nexport function viewCacheGetCompleteServerSnap(\n  viewCache: ViewCache\n): Node | null {\n  return viewCache.serverCache.isFullyInitialized()\n    ? viewCache.serverCache.getNode()\n    : null;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { ChildrenNode } from './snap/ChildrenNode';\nimport { PRIORITY_INDEX } from './snap/indexes/PriorityIndex';\nimport { NamedNode, Node } from './snap/Node';\nimport { ImmutableTree } from './util/ImmutableTree';\nimport {\n  newEmptyPath,\n  newRelativePath,\n  Path,\n  pathChild,\n  pathIsEmpty\n} from './util/Path';\nimport { each } from './util/util';\n\n/**\n * This class holds a collection of writes that can be applied to nodes in unison. It abstracts away the logic with\n * dealing with priority writes and multiple nested writes. At any given path there is only allowed to be one write\n * modifying that path. Any write to an existing path or shadowing an existing path will modify that existing write\n * to reflect the write added.\n */\nexport class CompoundWrite {\n  constructor(public writeTree_: ImmutableTree<Node>) {}\n\n  static empty(): CompoundWrite {\n    return new CompoundWrite(new ImmutableTree(null));\n  }\n}\n\nexport function compoundWriteAddWrite(\n  compoundWrite: CompoundWrite,\n  path: Path,\n  node: Node\n): CompoundWrite {\n  if (pathIsEmpty(path)) {\n    return new CompoundWrite(new ImmutableTree(node));\n  } else {\n    const rootmost = compoundWrite.writeTree_.findRootMostValueAndPath(path);\n    if (rootmost != null) {\n      const rootMostPath = rootmost.path;\n      let value = rootmost.value;\n      const relativePath = newRelativePath(rootMostPath, path);\n      value = value.updateChild(relativePath, node);\n      return new CompoundWrite(\n        compoundWrite.writeTree_.set(rootMostPath, value)\n      );\n    } else {\n      const subtree = new ImmutableTree(node);\n      const newWriteTree = compoundWrite.writeTree_.setTree(path, subtree);\n      return new CompoundWrite(newWriteTree);\n    }\n  }\n}\n\nexport function compoundWriteAddWrites(\n  compoundWrite: CompoundWrite,\n  path: Path,\n  updates: { [name: string]: Node }\n): CompoundWrite {\n  let newWrite = compoundWrite;\n  each(updates, (childKey: string, node: Node) => {\n    newWrite = compoundWriteAddWrite(newWrite, pathChild(path, childKey), node);\n  });\n  return newWrite;\n}\n\n/**\n * Will remove a write at the given path and deeper paths. This will <em>not</em> modify a write at a higher\n * location, which must be removed by calling this method with that path.\n *\n * @param compoundWrite - The CompoundWrite to remove.\n * @param path - The path at which a write and all deeper writes should be removed\n * @returns The new CompoundWrite with the removed path\n */\nexport function compoundWriteRemoveWrite(\n  compoundWrite: CompoundWrite,\n  path: Path\n): CompoundWrite {\n  if (pathIsEmpty(path)) {\n    return CompoundWrite.empty();\n  } else {\n    const newWriteTree = compoundWrite.writeTree_.setTree(\n      path,\n      new ImmutableTree<Node>(null)\n    );\n    return new CompoundWrite(newWriteTree);\n  }\n}\n\n/**\n * Returns whether this CompoundWrite will fully overwrite a node at a given location and can therefore be\n * considered \"complete\".\n *\n * @param compoundWrite - The CompoundWrite to check.\n * @param path - The path to check for\n * @returns Whether there is a complete write at that path\n */\nexport function compoundWriteHasCompleteWrite(\n  compoundWrite: CompoundWrite,\n  path: Path\n): boolean {\n  return compoundWriteGetCompleteNode(compoundWrite, path) != null;\n}\n\n/**\n * Returns a node for a path if and only if the node is a \"complete\" overwrite at that path. This will not aggregate\n * writes from deeper paths, but will return child nodes from a more shallow path.\n *\n * @param compoundWrite - The CompoundWrite to get the node from.\n * @param path - The path to get a complete write\n * @returns The node if complete at that path, or null otherwise.\n */\nexport function compoundWriteGetCompleteNode(\n  compoundWrite: CompoundWrite,\n  path: Path\n): Node | null {\n  const rootmost = compoundWrite.writeTree_.findRootMostValueAndPath(path);\n  if (rootmost != null) {\n    return compoundWrite.writeTree_\n      .get(rootmost.path)\n      .getChild(newRelativePath(rootmost.path, path));\n  } else {\n    return null;\n  }\n}\n\n/**\n * Returns all children that are guaranteed to be a complete overwrite.\n *\n * @param compoundWrite - The CompoundWrite to get children from.\n * @returns A list of all complete children.\n */\nexport function compoundWriteGetCompleteChildren(\n  compoundWrite: CompoundWrite\n): NamedNode[] {\n  const children: NamedNode[] = [];\n  const node = compoundWrite.writeTree_.value;\n  if (node != null) {\n    // If it's a leaf node, it has no children; so nothing to do.\n    if (!node.isLeafNode()) {\n      (node as ChildrenNode).forEachChild(\n        PRIORITY_INDEX,\n        (childName, childNode) => {\n          children.push(new NamedNode(childName, childNode));\n        }\n      );\n    }\n  } else {\n    compoundWrite.writeTree_.children.inorderTraversal(\n      (childName, childTree) => {\n        if (childTree.value != null) {\n          children.push(new NamedNode(childName, childTree.value));\n        }\n      }\n    );\n  }\n  return children;\n}\n\nexport function compoundWriteChildCompoundWrite(\n  compoundWrite: CompoundWrite,\n  path: Path\n): CompoundWrite {\n  if (pathIsEmpty(path)) {\n    return compoundWrite;\n  } else {\n    const shadowingNode = compoundWriteGetCompleteNode(compoundWrite, path);\n    if (shadowingNode != null) {\n      return new CompoundWrite(new ImmutableTree(shadowingNode));\n    } else {\n      return new CompoundWrite(compoundWrite.writeTree_.subtree(path));\n    }\n  }\n}\n\n/**\n * Returns true if this CompoundWrite is empty and therefore does not modify any nodes.\n * @returns Whether this CompoundWrite is empty\n */\nexport function compoundWriteIsEmpty(compoundWrite: CompoundWrite): boolean {\n  return compoundWrite.writeTree_.isEmpty();\n}\n\n/**\n * Applies this CompoundWrite to a node. The node is returned with all writes from this CompoundWrite applied to the\n * node\n * @param node - The node to apply this CompoundWrite to\n * @returns The node with all writes applied\n */\nexport function compoundWriteApply(\n  compoundWrite: CompoundWrite,\n  node: Node\n): Node {\n  return applySubtreeWrite(newEmptyPath(), compoundWrite.writeTree_, node);\n}\n\nfunction applySubtreeWrite(\n  relativePath: Path,\n  writeTree: ImmutableTree<Node>,\n  node: Node\n): Node {\n  if (writeTree.value != null) {\n    // Since there a write is always a leaf, we're done here\n    return node.updateChild(relativePath, writeTree.value);\n  } else {\n    let priorityWrite = null;\n    writeTree.children.inorderTraversal((childKey, childTree) => {\n      if (childKey === '.priority') {\n        // Apply priorities at the end so we don't update priorities for either empty nodes or forget\n        // to apply priorities to empty nodes that are later filled\n        assert(\n          childTree.value !== null,\n          'Priority writes must always be leaf nodes'\n        );\n        priorityWrite = childTree.value;\n      } else {\n        node = applySubtreeWrite(\n          pathChild(relativePath, childKey),\n          childTree,\n          node\n        );\n      }\n    });\n    // If there was a priority write, we only apply it if the node is not empty\n    if (!node.getChild(relativePath).isEmpty() && priorityWrite !== null) {\n      node = node.updateChild(\n        pathChild(relativePath, '.priority'),\n        priorityWrite\n      );\n    }\n    return node;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, assertionError, safeGet } from '@firebase/util';\n\nimport {\n  CompoundWrite,\n  compoundWriteAddWrite,\n  compoundWriteAddWrites,\n  compoundWriteApply,\n  compoundWriteChildCompoundWrite,\n  compoundWriteGetCompleteChildren,\n  compoundWriteGetCompleteNode,\n  compoundWriteHasCompleteWrite,\n  compoundWriteIsEmpty,\n  compoundWriteRemoveWrite\n} from './CompoundWrite';\nimport { ChildrenNode } from './snap/ChildrenNode';\nimport { Index } from './snap/indexes/Index';\nimport { PRIORITY_INDEX } from './snap/indexes/PriorityIndex';\nimport { NamedNode, Node } from './snap/Node';\nimport {\n  newEmptyPath,\n  newRelativePath,\n  Path,\n  pathChild,\n  pathContains,\n  pathGetFront,\n  pathIsEmpty,\n  pathPopFront\n} from './util/Path';\nimport { each } from './util/util';\nimport { CacheNode } from './view/CacheNode';\n\n/**\n * Defines a single user-initiated write operation. May be the result of a set(), transaction(), or update() call. In\n * the case of a set() or transaction, snap wil be non-null.  In the case of an update(), children will be non-null.\n */\nexport interface WriteRecord {\n  writeId: number;\n  path: Path;\n  snap?: Node | null;\n  children?: { [k: string]: Node } | null;\n  visible: boolean;\n}\n\n/**\n * Create a new WriteTreeRef for the given path. For use with a new sync point at the given path.\n *\n */\nexport function writeTreeChildWrites(\n  writeTree: WriteTree,\n  path: Path\n): WriteTreeRef {\n  return newWriteTreeRef(path, writeTree);\n}\n\n/**\n * Record a new overwrite from user code.\n *\n * @param visible - This is set to false by some transactions. It should be excluded from event caches\n */\nexport function writeTreeAddOverwrite(\n  writeTree: WriteTree,\n  path: Path,\n  snap: Node,\n  writeId: number,\n  visible?: boolean\n) {\n  assert(\n    writeId > writeTree.lastWriteId,\n    'Stacking an older write on top of newer ones'\n  );\n  if (visible === undefined) {\n    visible = true;\n  }\n  writeTree.allWrites.push({\n    path,\n    snap,\n    writeId,\n    visible\n  });\n\n  if (visible) {\n    writeTree.visibleWrites = compoundWriteAddWrite(\n      writeTree.visibleWrites,\n      path,\n      snap\n    );\n  }\n  writeTree.lastWriteId = writeId;\n}\n\n/**\n * Record a new merge from user code.\n */\nexport function writeTreeAddMerge(\n  writeTree: WriteTree,\n  path: Path,\n  changedChildren: { [k: string]: Node },\n  writeId: number\n) {\n  assert(\n    writeId > writeTree.lastWriteId,\n    'Stacking an older merge on top of newer ones'\n  );\n  writeTree.allWrites.push({\n    path,\n    children: changedChildren,\n    writeId,\n    visible: true\n  });\n\n  writeTree.visibleWrites = compoundWriteAddWrites(\n    writeTree.visibleWrites,\n    path,\n    changedChildren\n  );\n  writeTree.lastWriteId = writeId;\n}\n\nexport function writeTreeGetWrite(\n  writeTree: WriteTree,\n  writeId: number\n): WriteRecord | null {\n  for (let i = 0; i < writeTree.allWrites.length; i++) {\n    const record = writeTree.allWrites[i];\n    if (record.writeId === writeId) {\n      return record;\n    }\n  }\n  return null;\n}\n\n/**\n * Remove a write (either an overwrite or merge) that has been successfully acknowledge by the server. Recalculates\n * the tree if necessary.  We return true if it may have been visible, meaning views need to reevaluate.\n *\n * @returns true if the write may have been visible (meaning we'll need to reevaluate / raise\n * events as a result).\n */\nexport function writeTreeRemoveWrite(\n  writeTree: WriteTree,\n  writeId: number\n): boolean {\n  // Note: disabling this check. It could be a transaction that preempted another transaction, and thus was applied\n  // out of order.\n  //const validClear = revert || this.allWrites_.length === 0 || writeId <= this.allWrites_[0].writeId;\n  //assert(validClear, \"Either we don't have this write, or it's the first one in the queue\");\n\n  const idx = writeTree.allWrites.findIndex(s => {\n    return s.writeId === writeId;\n  });\n  assert(idx >= 0, 'removeWrite called with nonexistent writeId.');\n  const writeToRemove = writeTree.allWrites[idx];\n  writeTree.allWrites.splice(idx, 1);\n\n  let removedWriteWasVisible = writeToRemove.visible;\n  let removedWriteOverlapsWithOtherWrites = false;\n\n  let i = writeTree.allWrites.length - 1;\n\n  while (removedWriteWasVisible && i >= 0) {\n    const currentWrite = writeTree.allWrites[i];\n    if (currentWrite.visible) {\n      if (\n        i >= idx &&\n        writeTreeRecordContainsPath_(currentWrite, writeToRemove.path)\n      ) {\n        // The removed write was completely shadowed by a subsequent write.\n        removedWriteWasVisible = false;\n      } else if (pathContains(writeToRemove.path, currentWrite.path)) {\n        // Either we're covering some writes or they're covering part of us (depending on which came first).\n        removedWriteOverlapsWithOtherWrites = true;\n      }\n    }\n    i--;\n  }\n\n  if (!removedWriteWasVisible) {\n    return false;\n  } else if (removedWriteOverlapsWithOtherWrites) {\n    // There's some shadowing going on. Just rebuild the visible writes from scratch.\n    writeTreeResetTree_(writeTree);\n    return true;\n  } else {\n    // There's no shadowing.  We can safely just remove the write(s) from visibleWrites.\n    if (writeToRemove.snap) {\n      writeTree.visibleWrites = compoundWriteRemoveWrite(\n        writeTree.visibleWrites,\n        writeToRemove.path\n      );\n    } else {\n      const children = writeToRemove.children;\n      each(children, (childName: string) => {\n        writeTree.visibleWrites = compoundWriteRemoveWrite(\n          writeTree.visibleWrites,\n          pathChild(writeToRemove.path, childName)\n        );\n      });\n    }\n    return true;\n  }\n}\n\nfunction writeTreeRecordContainsPath_(\n  writeRecord: WriteRecord,\n  path: Path\n): boolean {\n  if (writeRecord.snap) {\n    return pathContains(writeRecord.path, path);\n  } else {\n    for (const childName in writeRecord.children) {\n      if (\n        writeRecord.children.hasOwnProperty(childName) &&\n        pathContains(pathChild(writeRecord.path, childName), path)\n      ) {\n        return true;\n      }\n    }\n    return false;\n  }\n}\n\n/**\n * Re-layer the writes and merges into a tree so we can efficiently calculate event snapshots\n */\nfunction writeTreeResetTree_(writeTree: WriteTree) {\n  writeTree.visibleWrites = writeTreeLayerTree_(\n    writeTree.allWrites,\n    writeTreeDefaultFilter_,\n    newEmptyPath()\n  );\n  if (writeTree.allWrites.length > 0) {\n    writeTree.lastWriteId =\n      writeTree.allWrites[writeTree.allWrites.length - 1].writeId;\n  } else {\n    writeTree.lastWriteId = -1;\n  }\n}\n\n/**\n * The default filter used when constructing the tree. Keep everything that's visible.\n */\nfunction writeTreeDefaultFilter_(write: WriteRecord) {\n  return write.visible;\n}\n\n/**\n * Static method. Given an array of WriteRecords, a filter for which ones to include, and a path, construct the tree of\n * event data at that path.\n */\nfunction writeTreeLayerTree_(\n  writes: WriteRecord[],\n  filter: (w: WriteRecord) => boolean,\n  treeRoot: Path\n): CompoundWrite {\n  let compoundWrite = CompoundWrite.empty();\n  for (let i = 0; i < writes.length; ++i) {\n    const write = writes[i];\n    // Theory, a later set will either:\n    // a) abort a relevant transaction, so no need to worry about excluding it from calculating that transaction\n    // b) not be relevant to a transaction (separate branch), so again will not affect the data for that transaction\n    if (filter(write)) {\n      const writePath = write.path;\n      let relativePath: Path;\n      if (write.snap) {\n        if (pathContains(treeRoot, writePath)) {\n          relativePath = newRelativePath(treeRoot, writePath);\n          compoundWrite = compoundWriteAddWrite(\n            compoundWrite,\n            relativePath,\n            write.snap\n          );\n        } else if (pathContains(writePath, treeRoot)) {\n          relativePath = newRelativePath(writePath, treeRoot);\n          compoundWrite = compoundWriteAddWrite(\n            compoundWrite,\n            newEmptyPath(),\n            write.snap.getChild(relativePath)\n          );\n        } else {\n          // There is no overlap between root path and write path, ignore write\n        }\n      } else if (write.children) {\n        if (pathContains(treeRoot, writePath)) {\n          relativePath = newRelativePath(treeRoot, writePath);\n          compoundWrite = compoundWriteAddWrites(\n            compoundWrite,\n            relativePath,\n            write.children\n          );\n        } else if (pathContains(writePath, treeRoot)) {\n          relativePath = newRelativePath(writePath, treeRoot);\n          if (pathIsEmpty(relativePath)) {\n            compoundWrite = compoundWriteAddWrites(\n              compoundWrite,\n              newEmptyPath(),\n              write.children\n            );\n          } else {\n            const child = safeGet(write.children, pathGetFront(relativePath));\n            if (child) {\n              // There exists a child in this node that matches the root path\n              const deepNode = child.getChild(pathPopFront(relativePath));\n              compoundWrite = compoundWriteAddWrite(\n                compoundWrite,\n                newEmptyPath(),\n                deepNode\n              );\n            }\n          }\n        } else {\n          // There is no overlap between root path and write path, ignore write\n        }\n      } else {\n        throw assertionError('WriteRecord should have .snap or .children');\n      }\n    }\n  }\n  return compoundWrite;\n}\n\n/**\n * Return a complete snapshot for the given path if there's visible write data at that path, else null.\n * No server data is considered.\n *\n */\nexport function writeTreeGetCompleteWriteData(\n  writeTree: WriteTree,\n  path: Path\n): Node | null {\n  return compoundWriteGetCompleteNode(writeTree.visibleWrites, path);\n}\n\n/**\n * Given optional, underlying server data, and an optional set of constraints (exclude some sets, include hidden\n * writes), attempt to calculate a complete snapshot for the given path\n *\n * @param writeIdsToExclude - An optional set to be excluded\n * @param includeHiddenWrites - Defaults to false, whether or not to layer on writes with visible set to false\n */\nexport function writeTreeCalcCompleteEventCache(\n  writeTree: WriteTree,\n  treePath: Path,\n  completeServerCache: Node | null,\n  writeIdsToExclude?: number[],\n  includeHiddenWrites?: boolean\n): Node | null {\n  if (!writeIdsToExclude && !includeHiddenWrites) {\n    const shadowingNode = compoundWriteGetCompleteNode(\n      writeTree.visibleWrites,\n      treePath\n    );\n    if (shadowingNode != null) {\n      return shadowingNode;\n    } else {\n      const subMerge = compoundWriteChildCompoundWrite(\n        writeTree.visibleWrites,\n        treePath\n      );\n      if (compoundWriteIsEmpty(subMerge)) {\n        return completeServerCache;\n      } else if (\n        completeServerCache == null &&\n        !compoundWriteHasCompleteWrite(subMerge, newEmptyPath())\n      ) {\n        // We wouldn't have a complete snapshot, since there's no underlying data and no complete shadow\n        return null;\n      } else {\n        const layeredCache = completeServerCache || ChildrenNode.EMPTY_NODE;\n        return compoundWriteApply(subMerge, layeredCache);\n      }\n    }\n  } else {\n    const merge = compoundWriteChildCompoundWrite(\n      writeTree.visibleWrites,\n      treePath\n    );\n    if (!includeHiddenWrites && compoundWriteIsEmpty(merge)) {\n      return completeServerCache;\n    } else {\n      // If the server cache is null, and we don't have a complete cache, we need to return null\n      if (\n        !includeHiddenWrites &&\n        completeServerCache == null &&\n        !compoundWriteHasCompleteWrite(merge, newEmptyPath())\n      ) {\n        return null;\n      } else {\n        const filter = function (write: WriteRecord) {\n          return (\n            (write.visible || includeHiddenWrites) &&\n            (!writeIdsToExclude ||\n              !~writeIdsToExclude.indexOf(write.writeId)) &&\n            (pathContains(write.path, treePath) ||\n              pathContains(treePath, write.path))\n          );\n        };\n        const mergeAtPath = writeTreeLayerTree_(\n          writeTree.allWrites,\n          filter,\n          treePath\n        );\n        const layeredCache = completeServerCache || ChildrenNode.EMPTY_NODE;\n        return compoundWriteApply(mergeAtPath, layeredCache);\n      }\n    }\n  }\n}\n\n/**\n * With optional, underlying server data, attempt to return a children node of children that we have complete data for.\n * Used when creating new views, to pre-fill their complete event children snapshot.\n */\nexport function writeTreeCalcCompleteEventChildren(\n  writeTree: WriteTree,\n  treePath: Path,\n  completeServerChildren: ChildrenNode | null\n) {\n  let completeChildren = ChildrenNode.EMPTY_NODE as Node;\n  const topLevelSet = compoundWriteGetCompleteNode(\n    writeTree.visibleWrites,\n    treePath\n  );\n  if (topLevelSet) {\n    if (!topLevelSet.isLeafNode()) {\n      // we're shadowing everything. Return the children.\n      topLevelSet.forEachChild(PRIORITY_INDEX, (childName, childSnap) => {\n        completeChildren = completeChildren.updateImmediateChild(\n          childName,\n          childSnap\n        );\n      });\n    }\n    return completeChildren;\n  } else if (completeServerChildren) {\n    // Layer any children we have on top of this\n    // We know we don't have a top-level set, so just enumerate existing children\n    const merge = compoundWriteChildCompoundWrite(\n      writeTree.visibleWrites,\n      treePath\n    );\n    completeServerChildren.forEachChild(\n      PRIORITY_INDEX,\n      (childName, childNode) => {\n        const node = compoundWriteApply(\n          compoundWriteChildCompoundWrite(merge, new Path(childName)),\n          childNode\n        );\n        completeChildren = completeChildren.updateImmediateChild(\n          childName,\n          node\n        );\n      }\n    );\n    // Add any complete children we have from the set\n    compoundWriteGetCompleteChildren(merge).forEach(namedNode => {\n      completeChildren = completeChildren.updateImmediateChild(\n        namedNode.name,\n        namedNode.node\n      );\n    });\n    return completeChildren;\n  } else {\n    // We don't have anything to layer on top of. Layer on any children we have\n    // Note that we can return an empty snap if we have a defined delete\n    const merge = compoundWriteChildCompoundWrite(\n      writeTree.visibleWrites,\n      treePath\n    );\n    compoundWriteGetCompleteChildren(merge).forEach(namedNode => {\n      completeChildren = completeChildren.updateImmediateChild(\n        namedNode.name,\n        namedNode.node\n      );\n    });\n    return completeChildren;\n  }\n}\n\n/**\n * Given that the underlying server data has updated, determine what, if anything, needs to be\n * applied to the event cache.\n *\n * Possibilities:\n *\n * 1. No writes are shadowing. Events should be raised, the snap to be applied comes from the server data\n *\n * 2. Some write is completely shadowing. No events to be raised\n *\n * 3. Is partially shadowed. Events\n *\n * Either existingEventSnap or existingServerSnap must exist\n */\nexport function writeTreeCalcEventCacheAfterServerOverwrite(\n  writeTree: WriteTree,\n  treePath: Path,\n  childPath: Path,\n  existingEventSnap: Node | null,\n  existingServerSnap: Node | null\n): Node | null {\n  assert(\n    existingEventSnap || existingServerSnap,\n    'Either existingEventSnap or existingServerSnap must exist'\n  );\n  const path = pathChild(treePath, childPath);\n  if (compoundWriteHasCompleteWrite(writeTree.visibleWrites, path)) {\n    // At this point we can probably guarantee that we're in case 2, meaning no events\n    // May need to check visibility while doing the findRootMostValueAndPath call\n    return null;\n  } else {\n    // No complete shadowing. We're either partially shadowing or not shadowing at all.\n    const childMerge = compoundWriteChildCompoundWrite(\n      writeTree.visibleWrites,\n      path\n    );\n    if (compoundWriteIsEmpty(childMerge)) {\n      // We're not shadowing at all. Case 1\n      return existingServerSnap.getChild(childPath);\n    } else {\n      // This could be more efficient if the serverNode + updates doesn't change the eventSnap\n      // However this is tricky to find out, since user updates don't necessary change the server\n      // snap, e.g. priority updates on empty nodes, or deep deletes. Another special case is if the server\n      // adds nodes, but doesn't change any existing writes. It is therefore not enough to\n      // only check if the updates change the serverNode.\n      // Maybe check if the merge tree contains these special cases and only do a full overwrite in that case?\n      return compoundWriteApply(\n        childMerge,\n        existingServerSnap.getChild(childPath)\n      );\n    }\n  }\n}\n\n/**\n * Returns a complete child for a given server snap after applying all user writes or null if there is no\n * complete child for this ChildKey.\n */\nexport function writeTreeCalcCompleteChild(\n  writeTree: WriteTree,\n  treePath: Path,\n  childKey: string,\n  existingServerSnap: CacheNode\n): Node | null {\n  const path = pathChild(treePath, childKey);\n  const shadowingNode = compoundWriteGetCompleteNode(\n    writeTree.visibleWrites,\n    path\n  );\n  if (shadowingNode != null) {\n    return shadowingNode;\n  } else {\n    if (existingServerSnap.isCompleteForChild(childKey)) {\n      const childMerge = compoundWriteChildCompoundWrite(\n        writeTree.visibleWrites,\n        path\n      );\n      return compoundWriteApply(\n        childMerge,\n        existingServerSnap.getNode().getImmediateChild(childKey)\n      );\n    } else {\n      return null;\n    }\n  }\n}\n\n/**\n * Returns a node if there is a complete overwrite for this path. More specifically, if there is a write at\n * a higher path, this will return the child of that write relative to the write and this path.\n * Returns null if there is no write at this path.\n */\nexport function writeTreeShadowingWrite(\n  writeTree: WriteTree,\n  path: Path\n): Node | null {\n  return compoundWriteGetCompleteNode(writeTree.visibleWrites, path);\n}\n\n/**\n * This method is used when processing child remove events on a query. If we can, we pull in children that were outside\n * the window, but may now be in the window.\n */\nexport function writeTreeCalcIndexedSlice(\n  writeTree: WriteTree,\n  treePath: Path,\n  completeServerData: Node | null,\n  startPost: NamedNode,\n  count: number,\n  reverse: boolean,\n  index: Index\n): NamedNode[] {\n  let toIterate: Node;\n  const merge = compoundWriteChildCompoundWrite(\n    writeTree.visibleWrites,\n    treePath\n  );\n  const shadowingNode = compoundWriteGetCompleteNode(merge, newEmptyPath());\n  if (shadowingNode != null) {\n    toIterate = shadowingNode;\n  } else if (completeServerData != null) {\n    toIterate = compoundWriteApply(merge, completeServerData);\n  } else {\n    // no children to iterate on\n    return [];\n  }\n  toIterate = toIterate.withIndex(index);\n  if (!toIterate.isEmpty() && !toIterate.isLeafNode()) {\n    const nodes = [];\n    const cmp = index.getCompare();\n    const iter = reverse\n      ? (toIterate as ChildrenNode).getReverseIteratorFrom(startPost, index)\n      : (toIterate as ChildrenNode).getIteratorFrom(startPost, index);\n    let next = iter.getNext();\n    while (next && nodes.length < count) {\n      if (cmp(next, startPost) !== 0) {\n        nodes.push(next);\n      }\n      next = iter.getNext();\n    }\n    return nodes;\n  } else {\n    return [];\n  }\n}\n\nexport function newWriteTree(): WriteTree {\n  return {\n    visibleWrites: CompoundWrite.empty(),\n    allWrites: [],\n    lastWriteId: -1\n  };\n}\n\n/**\n * WriteTree tracks all pending user-initiated writes and has methods to calculate the result of merging them\n * with underlying server data (to create \"event cache\" data).  Pending writes are added with addOverwrite()\n * and addMerge(), and removed with removeWrite().\n */\nexport interface WriteTree {\n  /**\n   * A tree tracking the result of applying all visible writes.  This does not include transactions with\n   * applyLocally=false or writes that are completely shadowed by other writes.\n   */\n  visibleWrites: CompoundWrite;\n\n  /**\n   * A list of all pending writes, regardless of visibility and shadowed-ness.  Used to calculate arbitrary\n   * sets of the changed data, such as hidden writes (from transactions) or changes with certain writes excluded (also\n   * used by transactions).\n   */\n  allWrites: WriteRecord[];\n\n  lastWriteId: number;\n}\n\n/**\n * If possible, returns a complete event cache, using the underlying server data if possible. In addition, can be used\n * to get a cache that includes hidden writes, and excludes arbitrary writes. Note that customizing the returned node\n * can lead to a more expensive calculation.\n *\n * @param writeIdsToExclude - Optional writes to exclude.\n * @param includeHiddenWrites - Defaults to false, whether or not to layer on writes with visible set to false\n */\nexport function writeTreeRefCalcCompleteEventCache(\n  writeTreeRef: WriteTreeRef,\n  completeServerCache: Node | null,\n  writeIdsToExclude?: number[],\n  includeHiddenWrites?: boolean\n): Node | null {\n  return writeTreeCalcCompleteEventCache(\n    writeTreeRef.writeTree,\n    writeTreeRef.treePath,\n    completeServerCache,\n    writeIdsToExclude,\n    includeHiddenWrites\n  );\n}\n\n/**\n * If possible, returns a children node containing all of the complete children we have data for. The returned data is a\n * mix of the given server data and write data.\n *\n */\nexport function writeTreeRefCalcCompleteEventChildren(\n  writeTreeRef: WriteTreeRef,\n  completeServerChildren: ChildrenNode | null\n): ChildrenNode {\n  return writeTreeCalcCompleteEventChildren(\n    writeTreeRef.writeTree,\n    writeTreeRef.treePath,\n    completeServerChildren\n  ) as ChildrenNode;\n}\n\n/**\n * Given that either the underlying server data has updated or the outstanding writes have updated, determine what,\n * if anything, needs to be applied to the event cache.\n *\n * Possibilities:\n *\n * 1. No writes are shadowing. Events should be raised, the snap to be applied comes from the server data\n *\n * 2. Some write is completely shadowing. No events to be raised\n *\n * 3. Is partially shadowed. Events should be raised\n *\n * Either existingEventSnap or existingServerSnap must exist, this is validated via an assert\n *\n *\n */\nexport function writeTreeRefCalcEventCacheAfterServerOverwrite(\n  writeTreeRef: WriteTreeRef,\n  path: Path,\n  existingEventSnap: Node | null,\n  existingServerSnap: Node | null\n): Node | null {\n  return writeTreeCalcEventCacheAfterServerOverwrite(\n    writeTreeRef.writeTree,\n    writeTreeRef.treePath,\n    path,\n    existingEventSnap,\n    existingServerSnap\n  );\n}\n\n/**\n * Returns a node if there is a complete overwrite for this path. More specifically, if there is a write at\n * a higher path, this will return the child of that write relative to the write and this path.\n * Returns null if there is no write at this path.\n *\n */\nexport function writeTreeRefShadowingWrite(\n  writeTreeRef: WriteTreeRef,\n  path: Path\n): Node | null {\n  return writeTreeShadowingWrite(\n    writeTreeRef.writeTree,\n    pathChild(writeTreeRef.treePath, path)\n  );\n}\n\n/**\n * This method is used when processing child remove events on a query. If we can, we pull in children that were outside\n * the window, but may now be in the window\n */\nexport function writeTreeRefCalcIndexedSlice(\n  writeTreeRef: WriteTreeRef,\n  completeServerData: Node | null,\n  startPost: NamedNode,\n  count: number,\n  reverse: boolean,\n  index: Index\n): NamedNode[] {\n  return writeTreeCalcIndexedSlice(\n    writeTreeRef.writeTree,\n    writeTreeRef.treePath,\n    completeServerData,\n    startPost,\n    count,\n    reverse,\n    index\n  );\n}\n\n/**\n * Returns a complete child for a given server snap after applying all user writes or null if there is no\n * complete child for this ChildKey.\n */\nexport function writeTreeRefCalcCompleteChild(\n  writeTreeRef: WriteTreeRef,\n  childKey: string,\n  existingServerCache: CacheNode\n): Node | null {\n  return writeTreeCalcCompleteChild(\n    writeTreeRef.writeTree,\n    writeTreeRef.treePath,\n    childKey,\n    existingServerCache\n  );\n}\n\n/**\n * Return a WriteTreeRef for a child.\n */\nexport function writeTreeRefChild(\n  writeTreeRef: WriteTreeRef,\n  childName: string\n): WriteTreeRef {\n  return newWriteTreeRef(\n    pathChild(writeTreeRef.treePath, childName),\n    writeTreeRef.writeTree\n  );\n}\n\nexport function newWriteTreeRef(\n  path: Path,\n  writeTree: WriteTree\n): WriteTreeRef {\n  return {\n    treePath: path,\n    writeTree\n  };\n}\n\n/**\n * A WriteTreeRef wraps a WriteTree and a path, for convenient access to a particular subtree.  All of the methods\n * just proxy to the underlying WriteTree.\n *\n */\nexport interface WriteTreeRef {\n  /**\n   * The path to this particular write tree ref. Used for calling methods on writeTree_ while exposing a simpler\n   * interface to callers.\n   */\n  readonly treePath: Path;\n\n  /**\n   * * A reference to the actual tree of write data. All methods are pass-through to the tree, but with the appropriate\n   * path prefixed.\n   *\n   * This lets us make cheap references to points in the tree for sync points without having to copy and maintain all of\n   * the data.\n   */\n  readonly writeTree: WriteTree;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, assertionError } from '@firebase/util';\n\nimport {\n  Change,\n  ChangeType,\n  changeChildAdded,\n  changeChildChanged,\n  changeChildRemoved\n} from './Change';\n\nexport class ChildChangeAccumulator {\n  private readonly changeMap: Map<string, Change> = new Map();\n\n  trackChildChange(change: Change) {\n    const type = change.type;\n    const childKey = change.childName!;\n    assert(\n      type === ChangeType.CHILD_ADDED ||\n        type === ChangeType.CHILD_CHANGED ||\n        type === ChangeType.CHILD_REMOVED,\n      'Only child changes supported for tracking'\n    );\n    assert(\n      childKey !== '.priority',\n      'Only non-priority child changes can be tracked.'\n    );\n    const oldChange = this.changeMap.get(childKey);\n    if (oldChange) {\n      const oldType = oldChange.type;\n      if (\n        type === ChangeType.CHILD_ADDED &&\n        oldType === ChangeType.CHILD_REMOVED\n      ) {\n        this.changeMap.set(\n          childKey,\n          changeChildChanged(\n            childKey,\n            change.snapshotNode,\n            oldChange.snapshotNode\n          )\n        );\n      } else if (\n        type === ChangeType.CHILD_REMOVED &&\n        oldType === ChangeType.CHILD_ADDED\n      ) {\n        this.changeMap.delete(childKey);\n      } else if (\n        type === ChangeType.CHILD_REMOVED &&\n        oldType === ChangeType.CHILD_CHANGED\n      ) {\n        this.changeMap.set(\n          childKey,\n          changeChildRemoved(childKey, oldChange.oldSnap)\n        );\n      } else if (\n        type === ChangeType.CHILD_CHANGED &&\n        oldType === ChangeType.CHILD_ADDED\n      ) {\n        this.changeMap.set(\n          childKey,\n          changeChildAdded(childKey, change.snapshotNode)\n        );\n      } else if (\n        type === ChangeType.CHILD_CHANGED &&\n        oldType === ChangeType.CHILD_CHANGED\n      ) {\n        this.changeMap.set(\n          childKey,\n          changeChildChanged(childKey, change.snapshotNode, oldChange.oldSnap)\n        );\n      } else {\n        throw assertionError(\n          'Illegal combination of changes: ' +\n            change +\n            ' occurred after ' +\n            oldChange\n        );\n      }\n    } else {\n      this.changeMap.set(childKey, change);\n    }\n  }\n\n  getChanges(): Change[] {\n    return Array.from(this.changeMap.values());\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Index } from '../snap/indexes/Index';\nimport { NamedNode, Node } from '../snap/Node';\nimport {\n  WriteTreeRef,\n  writeTreeRefCalcCompleteChild,\n  writeTreeRefCalcIndexedSlice\n} from '../WriteTree';\n\nimport { CacheNode } from './CacheNode';\nimport { ViewCache, viewCacheGetCompleteServerSnap } from './ViewCache';\n\n/**\n * Since updates to filtered nodes might require nodes to be pulled in from \"outside\" the node, this interface\n * can help to get complete children that can be pulled in.\n * A class implementing this interface takes potentially multiple sources (e.g. user writes, server data from\n * other views etc.) to try it's best to get a complete child that might be useful in pulling into the view.\n *\n * @interface\n */\nexport interface CompleteChildSource {\n  getCompleteChild(childKey: string): Node | null;\n\n  getChildAfterChild(\n    index: Index,\n    child: NamedNode,\n    reverse: boolean\n  ): NamedNode | null;\n}\n\n/**\n * An implementation of CompleteChildSource that never returns any additional children\n */\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport class NoCompleteChildSource_ implements CompleteChildSource {\n  getCompleteChild(childKey?: string): Node | null {\n    return null;\n  }\n  getChildAfterChild(\n    index?: Index,\n    child?: NamedNode,\n    reverse?: boolean\n  ): NamedNode | null {\n    return null;\n  }\n}\n\n/**\n * Singleton instance.\n */\nexport const NO_COMPLETE_CHILD_SOURCE = new NoCompleteChildSource_();\n\n/**\n * An implementation of CompleteChildSource that uses a WriteTree in addition to any other server data or\n * old event caches available to calculate complete children.\n */\nexport class WriteTreeCompleteChildSource implements CompleteChildSource {\n  constructor(\n    private writes_: WriteTreeRef,\n    private viewCache_: ViewCache,\n    private optCompleteServerCache_: Node | null = null\n  ) {}\n  getCompleteChild(childKey: string): Node | null {\n    const node = this.viewCache_.eventCache;\n    if (node.isCompleteForChild(childKey)) {\n      return node.getNode().getImmediateChild(childKey);\n    } else {\n      const serverNode =\n        this.optCompleteServerCache_ != null\n          ? new CacheNode(this.optCompleteServerCache_, true, false)\n          : this.viewCache_.serverCache;\n      return writeTreeRefCalcCompleteChild(this.writes_, childKey, serverNode);\n    }\n  }\n  getChildAfterChild(\n    index: Index,\n    child: NamedNode,\n    reverse: boolean\n  ): NamedNode | null {\n    const completeServerData =\n      this.optCompleteServerCache_ != null\n        ? this.optCompleteServerCache_\n        : viewCacheGetCompleteServerSnap(this.viewCache_);\n    const nodes = writeTreeRefCalcIndexedSlice(\n      this.writes_,\n      completeServerData,\n      child,\n      1,\n      reverse,\n      index\n    );\n    if (nodes.length === 0) {\n      return null;\n    } else {\n      return nodes[0];\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, assertionError } from '@firebase/util';\n\nimport { AckUserWrite } from '../operation/AckUserWrite';\nimport { Merge } from '../operation/Merge';\nimport { Operation, OperationType } from '../operation/Operation';\nimport { Overwrite } from '../operation/Overwrite';\nimport { ChildrenNode } from '../snap/ChildrenNode';\nimport { KEY_INDEX } from '../snap/indexes/KeyIndex';\nimport { Node } from '../snap/Node';\nimport { ImmutableTree } from '../util/ImmutableTree';\nimport {\n  newEmptyPath,\n  Path,\n  pathChild,\n  pathGetBack,\n  pathGetFront,\n  pathGetLength,\n  pathIsEmpty,\n  pathParent,\n  pathPopFront\n} from '../util/Path';\nimport {\n  WriteTreeRef,\n  writeTreeRefCalcCompleteChild,\n  writeTreeRefCalcCompleteEventCache,\n  writeTreeRefCalcCompleteEventChildren,\n  writeTreeRefCalcEventCacheAfterServerOverwrite,\n  writeTreeRefShadowingWrite\n} from '../WriteTree';\n\nimport { Change, changeValue } from './Change';\nimport { ChildChangeAccumulator } from './ChildChangeAccumulator';\nimport {\n  CompleteChildSource,\n  NO_COMPLETE_CHILD_SOURCE,\n  WriteTreeCompleteChildSource\n} from './CompleteChildSource';\nimport { NodeFilter } from './filter/NodeFilter';\nimport {\n  ViewCache,\n  viewCacheGetCompleteEventSnap,\n  viewCacheGetCompleteServerSnap,\n  viewCacheUpdateEventSnap,\n  viewCacheUpdateServerSnap\n} from './ViewCache';\n\nexport interface ProcessorResult {\n  readonly viewCache: ViewCache;\n  readonly changes: Change[];\n}\n\nexport interface ViewProcessor {\n  readonly filter: NodeFilter;\n}\n\nexport function newViewProcessor(filter: NodeFilter): ViewProcessor {\n  return { filter };\n}\n\nexport function viewProcessorAssertIndexed(\n  viewProcessor: ViewProcessor,\n  viewCache: ViewCache\n): void {\n  assert(\n    viewCache.eventCache.getNode().isIndexed(viewProcessor.filter.getIndex()),\n    'Event snap not indexed'\n  );\n  assert(\n    viewCache.serverCache.getNode().isIndexed(viewProcessor.filter.getIndex()),\n    'Server snap not indexed'\n  );\n}\n\nexport function viewProcessorApplyOperation(\n  viewProcessor: ViewProcessor,\n  oldViewCache: ViewCache,\n  operation: Operation,\n  writesCache: WriteTreeRef,\n  completeCache: Node | null\n): ProcessorResult {\n  const accumulator = new ChildChangeAccumulator();\n  let newViewCache, filterServerNode;\n  if (operation.type === OperationType.OVERWRITE) {\n    const overwrite = operation as Overwrite;\n    if (overwrite.source.fromUser) {\n      newViewCache = viewProcessorApplyUserOverwrite(\n        viewProcessor,\n        oldViewCache,\n        overwrite.path,\n        overwrite.snap,\n        writesCache,\n        completeCache,\n        accumulator\n      );\n    } else {\n      assert(overwrite.source.fromServer, 'Unknown source.');\n      // We filter the node if it's a tagged update or the node has been previously filtered  and the\n      // update is not at the root in which case it is ok (and necessary) to mark the node unfiltered\n      // again\n      filterServerNode =\n        overwrite.source.tagged ||\n        (oldViewCache.serverCache.isFiltered() && !pathIsEmpty(overwrite.path));\n      newViewCache = viewProcessorApplyServerOverwrite(\n        viewProcessor,\n        oldViewCache,\n        overwrite.path,\n        overwrite.snap,\n        writesCache,\n        completeCache,\n        filterServerNode,\n        accumulator\n      );\n    }\n  } else if (operation.type === OperationType.MERGE) {\n    const merge = operation as Merge;\n    if (merge.source.fromUser) {\n      newViewCache = viewProcessorApplyUserMerge(\n        viewProcessor,\n        oldViewCache,\n        merge.path,\n        merge.children,\n        writesCache,\n        completeCache,\n        accumulator\n      );\n    } else {\n      assert(merge.source.fromServer, 'Unknown source.');\n      // We filter the node if it's a tagged update or the node has been previously filtered\n      filterServerNode =\n        merge.source.tagged || oldViewCache.serverCache.isFiltered();\n      newViewCache = viewProcessorApplyServerMerge(\n        viewProcessor,\n        oldViewCache,\n        merge.path,\n        merge.children,\n        writesCache,\n        completeCache,\n        filterServerNode,\n        accumulator\n      );\n    }\n  } else if (operation.type === OperationType.ACK_USER_WRITE) {\n    const ackUserWrite = operation as AckUserWrite;\n    if (!ackUserWrite.revert) {\n      newViewCache = viewProcessorAckUserWrite(\n        viewProcessor,\n        oldViewCache,\n        ackUserWrite.path,\n        ackUserWrite.affectedTree,\n        writesCache,\n        completeCache,\n        accumulator\n      );\n    } else {\n      newViewCache = viewProcessorRevertUserWrite(\n        viewProcessor,\n        oldViewCache,\n        ackUserWrite.path,\n        writesCache,\n        completeCache,\n        accumulator\n      );\n    }\n  } else if (operation.type === OperationType.LISTEN_COMPLETE) {\n    newViewCache = viewProcessorListenComplete(\n      viewProcessor,\n      oldViewCache,\n      operation.path,\n      writesCache,\n      accumulator\n    );\n  } else {\n    throw assertionError('Unknown operation type: ' + operation.type);\n  }\n  const changes = accumulator.getChanges();\n  viewProcessorMaybeAddValueEvent(oldViewCache, newViewCache, changes);\n  return { viewCache: newViewCache, changes };\n}\n\nfunction viewProcessorMaybeAddValueEvent(\n  oldViewCache: ViewCache,\n  newViewCache: ViewCache,\n  accumulator: Change[]\n): void {\n  const eventSnap = newViewCache.eventCache;\n  if (eventSnap.isFullyInitialized()) {\n    const isLeafOrEmpty =\n      eventSnap.getNode().isLeafNode() || eventSnap.getNode().isEmpty();\n    const oldCompleteSnap = viewCacheGetCompleteEventSnap(oldViewCache);\n    if (\n      accumulator.length > 0 ||\n      !oldViewCache.eventCache.isFullyInitialized() ||\n      (isLeafOrEmpty && !eventSnap.getNode().equals(oldCompleteSnap)) ||\n      !eventSnap.getNode().getPriority().equals(oldCompleteSnap.getPriority())\n    ) {\n      accumulator.push(\n        changeValue(viewCacheGetCompleteEventSnap(newViewCache))\n      );\n    }\n  }\n}\n\nfunction viewProcessorGenerateEventCacheAfterServerEvent(\n  viewProcessor: ViewProcessor,\n  viewCache: ViewCache,\n  changePath: Path,\n  writesCache: WriteTreeRef,\n  source: CompleteChildSource,\n  accumulator: ChildChangeAccumulator\n): ViewCache {\n  const oldEventSnap = viewCache.eventCache;\n  if (writeTreeRefShadowingWrite(writesCache, changePath) != null) {\n    // we have a shadowing write, ignore changes\n    return viewCache;\n  } else {\n    let newEventCache, serverNode;\n    if (pathIsEmpty(changePath)) {\n      // TODO: figure out how this plays with \"sliding ack windows\"\n      assert(\n        viewCache.serverCache.isFullyInitialized(),\n        'If change path is empty, we must have complete server data'\n      );\n      if (viewCache.serverCache.isFiltered()) {\n        // We need to special case this, because we need to only apply writes to complete children, or\n        // we might end up raising events for incomplete children. If the server data is filtered deep\n        // writes cannot be guaranteed to be complete\n        const serverCache = viewCacheGetCompleteServerSnap(viewCache);\n        const completeChildren =\n          serverCache instanceof ChildrenNode\n            ? serverCache\n            : ChildrenNode.EMPTY_NODE;\n        const completeEventChildren = writeTreeRefCalcCompleteEventChildren(\n          writesCache,\n          completeChildren\n        );\n        newEventCache = viewProcessor.filter.updateFullNode(\n          viewCache.eventCache.getNode(),\n          completeEventChildren,\n          accumulator\n        );\n      } else {\n        const completeNode = writeTreeRefCalcCompleteEventCache(\n          writesCache,\n          viewCacheGetCompleteServerSnap(viewCache)\n        );\n        newEventCache = viewProcessor.filter.updateFullNode(\n          viewCache.eventCache.getNode(),\n          completeNode,\n          accumulator\n        );\n      }\n    } else {\n      const childKey = pathGetFront(changePath);\n      if (childKey === '.priority') {\n        assert(\n          pathGetLength(changePath) === 1,\n          \"Can't have a priority with additional path components\"\n        );\n        const oldEventNode = oldEventSnap.getNode();\n        serverNode = viewCache.serverCache.getNode();\n        // we might have overwrites for this priority\n        const updatedPriority = writeTreeRefCalcEventCacheAfterServerOverwrite(\n          writesCache,\n          changePath,\n          oldEventNode,\n          serverNode\n        );\n        if (updatedPriority != null) {\n          newEventCache = viewProcessor.filter.updatePriority(\n            oldEventNode,\n            updatedPriority\n          );\n        } else {\n          // priority didn't change, keep old node\n          newEventCache = oldEventSnap.getNode();\n        }\n      } else {\n        const childChangePath = pathPopFront(changePath);\n        // update child\n        let newEventChild;\n        if (oldEventSnap.isCompleteForChild(childKey)) {\n          serverNode = viewCache.serverCache.getNode();\n          const eventChildUpdate =\n            writeTreeRefCalcEventCacheAfterServerOverwrite(\n              writesCache,\n              changePath,\n              oldEventSnap.getNode(),\n              serverNode\n            );\n          if (eventChildUpdate != null) {\n            newEventChild = oldEventSnap\n              .getNode()\n              .getImmediateChild(childKey)\n              .updateChild(childChangePath, eventChildUpdate);\n          } else {\n            // Nothing changed, just keep the old child\n            newEventChild = oldEventSnap.getNode().getImmediateChild(childKey);\n          }\n        } else {\n          newEventChild = writeTreeRefCalcCompleteChild(\n            writesCache,\n            childKey,\n            viewCache.serverCache\n          );\n        }\n        if (newEventChild != null) {\n          newEventCache = viewProcessor.filter.updateChild(\n            oldEventSnap.getNode(),\n            childKey,\n            newEventChild,\n            childChangePath,\n            source,\n            accumulator\n          );\n        } else {\n          // no complete child available or no change\n          newEventCache = oldEventSnap.getNode();\n        }\n      }\n    }\n    return viewCacheUpdateEventSnap(\n      viewCache,\n      newEventCache,\n      oldEventSnap.isFullyInitialized() || pathIsEmpty(changePath),\n      viewProcessor.filter.filtersNodes()\n    );\n  }\n}\n\nfunction viewProcessorApplyServerOverwrite(\n  viewProcessor: ViewProcessor,\n  oldViewCache: ViewCache,\n  changePath: Path,\n  changedSnap: Node,\n  writesCache: WriteTreeRef,\n  completeCache: Node | null,\n  filterServerNode: boolean,\n  accumulator: ChildChangeAccumulator\n): ViewCache {\n  const oldServerSnap = oldViewCache.serverCache;\n  let newServerCache;\n  const serverFilter = filterServerNode\n    ? viewProcessor.filter\n    : viewProcessor.filter.getIndexedFilter();\n  if (pathIsEmpty(changePath)) {\n    newServerCache = serverFilter.updateFullNode(\n      oldServerSnap.getNode(),\n      changedSnap,\n      null\n    );\n  } else if (serverFilter.filtersNodes() && !oldServerSnap.isFiltered()) {\n    // we want to filter the server node, but we didn't filter the server node yet, so simulate a full update\n    const newServerNode = oldServerSnap\n      .getNode()\n      .updateChild(changePath, changedSnap);\n    newServerCache = serverFilter.updateFullNode(\n      oldServerSnap.getNode(),\n      newServerNode,\n      null\n    );\n  } else {\n    const childKey = pathGetFront(changePath);\n    if (\n      !oldServerSnap.isCompleteForPath(changePath) &&\n      pathGetLength(changePath) > 1\n    ) {\n      // We don't update incomplete nodes with updates intended for other listeners\n      return oldViewCache;\n    }\n    const childChangePath = pathPopFront(changePath);\n    const childNode = oldServerSnap.getNode().getImmediateChild(childKey);\n    const newChildNode = childNode.updateChild(childChangePath, changedSnap);\n    if (childKey === '.priority') {\n      newServerCache = serverFilter.updatePriority(\n        oldServerSnap.getNode(),\n        newChildNode\n      );\n    } else {\n      newServerCache = serverFilter.updateChild(\n        oldServerSnap.getNode(),\n        childKey,\n        newChildNode,\n        childChangePath,\n        NO_COMPLETE_CHILD_SOURCE,\n        null\n      );\n    }\n  }\n  const newViewCache = viewCacheUpdateServerSnap(\n    oldViewCache,\n    newServerCache,\n    oldServerSnap.isFullyInitialized() || pathIsEmpty(changePath),\n    serverFilter.filtersNodes()\n  );\n  const source = new WriteTreeCompleteChildSource(\n    writesCache,\n    newViewCache,\n    completeCache\n  );\n  return viewProcessorGenerateEventCacheAfterServerEvent(\n    viewProcessor,\n    newViewCache,\n    changePath,\n    writesCache,\n    source,\n    accumulator\n  );\n}\n\nfunction viewProcessorApplyUserOverwrite(\n  viewProcessor: ViewProcessor,\n  oldViewCache: ViewCache,\n  changePath: Path,\n  changedSnap: Node,\n  writesCache: WriteTreeRef,\n  completeCache: Node | null,\n  accumulator: ChildChangeAccumulator\n): ViewCache {\n  const oldEventSnap = oldViewCache.eventCache;\n  let newViewCache, newEventCache;\n  const source = new WriteTreeCompleteChildSource(\n    writesCache,\n    oldViewCache,\n    completeCache\n  );\n  if (pathIsEmpty(changePath)) {\n    newEventCache = viewProcessor.filter.updateFullNode(\n      oldViewCache.eventCache.getNode(),\n      changedSnap,\n      accumulator\n    );\n    newViewCache = viewCacheUpdateEventSnap(\n      oldViewCache,\n      newEventCache,\n      true,\n      viewProcessor.filter.filtersNodes()\n    );\n  } else {\n    const childKey = pathGetFront(changePath);\n    if (childKey === '.priority') {\n      newEventCache = viewProcessor.filter.updatePriority(\n        oldViewCache.eventCache.getNode(),\n        changedSnap\n      );\n      newViewCache = viewCacheUpdateEventSnap(\n        oldViewCache,\n        newEventCache,\n        oldEventSnap.isFullyInitialized(),\n        oldEventSnap.isFiltered()\n      );\n    } else {\n      const childChangePath = pathPopFront(changePath);\n      const oldChild = oldEventSnap.getNode().getImmediateChild(childKey);\n      let newChild;\n      if (pathIsEmpty(childChangePath)) {\n        // Child overwrite, we can replace the child\n        newChild = changedSnap;\n      } else {\n        const childNode = source.getCompleteChild(childKey);\n        if (childNode != null) {\n          if (\n            pathGetBack(childChangePath) === '.priority' &&\n            childNode.getChild(pathParent(childChangePath)).isEmpty()\n          ) {\n            // This is a priority update on an empty node. If this node exists on the server, the\n            // server will send down the priority in the update, so ignore for now\n            newChild = childNode;\n          } else {\n            newChild = childNode.updateChild(childChangePath, changedSnap);\n          }\n        } else {\n          // There is no complete child node available\n          newChild = ChildrenNode.EMPTY_NODE;\n        }\n      }\n      if (!oldChild.equals(newChild)) {\n        const newEventSnap = viewProcessor.filter.updateChild(\n          oldEventSnap.getNode(),\n          childKey,\n          newChild,\n          childChangePath,\n          source,\n          accumulator\n        );\n        newViewCache = viewCacheUpdateEventSnap(\n          oldViewCache,\n          newEventSnap,\n          oldEventSnap.isFullyInitialized(),\n          viewProcessor.filter.filtersNodes()\n        );\n      } else {\n        newViewCache = oldViewCache;\n      }\n    }\n  }\n  return newViewCache;\n}\n\nfunction viewProcessorCacheHasChild(\n  viewCache: ViewCache,\n  childKey: string\n): boolean {\n  return viewCache.eventCache.isCompleteForChild(childKey);\n}\n\nfunction viewProcessorApplyUserMerge(\n  viewProcessor: ViewProcessor,\n  viewCache: ViewCache,\n  path: Path,\n  changedChildren: ImmutableTree<Node>,\n  writesCache: WriteTreeRef,\n  serverCache: Node | null,\n  accumulator: ChildChangeAccumulator\n): ViewCache {\n  // HACK: In the case of a limit query, there may be some changes that bump things out of the\n  // window leaving room for new items.  It's important we process these changes first, so we\n  // iterate the changes twice, first processing any that affect items currently in view.\n  // TODO: I consider an item \"in view\" if cacheHasChild is true, which checks both the server\n  // and event snap.  I'm not sure if this will result in edge cases when a child is in one but\n  // not the other.\n  let curViewCache = viewCache;\n  changedChildren.foreach((relativePath, childNode) => {\n    const writePath = pathChild(path, relativePath);\n    if (viewProcessorCacheHasChild(viewCache, pathGetFront(writePath))) {\n      curViewCache = viewProcessorApplyUserOverwrite(\n        viewProcessor,\n        curViewCache,\n        writePath,\n        childNode,\n        writesCache,\n        serverCache,\n        accumulator\n      );\n    }\n  });\n\n  changedChildren.foreach((relativePath, childNode) => {\n    const writePath = pathChild(path, relativePath);\n    if (!viewProcessorCacheHasChild(viewCache, pathGetFront(writePath))) {\n      curViewCache = viewProcessorApplyUserOverwrite(\n        viewProcessor,\n        curViewCache,\n        writePath,\n        childNode,\n        writesCache,\n        serverCache,\n        accumulator\n      );\n    }\n  });\n\n  return curViewCache;\n}\n\nfunction viewProcessorApplyMerge(\n  viewProcessor: ViewProcessor,\n  node: Node,\n  merge: ImmutableTree<Node>\n): Node {\n  merge.foreach((relativePath, childNode) => {\n    node = node.updateChild(relativePath, childNode);\n  });\n  return node;\n}\n\nfunction viewProcessorApplyServerMerge(\n  viewProcessor: ViewProcessor,\n  viewCache: ViewCache,\n  path: Path,\n  changedChildren: ImmutableTree<Node>,\n  writesCache: WriteTreeRef,\n  serverCache: Node | null,\n  filterServerNode: boolean,\n  accumulator: ChildChangeAccumulator\n): ViewCache {\n  // If we don't have a cache yet, this merge was intended for a previously listen in the same location. Ignore it and\n  // wait for the complete data update coming soon.\n  if (\n    viewCache.serverCache.getNode().isEmpty() &&\n    !viewCache.serverCache.isFullyInitialized()\n  ) {\n    return viewCache;\n  }\n\n  // HACK: In the case of a limit query, there may be some changes that bump things out of the\n  // window leaving room for new items.  It's important we process these changes first, so we\n  // iterate the changes twice, first processing any that affect items currently in view.\n  // TODO: I consider an item \"in view\" if cacheHasChild is true, which checks both the server\n  // and event snap.  I'm not sure if this will result in edge cases when a child is in one but\n  // not the other.\n  let curViewCache = viewCache;\n  let viewMergeTree: ImmutableTree<Node>;\n  if (pathIsEmpty(path)) {\n    viewMergeTree = changedChildren;\n  } else {\n    viewMergeTree = new ImmutableTree<Node>(null).setTree(\n      path,\n      changedChildren\n    );\n  }\n  const serverNode = viewCache.serverCache.getNode();\n  viewMergeTree.children.inorderTraversal((childKey, childTree) => {\n    if (serverNode.hasChild(childKey)) {\n      const serverChild = viewCache.serverCache\n        .getNode()\n        .getImmediateChild(childKey);\n      const newChild = viewProcessorApplyMerge(\n        viewProcessor,\n        serverChild,\n        childTree\n      );\n      curViewCache = viewProcessorApplyServerOverwrite(\n        viewProcessor,\n        curViewCache,\n        new Path(childKey),\n        newChild,\n        writesCache,\n        serverCache,\n        filterServerNode,\n        accumulator\n      );\n    }\n  });\n  viewMergeTree.children.inorderTraversal((childKey, childMergeTree) => {\n    const isUnknownDeepMerge =\n      !viewCache.serverCache.isCompleteForChild(childKey) &&\n      childMergeTree.value === null;\n    if (!serverNode.hasChild(childKey) && !isUnknownDeepMerge) {\n      const serverChild = viewCache.serverCache\n        .getNode()\n        .getImmediateChild(childKey);\n      const newChild = viewProcessorApplyMerge(\n        viewProcessor,\n        serverChild,\n        childMergeTree\n      );\n      curViewCache = viewProcessorApplyServerOverwrite(\n        viewProcessor,\n        curViewCache,\n        new Path(childKey),\n        newChild,\n        writesCache,\n        serverCache,\n        filterServerNode,\n        accumulator\n      );\n    }\n  });\n\n  return curViewCache;\n}\n\nfunction viewProcessorAckUserWrite(\n  viewProcessor: ViewProcessor,\n  viewCache: ViewCache,\n  ackPath: Path,\n  affectedTree: ImmutableTree<boolean>,\n  writesCache: WriteTreeRef,\n  completeCache: Node | null,\n  accumulator: ChildChangeAccumulator\n): ViewCache {\n  if (writeTreeRefShadowingWrite(writesCache, ackPath) != null) {\n    return viewCache;\n  }\n\n  // Only filter server node if it is currently filtered\n  const filterServerNode = viewCache.serverCache.isFiltered();\n\n  // Essentially we'll just get our existing server cache for the affected paths and re-apply it as a server update\n  // now that it won't be shadowed.\n  const serverCache = viewCache.serverCache;\n  if (affectedTree.value != null) {\n    // This is an overwrite.\n    if (\n      (pathIsEmpty(ackPath) && serverCache.isFullyInitialized()) ||\n      serverCache.isCompleteForPath(ackPath)\n    ) {\n      return viewProcessorApplyServerOverwrite(\n        viewProcessor,\n        viewCache,\n        ackPath,\n        serverCache.getNode().getChild(ackPath),\n        writesCache,\n        completeCache,\n        filterServerNode,\n        accumulator\n      );\n    } else if (pathIsEmpty(ackPath)) {\n      // This is a goofy edge case where we are acking data at this location but don't have full data.  We\n      // should just re-apply whatever we have in our cache as a merge.\n      let changedChildren = new ImmutableTree<Node>(null);\n      serverCache.getNode().forEachChild(KEY_INDEX, (name, node) => {\n        changedChildren = changedChildren.set(new Path(name), node);\n      });\n      return viewProcessorApplyServerMerge(\n        viewProcessor,\n        viewCache,\n        ackPath,\n        changedChildren,\n        writesCache,\n        completeCache,\n        filterServerNode,\n        accumulator\n      );\n    } else {\n      return viewCache;\n    }\n  } else {\n    // This is a merge.\n    let changedChildren = new ImmutableTree<Node>(null);\n    affectedTree.foreach((mergePath, value) => {\n      const serverCachePath = pathChild(ackPath, mergePath);\n      if (serverCache.isCompleteForPath(serverCachePath)) {\n        changedChildren = changedChildren.set(\n          mergePath,\n          serverCache.getNode().getChild(serverCachePath)\n        );\n      }\n    });\n    return viewProcessorApplyServerMerge(\n      viewProcessor,\n      viewCache,\n      ackPath,\n      changedChildren,\n      writesCache,\n      completeCache,\n      filterServerNode,\n      accumulator\n    );\n  }\n}\n\nfunction viewProcessorListenComplete(\n  viewProcessor: ViewProcessor,\n  viewCache: ViewCache,\n  path: Path,\n  writesCache: WriteTreeRef,\n  accumulator: ChildChangeAccumulator\n): ViewCache {\n  const oldServerNode = viewCache.serverCache;\n  const newViewCache = viewCacheUpdateServerSnap(\n    viewCache,\n    oldServerNode.getNode(),\n    oldServerNode.isFullyInitialized() || pathIsEmpty(path),\n    oldServerNode.isFiltered()\n  );\n  return viewProcessorGenerateEventCacheAfterServerEvent(\n    viewProcessor,\n    newViewCache,\n    path,\n    writesCache,\n    NO_COMPLETE_CHILD_SOURCE,\n    accumulator\n  );\n}\n\nfunction viewProcessorRevertUserWrite(\n  viewProcessor: ViewProcessor,\n  viewCache: ViewCache,\n  path: Path,\n  writesCache: WriteTreeRef,\n  completeServerCache: Node | null,\n  accumulator: ChildChangeAccumulator\n): ViewCache {\n  let complete;\n  if (writeTreeRefShadowingWrite(writesCache, path) != null) {\n    return viewCache;\n  } else {\n    const source = new WriteTreeCompleteChildSource(\n      writesCache,\n      viewCache,\n      completeServerCache\n    );\n    const oldEventCache = viewCache.eventCache.getNode();\n    let newEventCache;\n    if (pathIsEmpty(path) || pathGetFront(path) === '.priority') {\n      let newNode;\n      if (viewCache.serverCache.isFullyInitialized()) {\n        newNode = writeTreeRefCalcCompleteEventCache(\n          writesCache,\n          viewCacheGetCompleteServerSnap(viewCache)\n        );\n      } else {\n        const serverChildren = viewCache.serverCache.getNode();\n        assert(\n          serverChildren instanceof ChildrenNode,\n          'serverChildren would be complete if leaf node'\n        );\n        newNode = writeTreeRefCalcCompleteEventChildren(\n          writesCache,\n          serverChildren as ChildrenNode\n        );\n      }\n      newNode = newNode as Node;\n      newEventCache = viewProcessor.filter.updateFullNode(\n        oldEventCache,\n        newNode,\n        accumulator\n      );\n    } else {\n      const childKey = pathGetFront(path);\n      let newChild = writeTreeRefCalcCompleteChild(\n        writesCache,\n        childKey,\n        viewCache.serverCache\n      );\n      if (\n        newChild == null &&\n        viewCache.serverCache.isCompleteForChild(childKey)\n      ) {\n        newChild = oldEventCache.getImmediateChild(childKey);\n      }\n      if (newChild != null) {\n        newEventCache = viewProcessor.filter.updateChild(\n          oldEventCache,\n          childKey,\n          newChild,\n          pathPopFront(path),\n          source,\n          accumulator\n        );\n      } else if (viewCache.eventCache.getNode().hasChild(childKey)) {\n        // No complete child available, delete the existing one, if any\n        newEventCache = viewProcessor.filter.updateChild(\n          oldEventCache,\n          childKey,\n          ChildrenNode.EMPTY_NODE,\n          pathPopFront(path),\n          source,\n          accumulator\n        );\n      } else {\n        newEventCache = oldEventCache;\n      }\n      if (\n        newEventCache.isEmpty() &&\n        viewCache.serverCache.isFullyInitialized()\n      ) {\n        // We might have reverted all child writes. Maybe the old event was a leaf node\n        complete = writeTreeRefCalcCompleteEventCache(\n          writesCache,\n          viewCacheGetCompleteServerSnap(viewCache)\n        );\n        if (complete.isLeafNode()) {\n          newEventCache = viewProcessor.filter.updateFullNode(\n            newEventCache,\n            complete,\n            accumulator\n          );\n        }\n      }\n    }\n    complete =\n      viewCache.serverCache.isFullyInitialized() ||\n      writeTreeRefShadowingWrite(writesCache, newEmptyPath()) != null;\n    return viewCacheUpdateEventSnap(\n      viewCache,\n      newEventCache,\n      complete,\n      viewProcessor.filter.filtersNodes()\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { ReferenceConstructor } from '../api/Reference';\n\nimport { Operation } from './operation/Operation';\nimport { ChildrenNode } from './snap/ChildrenNode';\nimport { Node } from './snap/Node';\nimport { Path } from './util/Path';\nimport { CacheNode } from './view/CacheNode';\nimport { Event } from './view/Event';\nimport { EventRegistration, QueryContext } from './view/EventRegistration';\nimport {\n  View,\n  viewAddEventRegistration,\n  viewApplyOperation,\n  viewGetCompleteServerCache,\n  viewGetInitialEvents,\n  viewIsEmpty,\n  viewRemoveEventRegistration\n} from './view/View';\nimport { newViewCache } from './view/ViewCache';\nimport {\n  WriteTreeRef,\n  writeTreeRefCalcCompleteEventCache,\n  writeTreeRefCalcCompleteEventChildren\n} from './WriteTree';\n\nlet referenceConstructor: ReferenceConstructor;\n\n/**\n * SyncPoint represents a single location in a SyncTree with 1 or more event registrations, meaning we need to\n * maintain 1 or more Views at this location to cache server data and raise appropriate events for server changes\n * and user writes (set, transaction, update).\n *\n * It's responsible for:\n *  - Maintaining the set of 1 or more views necessary at this location (a SyncPoint with 0 views should be removed).\n *  - Proxying user / server operations to the views as appropriate (i.e. applyServerOverwrite,\n *    applyUserOverwrite, etc.)\n */\nexport class SyncPoint {\n  /**\n   * The Views being tracked at this location in the tree, stored as a map where the key is a\n   * queryId and the value is the View for that query.\n   *\n   * NOTE: This list will be quite small (usually 1, but perhaps 2 or 3; any more is an odd use case).\n   */\n  readonly views: Map<string, View> = new Map();\n}\n\nexport function syncPointSetReferenceConstructor(\n  val: ReferenceConstructor\n): void {\n  assert(\n    !referenceConstructor,\n    '__referenceConstructor has already been defined'\n  );\n  referenceConstructor = val;\n}\n\nfunction syncPointGetReferenceConstructor(): ReferenceConstructor {\n  assert(referenceConstructor, 'Reference.ts has not been loaded');\n  return referenceConstructor;\n}\n\nexport function syncPointIsEmpty(syncPoint: SyncPoint): boolean {\n  return syncPoint.views.size === 0;\n}\n\nexport function syncPointApplyOperation(\n  syncPoint: SyncPoint,\n  operation: Operation,\n  writesCache: WriteTreeRef,\n  optCompleteServerCache: Node | null\n): Event[] {\n  const queryId = operation.source.queryId;\n  if (queryId !== null) {\n    const view = syncPoint.views.get(queryId);\n    assert(view != null, 'SyncTree gave us an op for an invalid query.');\n    return viewApplyOperation(\n      view,\n      operation,\n      writesCache,\n      optCompleteServerCache\n    );\n  } else {\n    let events: Event[] = [];\n\n    for (const view of syncPoint.views.values()) {\n      events = events.concat(\n        viewApplyOperation(view, operation, writesCache, optCompleteServerCache)\n      );\n    }\n\n    return events;\n  }\n}\n\n/**\n * Get a view for the specified query.\n *\n * @param query - The query to return a view for\n * @param writesCache\n * @param serverCache\n * @param serverCacheComplete\n * @returns Events to raise.\n */\nexport function syncPointGetView(\n  syncPoint: SyncPoint,\n  query: QueryContext,\n  writesCache: WriteTreeRef,\n  serverCache: Node | null,\n  serverCacheComplete: boolean\n): View {\n  const queryId = query._queryIdentifier;\n  const view = syncPoint.views.get(queryId);\n  if (!view) {\n    // TODO: make writesCache take flag for complete server node\n    let eventCache = writeTreeRefCalcCompleteEventCache(\n      writesCache,\n      serverCacheComplete ? serverCache : null\n    );\n    let eventCacheComplete = false;\n    if (eventCache) {\n      eventCacheComplete = true;\n    } else if (serverCache instanceof ChildrenNode) {\n      eventCache = writeTreeRefCalcCompleteEventChildren(\n        writesCache,\n        serverCache\n      );\n      eventCacheComplete = false;\n    } else {\n      eventCache = ChildrenNode.EMPTY_NODE;\n      eventCacheComplete = false;\n    }\n    const viewCache = newViewCache(\n      new CacheNode(eventCache, eventCacheComplete, false),\n      new CacheNode(serverCache, serverCacheComplete, false)\n    );\n    return new View(query, viewCache);\n  }\n  return view;\n}\n\n/**\n * Add an event callback for the specified query.\n *\n * @param query\n * @param eventRegistration\n * @param writesCache\n * @param serverCache - Complete server cache, if we have it.\n * @param serverCacheComplete\n * @returns Events to raise.\n */\nexport function syncPointAddEventRegistration(\n  syncPoint: SyncPoint,\n  query: QueryContext,\n  eventRegistration: EventRegistration,\n  writesCache: WriteTreeRef,\n  serverCache: Node | null,\n  serverCacheComplete: boolean\n): Event[] {\n  const view = syncPointGetView(\n    syncPoint,\n    query,\n    writesCache,\n    serverCache,\n    serverCacheComplete\n  );\n  if (!syncPoint.views.has(query._queryIdentifier)) {\n    syncPoint.views.set(query._queryIdentifier, view);\n  }\n  // This is guaranteed to exist now, we just created anything that was missing\n  viewAddEventRegistration(view, eventRegistration);\n  return viewGetInitialEvents(view, eventRegistration);\n}\n\n/**\n * Remove event callback(s).  Return cancelEvents if a cancelError is specified.\n *\n * If query is the default query, we'll check all views for the specified eventRegistration.\n * If eventRegistration is null, we'll remove all callbacks for the specified view(s).\n *\n * @param eventRegistration - If null, remove all callbacks.\n * @param cancelError - If a cancelError is provided, appropriate cancel events will be returned.\n * @returns removed queries and any cancel events\n */\nexport function syncPointRemoveEventRegistration(\n  syncPoint: SyncPoint,\n  query: QueryContext,\n  eventRegistration: EventRegistration | null,\n  cancelError?: Error\n): { removed: QueryContext[]; events: Event[] } {\n  const queryId = query._queryIdentifier;\n  const removed: QueryContext[] = [];\n  let cancelEvents: Event[] = [];\n  const hadCompleteView = syncPointHasCompleteView(syncPoint);\n  if (queryId === 'default') {\n    // When you do ref.off(...), we search all views for the registration to remove.\n    for (const [viewQueryId, view] of syncPoint.views.entries()) {\n      cancelEvents = cancelEvents.concat(\n        viewRemoveEventRegistration(view, eventRegistration, cancelError)\n      );\n      if (viewIsEmpty(view)) {\n        syncPoint.views.delete(viewQueryId);\n\n        // We'll deal with complete views later.\n        if (!view.query._queryParams.loadsAllData()) {\n          removed.push(view.query);\n        }\n      }\n    }\n  } else {\n    // remove the callback from the specific view.\n    const view = syncPoint.views.get(queryId);\n    if (view) {\n      cancelEvents = cancelEvents.concat(\n        viewRemoveEventRegistration(view, eventRegistration, cancelError)\n      );\n      if (viewIsEmpty(view)) {\n        syncPoint.views.delete(queryId);\n\n        // We'll deal with complete views later.\n        if (!view.query._queryParams.loadsAllData()) {\n          removed.push(view.query);\n        }\n      }\n    }\n  }\n\n  if (hadCompleteView && !syncPointHasCompleteView(syncPoint)) {\n    // We removed our last complete view.\n    removed.push(\n      new (syncPointGetReferenceConstructor())(query._repo, query._path)\n    );\n  }\n\n  return { removed, events: cancelEvents };\n}\n\nexport function syncPointGetQueryViews(syncPoint: SyncPoint): View[] {\n  const result = [];\n  for (const view of syncPoint.views.values()) {\n    if (!view.query._queryParams.loadsAllData()) {\n      result.push(view);\n    }\n  }\n  return result;\n}\n\n/**\n * @param path - The path to the desired complete snapshot\n * @returns A complete cache, if it exists\n */\nexport function syncPointGetCompleteServerCache(\n  syncPoint: SyncPoint,\n  path: Path\n): Node | null {\n  let serverCache: Node | null = null;\n  for (const view of syncPoint.views.values()) {\n    serverCache = serverCache || viewGetCompleteServerCache(view, path);\n  }\n  return serverCache;\n}\n\nexport function syncPointViewForQuery(\n  syncPoint: SyncPoint,\n  query: QueryContext\n): View | null {\n  const params = query._queryParams;\n  if (params.loadsAllData()) {\n    return syncPointGetCompleteView(syncPoint);\n  } else {\n    const queryId = query._queryIdentifier;\n    return syncPoint.views.get(queryId);\n  }\n}\n\nexport function syncPointViewExistsForQuery(\n  syncPoint: SyncPoint,\n  query: QueryContext\n): boolean {\n  return syncPointViewForQuery(syncPoint, query) != null;\n}\n\nexport function syncPointHasCompleteView(syncPoint: SyncPoint): boolean {\n  return syncPointGetCompleteView(syncPoint) != null;\n}\n\nexport function syncPointGetCompleteView(syncPoint: SyncPoint): View | null {\n  for (const view of syncPoint.views.values()) {\n    if (view.query._queryParams.loadsAllData()) {\n      return view;\n    }\n  }\n  return null;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { Operation, OperationType } from '../operation/Operation';\nimport { ChildrenNode } from '../snap/ChildrenNode';\nimport { PRIORITY_INDEX } from '../snap/indexes/PriorityIndex';\nimport { Node } from '../snap/Node';\nimport { Path, pathGetFront, pathIsEmpty } from '../util/Path';\nimport { WriteTreeRef } from '../WriteTree';\n\nimport { CacheNode } from './CacheNode';\nimport { Change, changeChildAdded, changeValue } from './Change';\nimport { CancelEvent, Event } from './Event';\nimport {\n  EventGenerator,\n  eventGeneratorGenerateEventsForChanges\n} from './EventGenerator';\nimport { EventRegistration, QueryContext } from './EventRegistration';\nimport { IndexedFilter } from './filter/IndexedFilter';\nimport { queryParamsGetNodeFilter } from './QueryParams';\nimport {\n  newViewCache,\n  ViewCache,\n  viewCacheGetCompleteEventSnap,\n  viewCacheGetCompleteServerSnap\n} from './ViewCache';\nimport {\n  newViewProcessor,\n  ViewProcessor,\n  viewProcessorApplyOperation,\n  viewProcessorAssertIndexed\n} from './ViewProcessor';\n\n/**\n * A view represents a specific location and query that has 1 or more event registrations.\n *\n * It does several things:\n *  - Maintains the list of event registrations for this location/query.\n *  - Maintains a cache of the data visible for this location/query.\n *  - Applies new operations (via applyOperation), updates the cache, and based on the event\n *    registrations returns the set of events to be raised.\n */\nexport class View {\n  processor_: ViewProcessor;\n  viewCache_: ViewCache;\n  eventRegistrations_: EventRegistration[] = [];\n  eventGenerator_: EventGenerator;\n\n  constructor(private query_: QueryContext, initialViewCache: ViewCache) {\n    const params = this.query_._queryParams;\n\n    const indexFilter = new IndexedFilter(params.getIndex());\n    const filter = queryParamsGetNodeFilter(params);\n\n    this.processor_ = newViewProcessor(filter);\n\n    const initialServerCache = initialViewCache.serverCache;\n    const initialEventCache = initialViewCache.eventCache;\n\n    // Don't filter server node with other filter than index, wait for tagged listen\n    const serverSnap = indexFilter.updateFullNode(\n      ChildrenNode.EMPTY_NODE,\n      initialServerCache.getNode(),\n      null\n    );\n    const eventSnap = filter.updateFullNode(\n      ChildrenNode.EMPTY_NODE,\n      initialEventCache.getNode(),\n      null\n    );\n    const newServerCache = new CacheNode(\n      serverSnap,\n      initialServerCache.isFullyInitialized(),\n      indexFilter.filtersNodes()\n    );\n    const newEventCache = new CacheNode(\n      eventSnap,\n      initialEventCache.isFullyInitialized(),\n      filter.filtersNodes()\n    );\n\n    this.viewCache_ = newViewCache(newEventCache, newServerCache);\n    this.eventGenerator_ = new EventGenerator(this.query_);\n  }\n\n  get query(): QueryContext {\n    return this.query_;\n  }\n}\n\nexport function viewGetServerCache(view: View): Node | null {\n  return view.viewCache_.serverCache.getNode();\n}\n\nexport function viewGetCompleteNode(view: View): Node | null {\n  return viewCacheGetCompleteEventSnap(view.viewCache_);\n}\n\nexport function viewGetCompleteServerCache(\n  view: View,\n  path: Path\n): Node | null {\n  const cache = viewCacheGetCompleteServerSnap(view.viewCache_);\n  if (cache) {\n    // If this isn't a \"loadsAllData\" view, then cache isn't actually a complete cache and\n    // we need to see if it contains the child we're interested in.\n    if (\n      view.query._queryParams.loadsAllData() ||\n      (!pathIsEmpty(path) &&\n        !cache.getImmediateChild(pathGetFront(path)).isEmpty())\n    ) {\n      return cache.getChild(path);\n    }\n  }\n  return null;\n}\n\nexport function viewIsEmpty(view: View): boolean {\n  return view.eventRegistrations_.length === 0;\n}\n\nexport function viewAddEventRegistration(\n  view: View,\n  eventRegistration: EventRegistration\n) {\n  view.eventRegistrations_.push(eventRegistration);\n}\n\n/**\n * @param eventRegistration - If null, remove all callbacks.\n * @param cancelError - If a cancelError is provided, appropriate cancel events will be returned.\n * @returns Cancel events, if cancelError was provided.\n */\nexport function viewRemoveEventRegistration(\n  view: View,\n  eventRegistration: EventRegistration | null,\n  cancelError?: Error\n): Event[] {\n  const cancelEvents: CancelEvent[] = [];\n  if (cancelError) {\n    assert(\n      eventRegistration == null,\n      'A cancel should cancel all event registrations.'\n    );\n    const path = view.query._path;\n    view.eventRegistrations_.forEach(registration => {\n      const maybeEvent = registration.createCancelEvent(cancelError, path);\n      if (maybeEvent) {\n        cancelEvents.push(maybeEvent);\n      }\n    });\n  }\n\n  if (eventRegistration) {\n    let remaining = [];\n    for (let i = 0; i < view.eventRegistrations_.length; ++i) {\n      const existing = view.eventRegistrations_[i];\n      if (!existing.matches(eventRegistration)) {\n        remaining.push(existing);\n      } else if (eventRegistration.hasAnyCallback()) {\n        // We're removing just this one\n        remaining = remaining.concat(view.eventRegistrations_.slice(i + 1));\n        break;\n      }\n    }\n    view.eventRegistrations_ = remaining;\n  } else {\n    view.eventRegistrations_ = [];\n  }\n  return cancelEvents;\n}\n\n/**\n * Applies the given Operation, updates our cache, and returns the appropriate events.\n */\nexport function viewApplyOperation(\n  view: View,\n  operation: Operation,\n  writesCache: WriteTreeRef,\n  completeServerCache: Node | null\n): Event[] {\n  if (\n    operation.type === OperationType.MERGE &&\n    operation.source.queryId !== null\n  ) {\n    assert(\n      viewCacheGetCompleteServerSnap(view.viewCache_),\n      'We should always have a full cache before handling merges'\n    );\n    assert(\n      viewCacheGetCompleteEventSnap(view.viewCache_),\n      'Missing event cache, even though we have a server cache'\n    );\n  }\n\n  const oldViewCache = view.viewCache_;\n  const result = viewProcessorApplyOperation(\n    view.processor_,\n    oldViewCache,\n    operation,\n    writesCache,\n    completeServerCache\n  );\n  viewProcessorAssertIndexed(view.processor_, result.viewCache);\n\n  assert(\n    result.viewCache.serverCache.isFullyInitialized() ||\n      !oldViewCache.serverCache.isFullyInitialized(),\n    'Once a server snap is complete, it should never go back'\n  );\n\n  view.viewCache_ = result.viewCache;\n\n  return viewGenerateEventsForChanges_(\n    view,\n    result.changes,\n    result.viewCache.eventCache.getNode(),\n    null\n  );\n}\n\nexport function viewGetInitialEvents(\n  view: View,\n  registration: EventRegistration\n): Event[] {\n  const eventSnap = view.viewCache_.eventCache;\n  const initialChanges: Change[] = [];\n  if (!eventSnap.getNode().isLeafNode()) {\n    const eventNode = eventSnap.getNode() as ChildrenNode;\n    eventNode.forEachChild(PRIORITY_INDEX, (key, childNode) => {\n      initialChanges.push(changeChildAdded(key, childNode));\n    });\n  }\n  if (eventSnap.isFullyInitialized()) {\n    initialChanges.push(changeValue(eventSnap.getNode()));\n  }\n  return viewGenerateEventsForChanges_(\n    view,\n    initialChanges,\n    eventSnap.getNode(),\n    registration\n  );\n}\n\nfunction viewGenerateEventsForChanges_(\n  view: View,\n  changes: Change[],\n  eventCache: Node,\n  eventRegistration?: EventRegistration\n): Event[] {\n  const registrations = eventRegistration\n    ? [eventRegistration]\n    : view.eventRegistrations_;\n  return eventGeneratorGenerateEventsForChanges(\n    view.eventGenerator_,\n    changes,\n    eventCache,\n    registrations\n  );\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { ReferenceConstructor } from '../api/Reference';\n\nimport { AckUserWrite } from './operation/AckUserWrite';\nimport { ListenComplete } from './operation/ListenComplete';\nimport { Merge } from './operation/Merge';\nimport {\n  newOperationSourceServer,\n  newOperationSourceServerTaggedQuery,\n  newOperationSourceUser,\n  Operation\n} from './operation/Operation';\nimport { Overwrite } from './operation/Overwrite';\nimport { ChildrenNode } from './snap/ChildrenNode';\nimport { Node } from './snap/Node';\nimport {\n  SyncPoint,\n  syncPointAddEventRegistration,\n  syncPointApplyOperation,\n  syncPointGetCompleteServerCache,\n  syncPointGetCompleteView,\n  syncPointGetQueryViews,\n  syncPointGetView,\n  syncPointHasCompleteView,\n  syncPointIsEmpty,\n  syncPointRemoveEventRegistration,\n  syncPointViewExistsForQuery,\n  syncPointViewForQuery\n} from './SyncPoint';\nimport { ImmutableTree } from './util/ImmutableTree';\nimport {\n  newEmptyPath,\n  newRelativePath,\n  Path,\n  pathGetFront,\n  pathIsEmpty\n} from './util/Path';\nimport { each, errorForServerCode } from './util/util';\nimport { CacheNode } from './view/CacheNode';\nimport { Event } from './view/Event';\nimport { EventRegistration, QueryContext } from './view/EventRegistration';\nimport { View, viewGetCompleteNode, viewGetServerCache } from './view/View';\nimport {\n  newWriteTree,\n  WriteTree,\n  writeTreeAddMerge,\n  writeTreeAddOverwrite,\n  writeTreeCalcCompleteEventCache,\n  writeTreeChildWrites,\n  writeTreeGetWrite,\n  WriteTreeRef,\n  writeTreeRefChild,\n  writeTreeRemoveWrite\n} from './WriteTree';\n\nlet referenceConstructor: ReferenceConstructor;\n\nexport function syncTreeSetReferenceConstructor(\n  val: ReferenceConstructor\n): void {\n  assert(\n    !referenceConstructor,\n    '__referenceConstructor has already been defined'\n  );\n  referenceConstructor = val;\n}\n\nfunction syncTreeGetReferenceConstructor(): ReferenceConstructor {\n  assert(referenceConstructor, 'Reference.ts has not been loaded');\n  return referenceConstructor;\n}\n\nexport interface ListenProvider {\n  startListening(\n    query: QueryContext,\n    tag: number | null,\n    hashFn: () => string,\n    onComplete: (a: string, b?: unknown) => Event[]\n  ): Event[];\n\n  stopListening(a: QueryContext, b: number | null): void;\n}\n\n/**\n * Static tracker for next query tag.\n */\nlet syncTreeNextQueryTag_ = 1;\n\n/**\n * SyncTree is the central class for managing event callback registration, data caching, views\n * (query processing), and event generation.  There are typically two SyncTree instances for\n * each Repo, one for the normal Firebase data, and one for the .info data.\n *\n * It has a number of responsibilities, including:\n *  - Tracking all user event callbacks (registered via addEventRegistration() and removeEventRegistration()).\n *  - Applying and caching data changes for user set(), transaction(), and update() calls\n *    (applyUserOverwrite(), applyUserMerge()).\n *  - Applying and caching data changes for server data changes (applyServerOverwrite(),\n *    applyServerMerge()).\n *  - Generating user-facing events for server and user changes (all of the apply* methods\n *    return the set of events that need to be raised as a result).\n *  - Maintaining the appropriate set of server listens to ensure we are always subscribed\n *    to the correct set of paths and queries to satisfy the current set of user event\n *    callbacks (listens are started/stopped using the provided listenProvider).\n *\n * NOTE: Although SyncTree tracks event callbacks and calculates events to raise, the actual\n * events are returned to the caller rather than raised synchronously.\n *\n */\nexport class SyncTree {\n  /**\n   * Tree of SyncPoints.  There's a SyncPoint at any location that has 1 or more views.\n   */\n  syncPointTree_: ImmutableTree<SyncPoint> = new ImmutableTree<SyncPoint>(null);\n\n  /**\n   * A tree of all pending user writes (user-initiated set()'s, transaction()'s, update()'s, etc.).\n   */\n  pendingWriteTree_: WriteTree = newWriteTree();\n\n  readonly tagToQueryMap: Map<number, string> = new Map();\n  readonly queryToTagMap: Map<string, number> = new Map();\n\n  /**\n   * @param listenProvider_ - Used by SyncTree to start / stop listening\n   *   to server data.\n   */\n  constructor(public listenProvider_: ListenProvider) {}\n}\n\n/**\n * Apply the data changes for a user-generated set() or transaction() call.\n *\n * @returns Events to raise.\n */\nexport function syncTreeApplyUserOverwrite(\n  syncTree: SyncTree,\n  path: Path,\n  newData: Node,\n  writeId: number,\n  visible?: boolean\n): Event[] {\n  // Record pending write.\n  writeTreeAddOverwrite(\n    syncTree.pendingWriteTree_,\n    path,\n    newData,\n    writeId,\n    visible\n  );\n\n  if (!visible) {\n    return [];\n  } else {\n    return syncTreeApplyOperationToSyncPoints_(\n      syncTree,\n      new Overwrite(newOperationSourceUser(), path, newData)\n    );\n  }\n}\n\n/**\n * Apply the data from a user-generated update() call\n *\n * @returns Events to raise.\n */\nexport function syncTreeApplyUserMerge(\n  syncTree: SyncTree,\n  path: Path,\n  changedChildren: { [k: string]: Node },\n  writeId: number\n): Event[] {\n  // Record pending merge.\n  writeTreeAddMerge(syncTree.pendingWriteTree_, path, changedChildren, writeId);\n\n  const changeTree = ImmutableTree.fromObject(changedChildren);\n\n  return syncTreeApplyOperationToSyncPoints_(\n    syncTree,\n    new Merge(newOperationSourceUser(), path, changeTree)\n  );\n}\n\n/**\n * Acknowledge a pending user write that was previously registered with applyUserOverwrite() or applyUserMerge().\n *\n * @param revert - True if the given write failed and needs to be reverted\n * @returns Events to raise.\n */\nexport function syncTreeAckUserWrite(\n  syncTree: SyncTree,\n  writeId: number,\n  revert: boolean = false\n) {\n  const write = writeTreeGetWrite(syncTree.pendingWriteTree_, writeId);\n  const needToReevaluate = writeTreeRemoveWrite(\n    syncTree.pendingWriteTree_,\n    writeId\n  );\n  if (!needToReevaluate) {\n    return [];\n  } else {\n    let affectedTree = new ImmutableTree<boolean>(null);\n    if (write.snap != null) {\n      // overwrite\n      affectedTree = affectedTree.set(newEmptyPath(), true);\n    } else {\n      each(write.children, (pathString: string) => {\n        affectedTree = affectedTree.set(new Path(pathString), true);\n      });\n    }\n    return syncTreeApplyOperationToSyncPoints_(\n      syncTree,\n      new AckUserWrite(write.path, affectedTree, revert)\n    );\n  }\n}\n\n/**\n * Apply new server data for the specified path..\n *\n * @returns Events to raise.\n */\nexport function syncTreeApplyServerOverwrite(\n  syncTree: SyncTree,\n  path: Path,\n  newData: Node\n): Event[] {\n  return syncTreeApplyOperationToSyncPoints_(\n    syncTree,\n    new Overwrite(newOperationSourceServer(), path, newData)\n  );\n}\n\n/**\n * Apply new server data to be merged in at the specified path.\n *\n * @returns Events to raise.\n */\nexport function syncTreeApplyServerMerge(\n  syncTree: SyncTree,\n  path: Path,\n  changedChildren: { [k: string]: Node }\n): Event[] {\n  const changeTree = ImmutableTree.fromObject(changedChildren);\n\n  return syncTreeApplyOperationToSyncPoints_(\n    syncTree,\n    new Merge(newOperationSourceServer(), path, changeTree)\n  );\n}\n\n/**\n * Apply a listen complete for a query\n *\n * @returns Events to raise.\n */\nexport function syncTreeApplyListenComplete(\n  syncTree: SyncTree,\n  path: Path\n): Event[] {\n  return syncTreeApplyOperationToSyncPoints_(\n    syncTree,\n    new ListenComplete(newOperationSourceServer(), path)\n  );\n}\n\n/**\n * Apply a listen complete for a tagged query\n *\n * @returns Events to raise.\n */\nexport function syncTreeApplyTaggedListenComplete(\n  syncTree: SyncTree,\n  path: Path,\n  tag: number\n): Event[] {\n  const queryKey = syncTreeQueryKeyForTag_(syncTree, tag);\n  if (queryKey) {\n    const r = syncTreeParseQueryKey_(queryKey);\n    const queryPath = r.path,\n      queryId = r.queryId;\n    const relativePath = newRelativePath(queryPath, path);\n    const op = new ListenComplete(\n      newOperationSourceServerTaggedQuery(queryId),\n      relativePath\n    );\n    return syncTreeApplyTaggedOperation_(syncTree, queryPath, op);\n  } else {\n    // We've already removed the query. No big deal, ignore the update\n    return [];\n  }\n}\n\n/**\n * Remove event callback(s).\n *\n * If query is the default query, we'll check all queries for the specified eventRegistration.\n * If eventRegistration is null, we'll remove all callbacks for the specified query/queries.\n *\n * @param eventRegistration - If null, all callbacks are removed.\n * @param cancelError - If a cancelError is provided, appropriate cancel events will be returned.\n * @param skipListenerDedup - When performing a `get()`, we don't add any new listeners, so no\n *  deduping needs to take place. This flag allows toggling of that behavior\n * @returns Cancel events, if cancelError was provided.\n */\nexport function syncTreeRemoveEventRegistration(\n  syncTree: SyncTree,\n  query: QueryContext,\n  eventRegistration: EventRegistration | null,\n  cancelError?: Error,\n  skipListenerDedup = false\n): Event[] {\n  // Find the syncPoint first. Then deal with whether or not it has matching listeners\n  const path = query._path;\n  const maybeSyncPoint = syncTree.syncPointTree_.get(path);\n  let cancelEvents: Event[] = [];\n  // A removal on a default query affects all queries at that location. A removal on an indexed query, even one without\n  // other query constraints, does *not* affect all queries at that location. So this check must be for 'default', and\n  // not loadsAllData().\n  if (\n    maybeSyncPoint &&\n    (query._queryIdentifier === 'default' ||\n      syncPointViewExistsForQuery(maybeSyncPoint, query))\n  ) {\n    const removedAndEvents = syncPointRemoveEventRegistration(\n      maybeSyncPoint,\n      query,\n      eventRegistration,\n      cancelError\n    );\n    if (syncPointIsEmpty(maybeSyncPoint)) {\n      syncTree.syncPointTree_ = syncTree.syncPointTree_.remove(path);\n    }\n\n    const removed = removedAndEvents.removed;\n    cancelEvents = removedAndEvents.events;\n\n    if (!skipListenerDedup) {\n      /**\n       * We may have just removed one of many listeners and can short-circuit this whole process\n       * We may also not have removed a default listener, in which case all of the descendant listeners should already be\n       * properly set up.\n       */\n\n      // Since indexed queries can shadow if they don't have other query constraints, check for loadsAllData(), instead of\n      // queryId === 'default'\n      const removingDefault =\n        -1 !==\n        removed.findIndex(query => {\n          return query._queryParams.loadsAllData();\n        });\n      const covered = syncTree.syncPointTree_.findOnPath(\n        path,\n        (relativePath, parentSyncPoint) =>\n          syncPointHasCompleteView(parentSyncPoint)\n      );\n\n      if (removingDefault && !covered) {\n        const subtree = syncTree.syncPointTree_.subtree(path);\n        // There are potentially child listeners. Determine what if any listens we need to send before executing the\n        // removal\n        if (!subtree.isEmpty()) {\n          // We need to fold over our subtree and collect the listeners to send\n          const newViews = syncTreeCollectDistinctViewsForSubTree_(subtree);\n\n          // Ok, we've collected all the listens we need. Set them up.\n          for (let i = 0; i < newViews.length; ++i) {\n            const view = newViews[i],\n              newQuery = view.query;\n            const listener = syncTreeCreateListenerForView_(syncTree, view);\n            syncTree.listenProvider_.startListening(\n              syncTreeQueryForListening_(newQuery),\n              syncTreeTagForQuery(syncTree, newQuery),\n              listener.hashFn,\n              listener.onComplete\n            );\n          }\n        }\n        // Otherwise there's nothing below us, so nothing we need to start listening on\n      }\n      // If we removed anything and we're not covered by a higher up listen, we need to stop listening on this query\n      // The above block has us covered in terms of making sure we're set up on listens lower in the tree.\n      // Also, note that if we have a cancelError, it's already been removed at the provider level.\n      if (!covered && removed.length > 0 && !cancelError) {\n        // If we removed a default, then we weren't listening on any of the other queries here. Just cancel the one\n        // default. Otherwise, we need to iterate through and cancel each individual query\n        if (removingDefault) {\n          // We don't tag default listeners\n          const defaultTag: number | null = null;\n          syncTree.listenProvider_.stopListening(\n            syncTreeQueryForListening_(query),\n            defaultTag\n          );\n        } else {\n          removed.forEach((queryToRemove: QueryContext) => {\n            const tagToRemove = syncTree.queryToTagMap.get(\n              syncTreeMakeQueryKey_(queryToRemove)\n            );\n            syncTree.listenProvider_.stopListening(\n              syncTreeQueryForListening_(queryToRemove),\n              tagToRemove\n            );\n          });\n        }\n      }\n    }\n    // Now, clear all of the tags we're tracking for the removed listens\n    syncTreeRemoveTags_(syncTree, removed);\n  } else {\n    // No-op, this listener must've been already removed\n  }\n  return cancelEvents;\n}\n\n/**\n * Apply new server data for the specified tagged query.\n *\n * @returns Events to raise.\n */\nexport function syncTreeApplyTaggedQueryOverwrite(\n  syncTree: SyncTree,\n  path: Path,\n  snap: Node,\n  tag: number\n): Event[] {\n  const queryKey = syncTreeQueryKeyForTag_(syncTree, tag);\n  if (queryKey != null) {\n    const r = syncTreeParseQueryKey_(queryKey);\n    const queryPath = r.path,\n      queryId = r.queryId;\n    const relativePath = newRelativePath(queryPath, path);\n    const op = new Overwrite(\n      newOperationSourceServerTaggedQuery(queryId),\n      relativePath,\n      snap\n    );\n    return syncTreeApplyTaggedOperation_(syncTree, queryPath, op);\n  } else {\n    // Query must have been removed already\n    return [];\n  }\n}\n\n/**\n * Apply server data to be merged in for the specified tagged query.\n *\n * @returns Events to raise.\n */\nexport function syncTreeApplyTaggedQueryMerge(\n  syncTree: SyncTree,\n  path: Path,\n  changedChildren: { [k: string]: Node },\n  tag: number\n): Event[] {\n  const queryKey = syncTreeQueryKeyForTag_(syncTree, tag);\n  if (queryKey) {\n    const r = syncTreeParseQueryKey_(queryKey);\n    const queryPath = r.path,\n      queryId = r.queryId;\n    const relativePath = newRelativePath(queryPath, path);\n    const changeTree = ImmutableTree.fromObject(changedChildren);\n    const op = new Merge(\n      newOperationSourceServerTaggedQuery(queryId),\n      relativePath,\n      changeTree\n    );\n    return syncTreeApplyTaggedOperation_(syncTree, queryPath, op);\n  } else {\n    // We've already removed the query. No big deal, ignore the update\n    return [];\n  }\n}\n\n/**\n * Add an event callback for the specified query.\n *\n * @returns Events to raise.\n */\nexport function syncTreeAddEventRegistration(\n  syncTree: SyncTree,\n  query: QueryContext,\n  eventRegistration: EventRegistration,\n  skipSetupListener = false\n): Event[] {\n  const path = query._path;\n\n  let serverCache: Node | null = null;\n  let foundAncestorDefaultView = false;\n  // Any covering writes will necessarily be at the root, so really all we need to find is the server cache.\n  // Consider optimizing this once there's a better understanding of what actual behavior will be.\n  syncTree.syncPointTree_.foreachOnPath(path, (pathToSyncPoint, sp) => {\n    const relativePath = newRelativePath(pathToSyncPoint, path);\n    serverCache =\n      serverCache || syncPointGetCompleteServerCache(sp, relativePath);\n    foundAncestorDefaultView =\n      foundAncestorDefaultView || syncPointHasCompleteView(sp);\n  });\n  let syncPoint = syncTree.syncPointTree_.get(path);\n  if (!syncPoint) {\n    syncPoint = new SyncPoint();\n    syncTree.syncPointTree_ = syncTree.syncPointTree_.set(path, syncPoint);\n  } else {\n    foundAncestorDefaultView =\n      foundAncestorDefaultView || syncPointHasCompleteView(syncPoint);\n    serverCache =\n      serverCache || syncPointGetCompleteServerCache(syncPoint, newEmptyPath());\n  }\n\n  let serverCacheComplete;\n  if (serverCache != null) {\n    serverCacheComplete = true;\n  } else {\n    serverCacheComplete = false;\n    serverCache = ChildrenNode.EMPTY_NODE;\n    const subtree = syncTree.syncPointTree_.subtree(path);\n    subtree.foreachChild((childName, childSyncPoint) => {\n      const completeCache = syncPointGetCompleteServerCache(\n        childSyncPoint,\n        newEmptyPath()\n      );\n      if (completeCache) {\n        serverCache = serverCache.updateImmediateChild(\n          childName,\n          completeCache\n        );\n      }\n    });\n  }\n\n  const viewAlreadyExists = syncPointViewExistsForQuery(syncPoint, query);\n  if (!viewAlreadyExists && !query._queryParams.loadsAllData()) {\n    // We need to track a tag for this query\n    const queryKey = syncTreeMakeQueryKey_(query);\n    assert(\n      !syncTree.queryToTagMap.has(queryKey),\n      'View does not exist, but we have a tag'\n    );\n    const tag = syncTreeGetNextQueryTag_();\n    syncTree.queryToTagMap.set(queryKey, tag);\n    syncTree.tagToQueryMap.set(tag, queryKey);\n  }\n  const writesCache = writeTreeChildWrites(syncTree.pendingWriteTree_, path);\n  let events = syncPointAddEventRegistration(\n    syncPoint,\n    query,\n    eventRegistration,\n    writesCache,\n    serverCache,\n    serverCacheComplete\n  );\n  if (!viewAlreadyExists && !foundAncestorDefaultView && !skipSetupListener) {\n    const view = syncPointViewForQuery(syncPoint, query);\n    events = events.concat(syncTreeSetupListener_(syncTree, query, view));\n  }\n  return events;\n}\n\n/**\n * Returns a complete cache, if we have one, of the data at a particular path. If the location does not have a\n * listener above it, we will get a false \"null\". This shouldn't be a problem because transactions will always\n * have a listener above, and atomic operations would correctly show a jitter of <increment value> ->\n *     <incremented total> as the write is applied locally and then acknowledged at the server.\n *\n * Note: this method will *include* hidden writes from transaction with applyLocally set to false.\n *\n * @param path - The path to the data we want\n * @param writeIdsToExclude - A specific set to be excluded\n */\nexport function syncTreeCalcCompleteEventCache(\n  syncTree: SyncTree,\n  path: Path,\n  writeIdsToExclude?: number[]\n): Node {\n  const includeHiddenSets = true;\n  const writeTree = syncTree.pendingWriteTree_;\n  const serverCache = syncTree.syncPointTree_.findOnPath(\n    path,\n    (pathSoFar, syncPoint) => {\n      const relativePath = newRelativePath(pathSoFar, path);\n      const serverCache = syncPointGetCompleteServerCache(\n        syncPoint,\n        relativePath\n      );\n      if (serverCache) {\n        return serverCache;\n      }\n    }\n  );\n  return writeTreeCalcCompleteEventCache(\n    writeTree,\n    path,\n    serverCache,\n    writeIdsToExclude,\n    includeHiddenSets\n  );\n}\n\nexport function syncTreeGetServerValue(\n  syncTree: SyncTree,\n  query: QueryContext\n): Node | null {\n  const path = query._path;\n  let serverCache: Node | null = null;\n  // Any covering writes will necessarily be at the root, so really all we need to find is the server cache.\n  // Consider optimizing this once there's a better understanding of what actual behavior will be.\n  syncTree.syncPointTree_.foreachOnPath(path, (pathToSyncPoint, sp) => {\n    const relativePath = newRelativePath(pathToSyncPoint, path);\n    serverCache =\n      serverCache || syncPointGetCompleteServerCache(sp, relativePath);\n  });\n  let syncPoint = syncTree.syncPointTree_.get(path);\n  if (!syncPoint) {\n    syncPoint = new SyncPoint();\n    syncTree.syncPointTree_ = syncTree.syncPointTree_.set(path, syncPoint);\n  } else {\n    serverCache =\n      serverCache || syncPointGetCompleteServerCache(syncPoint, newEmptyPath());\n  }\n  const serverCacheComplete = serverCache != null;\n  const serverCacheNode: CacheNode | null = serverCacheComplete\n    ? new CacheNode(serverCache, true, false)\n    : null;\n  const writesCache: WriteTreeRef | null = writeTreeChildWrites(\n    syncTree.pendingWriteTree_,\n    query._path\n  );\n  const view: View = syncPointGetView(\n    syncPoint,\n    query,\n    writesCache,\n    serverCacheComplete ? serverCacheNode.getNode() : ChildrenNode.EMPTY_NODE,\n    serverCacheComplete\n  );\n  return viewGetCompleteNode(view);\n}\n\n/**\n * A helper method that visits all descendant and ancestor SyncPoints, applying the operation.\n *\n * NOTES:\n * - Descendant SyncPoints will be visited first (since we raise events depth-first).\n *\n * - We call applyOperation() on each SyncPoint passing three things:\n *   1. A version of the Operation that has been made relative to the SyncPoint location.\n *   2. A WriteTreeRef of any writes we have cached at the SyncPoint location.\n *   3. A snapshot Node with cached server data, if we have it.\n *\n * - We concatenate all of the events returned by each SyncPoint and return the result.\n */\nfunction syncTreeApplyOperationToSyncPoints_(\n  syncTree: SyncTree,\n  operation: Operation\n): Event[] {\n  return syncTreeApplyOperationHelper_(\n    operation,\n    syncTree.syncPointTree_,\n    /*serverCache=*/ null,\n    writeTreeChildWrites(syncTree.pendingWriteTree_, newEmptyPath())\n  );\n}\n\n/**\n * Recursive helper for applyOperationToSyncPoints_\n */\nfunction syncTreeApplyOperationHelper_(\n  operation: Operation,\n  syncPointTree: ImmutableTree<SyncPoint>,\n  serverCache: Node | null,\n  writesCache: WriteTreeRef\n): Event[] {\n  if (pathIsEmpty(operation.path)) {\n    return syncTreeApplyOperationDescendantsHelper_(\n      operation,\n      syncPointTree,\n      serverCache,\n      writesCache\n    );\n  } else {\n    const syncPoint = syncPointTree.get(newEmptyPath());\n\n    // If we don't have cached server data, see if we can get it from this SyncPoint.\n    if (serverCache == null && syncPoint != null) {\n      serverCache = syncPointGetCompleteServerCache(syncPoint, newEmptyPath());\n    }\n\n    let events: Event[] = [];\n    const childName = pathGetFront(operation.path);\n    const childOperation = operation.operationForChild(childName);\n    const childTree = syncPointTree.children.get(childName);\n    if (childTree && childOperation) {\n      const childServerCache = serverCache\n        ? serverCache.getImmediateChild(childName)\n        : null;\n      const childWritesCache = writeTreeRefChild(writesCache, childName);\n      events = events.concat(\n        syncTreeApplyOperationHelper_(\n          childOperation,\n          childTree,\n          childServerCache,\n          childWritesCache\n        )\n      );\n    }\n\n    if (syncPoint) {\n      events = events.concat(\n        syncPointApplyOperation(syncPoint, operation, writesCache, serverCache)\n      );\n    }\n\n    return events;\n  }\n}\n\n/**\n * Recursive helper for applyOperationToSyncPoints_\n */\nfunction syncTreeApplyOperationDescendantsHelper_(\n  operation: Operation,\n  syncPointTree: ImmutableTree<SyncPoint>,\n  serverCache: Node | null,\n  writesCache: WriteTreeRef\n): Event[] {\n  const syncPoint = syncPointTree.get(newEmptyPath());\n\n  // If we don't have cached server data, see if we can get it from this SyncPoint.\n  if (serverCache == null && syncPoint != null) {\n    serverCache = syncPointGetCompleteServerCache(syncPoint, newEmptyPath());\n  }\n\n  let events: Event[] = [];\n  syncPointTree.children.inorderTraversal((childName, childTree) => {\n    const childServerCache = serverCache\n      ? serverCache.getImmediateChild(childName)\n      : null;\n    const childWritesCache = writeTreeRefChild(writesCache, childName);\n    const childOperation = operation.operationForChild(childName);\n    if (childOperation) {\n      events = events.concat(\n        syncTreeApplyOperationDescendantsHelper_(\n          childOperation,\n          childTree,\n          childServerCache,\n          childWritesCache\n        )\n      );\n    }\n  });\n\n  if (syncPoint) {\n    events = events.concat(\n      syncPointApplyOperation(syncPoint, operation, writesCache, serverCache)\n    );\n  }\n\n  return events;\n}\n\nfunction syncTreeCreateListenerForView_(\n  syncTree: SyncTree,\n  view: View\n): { hashFn(): string; onComplete(a: string, b?: unknown): Event[] } {\n  const query = view.query;\n  const tag = syncTreeTagForQuery(syncTree, query);\n\n  return {\n    hashFn: () => {\n      const cache = viewGetServerCache(view) || ChildrenNode.EMPTY_NODE;\n      return cache.hash();\n    },\n    onComplete: (status: string): Event[] => {\n      if (status === 'ok') {\n        if (tag) {\n          return syncTreeApplyTaggedListenComplete(syncTree, query._path, tag);\n        } else {\n          return syncTreeApplyListenComplete(syncTree, query._path);\n        }\n      } else {\n        // If a listen failed, kill all of the listeners here, not just the one that triggered the error.\n        // Note that this may need to be scoped to just this listener if we change permissions on filtered children\n        const error = errorForServerCode(status, query);\n        return syncTreeRemoveEventRegistration(\n          syncTree,\n          query,\n          /*eventRegistration*/ null,\n          error\n        );\n      }\n    }\n  };\n}\n\n/**\n * Return the tag associated with the given query.\n */\nexport function syncTreeTagForQuery(\n  syncTree: SyncTree,\n  query: QueryContext\n): number | null {\n  const queryKey = syncTreeMakeQueryKey_(query);\n  return syncTree.queryToTagMap.get(queryKey);\n}\n\n/**\n * Given a query, computes a \"queryKey\" suitable for use in our queryToTagMap_.\n */\nfunction syncTreeMakeQueryKey_(query: QueryContext): string {\n  return query._path.toString() + '$' + query._queryIdentifier;\n}\n\n/**\n * Return the query associated with the given tag, if we have one\n */\nfunction syncTreeQueryKeyForTag_(\n  syncTree: SyncTree,\n  tag: number\n): string | null {\n  return syncTree.tagToQueryMap.get(tag);\n}\n\n/**\n * Given a queryKey (created by makeQueryKey), parse it back into a path and queryId.\n */\nfunction syncTreeParseQueryKey_(queryKey: string): {\n  queryId: string;\n  path: Path;\n} {\n  const splitIndex = queryKey.indexOf('$');\n  assert(\n    splitIndex !== -1 && splitIndex < queryKey.length - 1,\n    'Bad queryKey.'\n  );\n  return {\n    queryId: queryKey.substr(splitIndex + 1),\n    path: new Path(queryKey.substr(0, splitIndex))\n  };\n}\n\n/**\n * A helper method to apply tagged operations\n */\nfunction syncTreeApplyTaggedOperation_(\n  syncTree: SyncTree,\n  queryPath: Path,\n  operation: Operation\n): Event[] {\n  const syncPoint = syncTree.syncPointTree_.get(queryPath);\n  assert(syncPoint, \"Missing sync point for query tag that we're tracking\");\n  const writesCache = writeTreeChildWrites(\n    syncTree.pendingWriteTree_,\n    queryPath\n  );\n  return syncPointApplyOperation(syncPoint, operation, writesCache, null);\n}\n\n/**\n * This collapses multiple unfiltered views into a single view, since we only need a single\n * listener for them.\n */\nfunction syncTreeCollectDistinctViewsForSubTree_(\n  subtree: ImmutableTree<SyncPoint>\n): View[] {\n  return subtree.fold<View[]>((relativePath, maybeChildSyncPoint, childMap) => {\n    if (maybeChildSyncPoint && syncPointHasCompleteView(maybeChildSyncPoint)) {\n      const completeView = syncPointGetCompleteView(maybeChildSyncPoint);\n      return [completeView];\n    } else {\n      // No complete view here, flatten any deeper listens into an array\n      let views: View[] = [];\n      if (maybeChildSyncPoint) {\n        views = syncPointGetQueryViews(maybeChildSyncPoint);\n      }\n      each(childMap, (_key: string, childViews: View[]) => {\n        views = views.concat(childViews);\n      });\n      return views;\n    }\n  });\n}\n\n/**\n * Normalizes a query to a query we send the server for listening\n *\n * @returns The normalized query\n */\nfunction syncTreeQueryForListening_(query: QueryContext): QueryContext {\n  if (query._queryParams.loadsAllData() && !query._queryParams.isDefault()) {\n    // We treat queries that load all data as default queries\n    // Cast is necessary because ref() technically returns Firebase which is actually fb.api.Firebase which inherits\n    // from Query\n    return new (syncTreeGetReferenceConstructor())(query._repo, query._path);\n  } else {\n    return query;\n  }\n}\n\nfunction syncTreeRemoveTags_(syncTree: SyncTree, queries: QueryContext[]) {\n  for (let j = 0; j < queries.length; ++j) {\n    const removedQuery = queries[j];\n    if (!removedQuery._queryParams.loadsAllData()) {\n      // We should have a tag for this\n      const removedQueryKey = syncTreeMakeQueryKey_(removedQuery);\n      const removedQueryTag = syncTree.queryToTagMap.get(removedQueryKey);\n      syncTree.queryToTagMap.delete(removedQueryKey);\n      syncTree.tagToQueryMap.delete(removedQueryTag);\n    }\n  }\n}\n\n/**\n * Static accessor for query tags.\n */\nfunction syncTreeGetNextQueryTag_(): number {\n  return syncTreeNextQueryTag_++;\n}\n\n/**\n * For a given new listen, manage the de-duplication of outstanding subscriptions.\n *\n * @returns This method can return events to support synchronous data sources\n */\nfunction syncTreeSetupListener_(\n  syncTree: SyncTree,\n  query: QueryContext,\n  view: View\n): Event[] {\n  const path = query._path;\n  const tag = syncTreeTagForQuery(syncTree, query);\n  const listener = syncTreeCreateListenerForView_(syncTree, view);\n\n  const events = syncTree.listenProvider_.startListening(\n    syncTreeQueryForListening_(query),\n    tag,\n    listener.hashFn,\n    listener.onComplete\n  );\n\n  const subtree = syncTree.syncPointTree_.subtree(path);\n  // The root of this subtree has our query. We're here because we definitely need to send a listen for that, but we\n  // may need to shadow other listens as well.\n  if (tag) {\n    assert(\n      !syncPointHasCompleteView(subtree.value),\n      \"If we're adding a query, it shouldn't be shadowed\"\n    );\n  } else {\n    // Shadow everything at or below this location, this is a default listener.\n    const queriesToStop = subtree.fold<QueryContext[]>(\n      (relativePath, maybeChildSyncPoint, childMap) => {\n        if (\n          !pathIsEmpty(relativePath) &&\n          maybeChildSyncPoint &&\n          syncPointHasCompleteView(maybeChildSyncPoint)\n        ) {\n          return [syncPointGetCompleteView(maybeChildSyncPoint).query];\n        } else {\n          // No default listener here, flatten any deeper queries into an array\n          let queries: QueryContext[] = [];\n          if (maybeChildSyncPoint) {\n            queries = queries.concat(\n              syncPointGetQueryViews(maybeChildSyncPoint).map(\n                view => view.query\n              )\n            );\n          }\n          each(childMap, (_key: string, childQueries: QueryContext[]) => {\n            queries = queries.concat(childQueries);\n          });\n          return queries;\n        }\n      }\n    );\n    for (let i = 0; i < queriesToStop.length; ++i) {\n      const queryToStop = queriesToStop[i];\n      syncTree.listenProvider_.stopListening(\n        syncTreeQueryForListening_(queryToStop),\n        syncTreeTagForQuery(syncTree, queryToStop)\n      );\n    }\n  }\n  return events;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { ChildrenNode } from '../snap/ChildrenNode';\nimport { PRIORITY_INDEX } from '../snap/indexes/PriorityIndex';\nimport { LeafNode } from '../snap/LeafNode';\nimport { Node } from '../snap/Node';\nimport { nodeFromJSON } from '../snap/nodeFromJSON';\nimport { SyncTree, syncTreeCalcCompleteEventCache } from '../SyncTree';\n\nimport { Indexable } from './misc';\nimport { Path, pathChild } from './Path';\n\n/* It's critical for performance that we do not calculate actual values from a SyncTree\n * unless and until the value is needed. Because we expose both a SyncTree and Node\n * version of deferred value resolution, we ned a wrapper class that will let us share\n * code.\n *\n * @see https://github.com/firebase/firebase-js-sdk/issues/2487\n */\ninterface ValueProvider {\n  getImmediateChild(childName: string): ValueProvider;\n  node(): Node;\n}\n\nclass ExistingValueProvider implements ValueProvider {\n  constructor(readonly node_: Node) {}\n\n  getImmediateChild(childName: string): ValueProvider {\n    const child = this.node_.getImmediateChild(childName);\n    return new ExistingValueProvider(child);\n  }\n\n  node(): Node {\n    return this.node_;\n  }\n}\n\nclass DeferredValueProvider implements ValueProvider {\n  private syncTree_: SyncTree;\n  private path_: Path;\n\n  constructor(syncTree: SyncTree, path: Path) {\n    this.syncTree_ = syncTree;\n    this.path_ = path;\n  }\n\n  getImmediateChild(childName: string): ValueProvider {\n    const childPath = pathChild(this.path_, childName);\n    return new DeferredValueProvider(this.syncTree_, childPath);\n  }\n\n  node(): Node {\n    return syncTreeCalcCompleteEventCache(this.syncTree_, this.path_);\n  }\n}\n\n/**\n * Generate placeholders for deferred values.\n */\nexport const generateWithValues = function (\n  values: {\n    [k: string]: unknown;\n  } | null\n): { [k: string]: unknown } {\n  values = values || {};\n  values['timestamp'] = values['timestamp'] || new Date().getTime();\n  return values;\n};\n\n/**\n * Value to use when firing local events. When writing server values, fire\n * local events with an approximate value, otherwise return value as-is.\n */\nexport const resolveDeferredLeafValue = function (\n  value: { [k: string]: unknown } | string | number | boolean,\n  existingVal: ValueProvider,\n  serverValues: { [k: string]: unknown }\n): string | number | boolean {\n  if (!value || typeof value !== 'object') {\n    return value as string | number | boolean;\n  }\n  assert('.sv' in value, 'Unexpected leaf node or priority contents');\n\n  if (typeof value['.sv'] === 'string') {\n    return resolveScalarDeferredValue(value['.sv'], existingVal, serverValues);\n  } else if (typeof value['.sv'] === 'object') {\n    return resolveComplexDeferredValue(value['.sv'], existingVal, serverValues);\n  } else {\n    assert(false, 'Unexpected server value: ' + JSON.stringify(value, null, 2));\n  }\n};\n\nconst resolveScalarDeferredValue = function (\n  op: string,\n  existing: ValueProvider,\n  serverValues: { [k: string]: unknown }\n): string | number | boolean {\n  switch (op) {\n    case 'timestamp':\n      return serverValues['timestamp'] as string | number | boolean;\n    default:\n      assert(false, 'Unexpected server value: ' + op);\n  }\n};\n\nconst resolveComplexDeferredValue = function (\n  op: object,\n  existing: ValueProvider,\n  unused: { [k: string]: unknown }\n): string | number | boolean {\n  if (!op.hasOwnProperty('increment')) {\n    assert(false, 'Unexpected server value: ' + JSON.stringify(op, null, 2));\n  }\n  const delta = op['increment'];\n  if (typeof delta !== 'number') {\n    assert(false, 'Unexpected increment value: ' + delta);\n  }\n\n  const existingNode = existing.node();\n  assert(\n    existingNode !== null && typeof existingNode !== 'undefined',\n    'Expected ChildrenNode.EMPTY_NODE for nulls'\n  );\n\n  // Incrementing a non-number sets the value to the incremented amount\n  if (!existingNode.isLeafNode()) {\n    return delta;\n  }\n\n  const leaf = existingNode as LeafNode;\n  const existingVal = leaf.getValue();\n  if (typeof existingVal !== 'number') {\n    return delta;\n  }\n\n  // No need to do over/underflow arithmetic here because JS only handles floats under the covers\n  return existingVal + delta;\n};\n\n/**\n * Recursively replace all deferred values and priorities in the tree with the\n * specified generated replacement values.\n * @param path - path to which write is relative\n * @param node - new data written at path\n * @param syncTree - current data\n */\nexport const resolveDeferredValueTree = function (\n  path: Path,\n  node: Node,\n  syncTree: SyncTree,\n  serverValues: Indexable\n): Node {\n  return resolveDeferredValue(\n    node,\n    new DeferredValueProvider(syncTree, path),\n    serverValues\n  );\n};\n\n/**\n * Recursively replace all deferred values and priorities in the node with the\n * specified generated replacement values.  If there are no server values in the node,\n * it'll be returned as-is.\n */\nexport const resolveDeferredValueSnapshot = function (\n  node: Node,\n  existing: Node,\n  serverValues: Indexable\n): Node {\n  return resolveDeferredValue(\n    node,\n    new ExistingValueProvider(existing),\n    serverValues\n  );\n};\n\nfunction resolveDeferredValue(\n  node: Node,\n  existingVal: ValueProvider,\n  serverValues: Indexable\n): Node {\n  const rawPri = node.getPriority().val() as\n    | Indexable\n    | boolean\n    | null\n    | number\n    | string;\n  const priority = resolveDeferredLeafValue(\n    rawPri,\n    existingVal.getImmediateChild('.priority'),\n    serverValues\n  );\n  let newNode: Node;\n\n  if (node.isLeafNode()) {\n    const leafNode = node as LeafNode;\n    const value = resolveDeferredLeafValue(\n      leafNode.getValue(),\n      existingVal,\n      serverValues\n    );\n    if (\n      value !== leafNode.getValue() ||\n      priority !== leafNode.getPriority().val()\n    ) {\n      return new LeafNode(value, nodeFromJSON(priority));\n    } else {\n      return node;\n    }\n  } else {\n    const childrenNode = node as ChildrenNode;\n    newNode = childrenNode;\n    if (priority !== childrenNode.getPriority().val()) {\n      newNode = newNode.updatePriority(new LeafNode(priority));\n    }\n    childrenNode.forEachChild(PRIORITY_INDEX, (childName, childNode) => {\n      const newChildNode = resolveDeferredValue(\n        childNode,\n        existingVal.getImmediateChild(childName),\n        serverValues\n      );\n      if (newChildNode !== childNode) {\n        newNode = newNode.updateImmediateChild(childName, newChildNode);\n      }\n    });\n    return newNode;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { contains, safeGet } from '@firebase/util';\n\nimport { Path, pathGetFront, pathPopFront } from './Path';\nimport { each } from './util';\n\n/**\n * Node in a Tree.\n */\nexport interface TreeNode<T> {\n  // TODO: Consider making accessors that create children and value lazily or\n  // separate Internal / Leaf 'types'.\n  children: Record<string, TreeNode<T>>;\n  childCount: number;\n  value?: T;\n}\n\n/**\n * A light-weight tree, traversable by path.  Nodes can have both values and children.\n * Nodes are not enumerated (by forEachChild) unless they have a value or non-empty\n * children.\n */\nexport class Tree<T> {\n  /**\n   * @param name - Optional name of the node.\n   * @param parent - Optional parent node.\n   * @param node - Optional node to wrap.\n   */\n  constructor(\n    readonly name: string = '',\n    readonly parent: Tree<T> | null = null,\n    public node: TreeNode<T> = { children: {}, childCount: 0 }\n  ) {}\n}\n\n/**\n * Returns a sub-Tree for the given path.\n *\n * @param pathObj - Path to look up.\n * @returns Tree for path.\n */\nexport function treeSubTree<T>(tree: Tree<T>, pathObj: string | Path): Tree<T> {\n  // TODO: Require pathObj to be Path?\n  let path = pathObj instanceof Path ? pathObj : new Path(pathObj);\n  let child = tree,\n    next = pathGetFront(path);\n  while (next !== null) {\n    const childNode = safeGet(child.node.children, next) || {\n      children: {},\n      childCount: 0\n    };\n    child = new Tree<T>(next, child, childNode);\n    path = pathPopFront(path);\n    next = pathGetFront(path);\n  }\n\n  return child;\n}\n\n/**\n * Returns the data associated with this tree node.\n *\n * @returns The data or null if no data exists.\n */\nexport function treeGetValue<T>(tree: Tree<T>): T | undefined {\n  return tree.node.value;\n}\n\n/**\n * Sets data to this tree node.\n *\n * @param value - Value to set.\n */\nexport function treeSetValue<T>(tree: Tree<T>, value: T | undefined): void {\n  tree.node.value = value;\n  treeUpdateParents(tree);\n}\n\n/**\n * @returns Whether the tree has any children.\n */\nexport function treeHasChildren<T>(tree: Tree<T>): boolean {\n  return tree.node.childCount > 0;\n}\n\n/**\n * @returns Whethe rthe tree is empty (no value or children).\n */\nexport function treeIsEmpty<T>(tree: Tree<T>): boolean {\n  return treeGetValue(tree) === undefined && !treeHasChildren(tree);\n}\n\n/**\n * Calls action for each child of this tree node.\n *\n * @param action - Action to be called for each child.\n */\nexport function treeForEachChild<T>(\n  tree: Tree<T>,\n  action: (tree: Tree<T>) => void\n): void {\n  each(tree.node.children, (child: string, childTree: TreeNode<T>) => {\n    action(new Tree<T>(child, tree, childTree));\n  });\n}\n\n/**\n * Does a depth-first traversal of this node's descendants, calling action for each one.\n *\n * @param action - Action to be called for each child.\n * @param includeSelf - Whether to call action on this node as well. Defaults to\n *   false.\n * @param childrenFirst - Whether to call action on children before calling it on\n *   parent.\n */\nexport function treeForEachDescendant<T>(\n  tree: Tree<T>,\n  action: (tree: Tree<T>) => void,\n  includeSelf?: boolean,\n  childrenFirst?: boolean\n): void {\n  if (includeSelf && !childrenFirst) {\n    action(tree);\n  }\n\n  treeForEachChild(tree, child => {\n    treeForEachDescendant(child, action, true, childrenFirst);\n  });\n\n  if (includeSelf && childrenFirst) {\n    action(tree);\n  }\n}\n\n/**\n * Calls action on each ancestor node.\n *\n * @param action - Action to be called on each parent; return\n *   true to abort.\n * @param includeSelf - Whether to call action on this node as well.\n * @returns true if the action callback returned true.\n */\nexport function treeForEachAncestor<T>(\n  tree: Tree<T>,\n  action: (tree: Tree<T>) => unknown,\n  includeSelf?: boolean\n): boolean {\n  let node = includeSelf ? tree : tree.parent;\n  while (node !== null) {\n    if (action(node)) {\n      return true;\n    }\n    node = node.parent;\n  }\n  return false;\n}\n\n/**\n * Does a depth-first traversal of this node's descendants.  When a descendant with a value\n * is found, action is called on it and traversal does not continue inside the node.\n * Action is *not* called on this node.\n *\n * @param action - Action to be called for each child.\n */\nexport function treeForEachImmediateDescendantWithValue<T>(\n  tree: Tree<T>,\n  action: (tree: Tree<T>) => void\n): void {\n  treeForEachChild(tree, child => {\n    if (treeGetValue(child) !== undefined) {\n      action(child);\n    } else {\n      treeForEachImmediateDescendantWithValue(child, action);\n    }\n  });\n}\n\n/**\n * @returns The path of this tree node, as a Path.\n */\nexport function treeGetPath<T>(tree: Tree<T>) {\n  return new Path(\n    tree.parent === null\n      ? tree.name\n      : treeGetPath(tree.parent) + '/' + tree.name\n  );\n}\n\n/**\n * Adds or removes this child from its parent based on whether it's empty or not.\n */\nfunction treeUpdateParents<T>(tree: Tree<T>) {\n  if (tree.parent !== null) {\n    treeUpdateChild(tree.parent, tree.name, tree);\n  }\n}\n\n/**\n * Adds or removes the passed child to this tree node, depending on whether it's empty.\n *\n * @param childName - The name of the child to update.\n * @param child - The child to update.\n */\nfunction treeUpdateChild<T>(tree: Tree<T>, childName: string, child: Tree<T>) {\n  const childEmpty = treeIsEmpty(child);\n  const childExists = contains(tree.node.children, childName);\n  if (childEmpty && childExists) {\n    delete tree.node.children[childName];\n    tree.node.childCount--;\n    treeUpdateParents(tree);\n  } else if (!childEmpty && !childExists) {\n    tree.node.children[childName] = child.node;\n    tree.node.childCount++;\n    treeUpdateParents(tree);\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  contains,\n  errorPrefix as errorPrefixFxn,\n  safeGet,\n  stringLength\n} from '@firebase/util';\n\nimport { RepoInfo } from '../RepoInfo';\n\nimport {\n  Path,\n  pathChild,\n  pathCompare,\n  pathContains,\n  pathGetBack,\n  pathGetFront,\n  pathSlice,\n  ValidationPath,\n  validationPathPop,\n  validationPathPush,\n  validationPathToErrorString\n} from './Path';\nimport { each, isInvalidJSONNumber } from './util';\n\n/**\n * True for invalid Firebase keys\n */\nexport const INVALID_KEY_REGEX_ = /[\\[\\].#$\\/\\u0000-\\u001F\\u007F]/;\n\n/**\n * True for invalid Firebase paths.\n * Allows '/' in paths.\n */\nexport const INVALID_PATH_REGEX_ = /[\\[\\].#$\\u0000-\\u001F\\u007F]/;\n\n/**\n * Maximum number of characters to allow in leaf value\n */\nexport const MAX_LEAF_SIZE_ = 10 * 1024 * 1024;\n\nexport const isValidKey = function (key: unknown): boolean {\n  return (\n    typeof key === 'string' && key.length !== 0 && !INVALID_KEY_REGEX_.test(key)\n  );\n};\n\nexport const isValidPathString = function (pathString: string): boolean {\n  return (\n    typeof pathString === 'string' &&\n    pathString.length !== 0 &&\n    !INVALID_PATH_REGEX_.test(pathString)\n  );\n};\n\nexport const isValidRootPathString = function (pathString: string): boolean {\n  if (pathString) {\n    // Allow '/.info/' at the beginning.\n    pathString = pathString.replace(/^\\/*\\.info(\\/|$)/, '/');\n  }\n\n  return isValidPathString(pathString);\n};\n\nexport const isValidPriority = function (priority: unknown): boolean {\n  return (\n    priority === null ||\n    typeof priority === 'string' ||\n    (typeof priority === 'number' && !isInvalidJSONNumber(priority)) ||\n    (priority &&\n      typeof priority === 'object' &&\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      contains(priority as any, '.sv'))\n  );\n};\n\n/**\n * Pre-validate a datum passed as an argument to Firebase function.\n */\nexport const validateFirebaseDataArg = function (\n  fnName: string,\n  value: unknown,\n  path: Path,\n  optional: boolean\n) {\n  if (optional && value === undefined) {\n    return;\n  }\n\n  validateFirebaseData(errorPrefixFxn(fnName, 'value'), value, path);\n};\n\n/**\n * Validate a data object client-side before sending to server.\n */\nexport const validateFirebaseData = function (\n  errorPrefix: string,\n  data: unknown,\n  path_: Path | ValidationPath\n) {\n  const path =\n    path_ instanceof Path ? new ValidationPath(path_, errorPrefix) : path_;\n\n  if (data === undefined) {\n    throw new Error(\n      errorPrefix + 'contains undefined ' + validationPathToErrorString(path)\n    );\n  }\n  if (typeof data === 'function') {\n    throw new Error(\n      errorPrefix +\n        'contains a function ' +\n        validationPathToErrorString(path) +\n        ' with contents = ' +\n        data.toString()\n    );\n  }\n  if (isInvalidJSONNumber(data)) {\n    throw new Error(\n      errorPrefix +\n        'contains ' +\n        data.toString() +\n        ' ' +\n        validationPathToErrorString(path)\n    );\n  }\n\n  // Check max leaf size, but try to avoid the utf8 conversion if we can.\n  if (\n    typeof data === 'string' &&\n    data.length > MAX_LEAF_SIZE_ / 3 &&\n    stringLength(data) > MAX_LEAF_SIZE_\n  ) {\n    throw new Error(\n      errorPrefix +\n        'contains a string greater than ' +\n        MAX_LEAF_SIZE_ +\n        ' utf8 bytes ' +\n        validationPathToErrorString(path) +\n        \" ('\" +\n        data.substring(0, 50) +\n        \"...')\"\n    );\n  }\n\n  // TODO = Perf = Consider combining the recursive validation of keys into NodeFromJSON\n  // to save extra walking of large objects.\n  if (data && typeof data === 'object') {\n    let hasDotValue = false;\n    let hasActualChild = false;\n    each(data, (key: string, value: unknown) => {\n      if (key === '.value') {\n        hasDotValue = true;\n      } else if (key !== '.priority' && key !== '.sv') {\n        hasActualChild = true;\n        if (!isValidKey(key)) {\n          throw new Error(\n            errorPrefix +\n              ' contains an invalid key (' +\n              key +\n              ') ' +\n              validationPathToErrorString(path) +\n              '.  Keys must be non-empty strings ' +\n              'and can\\'t contain \".\", \"#\", \"$\", \"/\", \"[\", or \"]\"'\n          );\n        }\n      }\n\n      validationPathPush(path, key);\n      validateFirebaseData(errorPrefix, value, path);\n      validationPathPop(path);\n    });\n\n    if (hasDotValue && hasActualChild) {\n      throw new Error(\n        errorPrefix +\n          ' contains \".value\" child ' +\n          validationPathToErrorString(path) +\n          ' in addition to actual children.'\n      );\n    }\n  }\n};\n\n/**\n * Pre-validate paths passed in the firebase function.\n */\nexport const validateFirebaseMergePaths = function (\n  errorPrefix: string,\n  mergePaths: Path[]\n) {\n  let i, curPath: Path;\n  for (i = 0; i < mergePaths.length; i++) {\n    curPath = mergePaths[i];\n    const keys = pathSlice(curPath);\n    for (let j = 0; j < keys.length; j++) {\n      if (keys[j] === '.priority' && j === keys.length - 1) {\n        // .priority is OK\n      } else if (!isValidKey(keys[j])) {\n        throw new Error(\n          errorPrefix +\n            'contains an invalid key (' +\n            keys[j] +\n            ') in path ' +\n            curPath.toString() +\n            '. Keys must be non-empty strings ' +\n            'and can\\'t contain \".\", \"#\", \"$\", \"/\", \"[\", or \"]\"'\n        );\n      }\n    }\n  }\n\n  // Check that update keys are not descendants of each other.\n  // We rely on the property that sorting guarantees that ancestors come\n  // right before descendants.\n  mergePaths.sort(pathCompare);\n  let prevPath: Path | null = null;\n  for (i = 0; i < mergePaths.length; i++) {\n    curPath = mergePaths[i];\n    if (prevPath !== null && pathContains(prevPath, curPath)) {\n      throw new Error(\n        errorPrefix +\n          'contains a path ' +\n          prevPath.toString() +\n          ' that is ancestor of another path ' +\n          curPath.toString()\n      );\n    }\n    prevPath = curPath;\n  }\n};\n\n/**\n * pre-validate an object passed as an argument to firebase function (\n * must be an object - e.g. for firebase.update()).\n */\nexport const validateFirebaseMergeDataArg = function (\n  fnName: string,\n  data: unknown,\n  path: Path,\n  optional: boolean\n) {\n  if (optional && data === undefined) {\n    return;\n  }\n\n  const errorPrefix = errorPrefixFxn(fnName, 'values');\n\n  if (!(data && typeof data === 'object') || Array.isArray(data)) {\n    throw new Error(\n      errorPrefix + ' must be an object containing the children to replace.'\n    );\n  }\n\n  const mergePaths: Path[] = [];\n  each(data, (key: string, value: unknown) => {\n    const curPath = new Path(key);\n    validateFirebaseData(errorPrefix, value, pathChild(path, curPath));\n    if (pathGetBack(curPath) === '.priority') {\n      if (!isValidPriority(value)) {\n        throw new Error(\n          errorPrefix +\n            \"contains an invalid value for '\" +\n            curPath.toString() +\n            \"', which must be a valid \" +\n            'Firebase priority (a string, finite number, server value, or null).'\n        );\n      }\n    }\n    mergePaths.push(curPath);\n  });\n  validateFirebaseMergePaths(errorPrefix, mergePaths);\n};\n\nexport const validatePriority = function (\n  fnName: string,\n  priority: unknown,\n  optional: boolean\n) {\n  if (optional && priority === undefined) {\n    return;\n  }\n  if (isInvalidJSONNumber(priority)) {\n    throw new Error(\n      errorPrefixFxn(fnName, 'priority') +\n        'is ' +\n        priority.toString() +\n        ', but must be a valid Firebase priority (a string, finite number, ' +\n        'server value, or null).'\n    );\n  }\n  // Special case to allow importing data with a .sv.\n  if (!isValidPriority(priority)) {\n    throw new Error(\n      errorPrefixFxn(fnName, 'priority') +\n        'must be a valid Firebase priority ' +\n        '(a string, finite number, server value, or null).'\n    );\n  }\n};\n\nexport const validateKey = function (\n  fnName: string,\n  argumentName: string,\n  key: string,\n  optional: boolean\n) {\n  if (optional && key === undefined) {\n    return;\n  }\n  if (!isValidKey(key)) {\n    throw new Error(\n      errorPrefixFxn(fnName, argumentName) +\n        'was an invalid key = \"' +\n        key +\n        '\".  Firebase keys must be non-empty strings and ' +\n        'can\\'t contain \".\", \"#\", \"$\", \"/\", \"[\", or \"]\").'\n    );\n  }\n};\n\n/**\n * @internal\n */\nexport const validatePathString = function (\n  fnName: string,\n  argumentName: string,\n  pathString: string,\n  optional: boolean\n) {\n  if (optional && pathString === undefined) {\n    return;\n  }\n\n  if (!isValidPathString(pathString)) {\n    throw new Error(\n      errorPrefixFxn(fnName, argumentName) +\n        'was an invalid path = \"' +\n        pathString +\n        '\". Paths must be non-empty strings and ' +\n        'can\\'t contain \".\", \"#\", \"$\", \"[\", or \"]\"'\n    );\n  }\n};\n\nexport const validateRootPathString = function (\n  fnName: string,\n  argumentName: string,\n  pathString: string,\n  optional: boolean\n) {\n  if (pathString) {\n    // Allow '/.info/' at the beginning.\n    pathString = pathString.replace(/^\\/*\\.info(\\/|$)/, '/');\n  }\n\n  validatePathString(fnName, argumentName, pathString, optional);\n};\n\n/**\n * @internal\n */\nexport const validateWritablePath = function (fnName: string, path: Path) {\n  if (pathGetFront(path) === '.info') {\n    throw new Error(fnName + \" failed = Can't modify data under /.info/\");\n  }\n};\n\nexport const validateUrl = function (\n  fnName: string,\n  parsedUrl: { repoInfo: RepoInfo; path: Path }\n) {\n  // TODO = Validate server better.\n  const pathString = parsedUrl.path.toString();\n  if (\n    !(typeof parsedUrl.repoInfo.host === 'string') ||\n    parsedUrl.repoInfo.host.length === 0 ||\n    (!isValidKey(parsedUrl.repoInfo.namespace) &&\n      parsedUrl.repoInfo.host.split(':')[0] !== 'localhost') ||\n    (pathString.length !== 0 && !isValidRootPathString(pathString))\n  ) {\n    throw new Error(\n      errorPrefixFxn(fnName, 'url') +\n        'must be a valid firebase URL and ' +\n        'the path can\\'t contain \".\", \"#\", \"$\", \"[\", or \"]\".'\n    );\n  }\n};\n\nexport const validateString = function (\n  fnName: string,\n  argumentName: string,\n  string: unknown,\n  optional: boolean\n) {\n  if (optional && string === undefined) {\n    return;\n  }\n  if (!(typeof string === 'string')) {\n    throw new Error(\n      errorPrefixFxn(fnName, argumentName) + 'must be a valid string.'\n    );\n  }\n};\n\nexport const validateObject = function (\n  fnName: string,\n  argumentName: string,\n  obj: unknown,\n  optional: boolean\n) {\n  if (optional && obj === undefined) {\n    return;\n  }\n  if (!(obj && typeof obj === 'object') || obj === null) {\n    throw new Error(\n      errorPrefixFxn(fnName, argumentName) + 'must be a valid object.'\n    );\n  }\n};\n\nexport const validateObjectContainsKey = function (\n  fnName: string,\n  argumentName: string,\n  obj: unknown,\n  key: string,\n  optional: boolean,\n  optType?: string\n) {\n  const objectContainsKey =\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    obj && typeof obj === 'object' && contains(obj as any, key);\n\n  if (!objectContainsKey) {\n    if (optional) {\n      return;\n    } else {\n      throw new Error(\n        errorPrefixFxn(fnName, argumentName) +\n          'must contain the key \"' +\n          key +\n          '\"'\n      );\n    }\n  }\n\n  if (optType) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const val = safeGet(obj as any, key);\n    if (\n      (optType === 'number' && !(typeof val === 'number')) ||\n      (optType === 'string' && !(typeof val === 'string')) ||\n      (optType === 'boolean' && !(typeof val === 'boolean')) ||\n      (optType === 'function' && !(typeof val === 'function')) ||\n      (optType === 'object' && !(typeof val === 'object') && val)\n    ) {\n      if (optional) {\n        throw new Error(\n          errorPrefixFxn(fnName, argumentName) +\n            'contains invalid value for key \"' +\n            key +\n            '\" (must be of type \"' +\n            optType +\n            '\")'\n        );\n      } else {\n        throw new Error(\n          errorPrefixFxn(fnName, argumentName) +\n            'must contain the key \"' +\n            key +\n            '\" with type \"' +\n            optType +\n            '\"'\n        );\n      }\n    }\n  }\n};\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Path, pathContains, pathEquals } from '../util/Path';\nimport { exceptionGuard, log, logger } from '../util/util';\n\nimport { Event } from './Event';\n\n/**\n * The event queue serves a few purposes:\n * 1. It ensures we maintain event order in the face of event callbacks doing operations that result in more\n *    events being queued.\n * 2. raiseQueuedEvents() handles being called reentrantly nicely.  That is, if in the course of raising events,\n *    raiseQueuedEvents() is called again, the \"inner\" call will pick up raising events where the \"outer\" call\n *    left off, ensuring that the events are still raised synchronously and in order.\n * 3. You can use raiseEventsAtPath and raiseEventsForChangedPath to ensure only relevant previously-queued\n *    events are raised synchronously.\n *\n * NOTE: This can all go away if/when we move to async events.\n *\n */\nexport class EventQueue {\n  eventLists_: EventList[] = [];\n\n  /**\n   * Tracks recursion depth of raiseQueuedEvents_, for debugging purposes.\n   */\n  recursionDepth_ = 0;\n}\n\n/**\n * @param eventDataList - The new events to queue.\n */\nexport function eventQueueQueueEvents(\n  eventQueue: EventQueue,\n  eventDataList: Event[]\n) {\n  // We group events by path, storing them in a single EventList, to make it easier to skip over them quickly.\n  let currList: EventList | null = null;\n  for (let i = 0; i < eventDataList.length; i++) {\n    const data = eventDataList[i];\n    const path = data.getPath();\n    if (currList !== null && !pathEquals(path, currList.path)) {\n      eventQueue.eventLists_.push(currList);\n      currList = null;\n    }\n\n    if (currList === null) {\n      currList = { events: [], path };\n    }\n\n    currList.events.push(data);\n  }\n  if (currList) {\n    eventQueue.eventLists_.push(currList);\n  }\n}\n\n/**\n * Queues the specified events and synchronously raises all events (including previously queued ones)\n * for the specified path.\n *\n * It is assumed that the new events are all for the specified path.\n *\n * @param path - The path to raise events for.\n * @param eventDataList - The new events to raise.\n */\nexport function eventQueueRaiseEventsAtPath(\n  eventQueue: EventQueue,\n  path: Path,\n  eventDataList: Event[]\n) {\n  eventQueueQueueEvents(eventQueue, eventDataList);\n  eventQueueRaiseQueuedEventsMatchingPredicate(eventQueue, eventPath =>\n    pathEquals(eventPath, path)\n  );\n}\n\n/**\n * Queues the specified events and synchronously raises all events (including previously queued ones) for\n * locations related to the specified change path (i.e. all ancestors and descendants).\n *\n * It is assumed that the new events are all related (ancestor or descendant) to the specified path.\n *\n * @param changedPath - The path to raise events for.\n * @param eventDataList - The events to raise\n */\nexport function eventQueueRaiseEventsForChangedPath(\n  eventQueue: EventQueue,\n  changedPath: Path,\n  eventDataList: Event[]\n) {\n  eventQueueQueueEvents(eventQueue, eventDataList);\n  eventQueueRaiseQueuedEventsMatchingPredicate(\n    eventQueue,\n    eventPath =>\n      pathContains(eventPath, changedPath) ||\n      pathContains(changedPath, eventPath)\n  );\n}\n\nfunction eventQueueRaiseQueuedEventsMatchingPredicate(\n  eventQueue: EventQueue,\n  predicate: (path: Path) => boolean\n) {\n  eventQueue.recursionDepth_++;\n\n  let sentAll = true;\n  for (let i = 0; i < eventQueue.eventLists_.length; i++) {\n    const eventList = eventQueue.eventLists_[i];\n    if (eventList) {\n      const eventPath = eventList.path;\n      if (predicate(eventPath)) {\n        eventListRaise(eventQueue.eventLists_[i]);\n        eventQueue.eventLists_[i] = null;\n      } else {\n        sentAll = false;\n      }\n    }\n  }\n\n  if (sentAll) {\n    eventQueue.eventLists_ = [];\n  }\n\n  eventQueue.recursionDepth_--;\n}\n\ninterface EventList {\n  events: Event[];\n  path: Path;\n}\n\n/**\n * Iterates through the list and raises each event\n */\nfunction eventListRaise(eventList: EventList) {\n  for (let i = 0; i < eventList.events.length; i++) {\n    const eventData = eventList.events[i];\n    if (eventData !== null) {\n      eventList.events[i] = null;\n      const eventFn = eventData.getEventRunner();\n      if (logger) {\n        log('event: ' + eventData.toString());\n      }\n      exceptionGuard(eventFn);\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  assert,\n  contains,\n  isEmpty,\n  map,\n  safeGet,\n  stringify\n} from '@firebase/util';\n\nimport { ValueEventRegistration } from '../api/Reference_impl';\n\nimport { AppCheckTokenProvider } from './AppCheckTokenProvider';\nimport { AuthTokenProvider } from './AuthTokenProvider';\nimport { PersistentConnection } from './PersistentConnection';\nimport { ReadonlyRestClient } from './ReadonlyRestClient';\nimport { RepoInfo } from './RepoInfo';\nimport { ServerActions } from './ServerActions';\nimport { ChildrenNode } from './snap/ChildrenNode';\nimport { Node } from './snap/Node';\nimport { nodeFromJSON } from './snap/nodeFromJSON';\nimport { SnapshotHolder } from './SnapshotHolder';\nimport {\n  newSparseSnapshotTree,\n  SparseSnapshotTree,\n  sparseSnapshotTreeForEachTree,\n  sparseSnapshotTreeForget,\n  sparseSnapshotTreeRemember\n} from './SparseSnapshotTree';\nimport { StatsCollection } from './stats/StatsCollection';\nimport { StatsListener } from './stats/StatsListener';\nimport {\n  statsManagerGetCollection,\n  statsManagerGetOrCreateReporter\n} from './stats/StatsManager';\nimport { StatsReporter, statsReporterIncludeStat } from './stats/StatsReporter';\nimport {\n  SyncTree,\n  syncTreeAckUserWrite,\n  syncTreeAddEventRegistration,\n  syncTreeApplyServerMerge,\n  syncTreeApplyServerOverwrite,\n  syncTreeApplyTaggedQueryMerge,\n  syncTreeApplyTaggedQueryOverwrite,\n  syncTreeApplyUserMerge,\n  syncTreeApplyUserOverwrite,\n  syncTreeCalcCompleteEventCache,\n  syncTreeGetServerValue,\n  syncTreeRemoveEventRegistration,\n  syncTreeTagForQuery\n} from './SyncTree';\nimport { Indexable } from './util/misc';\nimport {\n  newEmptyPath,\n  newRelativePath,\n  Path,\n  pathChild,\n  pathGetFront,\n  pathPopFront\n} from './util/Path';\nimport {\n  generateWithValues,\n  resolveDeferredValueSnapshot,\n  resolveDeferredValueTree\n} from './util/ServerValues';\nimport {\n  Tree,\n  treeForEachAncestor,\n  treeForEachChild,\n  treeForEachDescendant,\n  treeGetPath,\n  treeGetValue,\n  treeHasChildren,\n  treeSetValue,\n  treeSubTree\n} from './util/Tree';\nimport {\n  beingCrawled,\n  each,\n  exceptionGuard,\n  log,\n  LUIDGenerator,\n  warn\n} from './util/util';\nimport { isValidPriority, validateFirebaseData } from './util/validation';\nimport { Event } from './view/Event';\nimport {\n  EventQueue,\n  eventQueueQueueEvents,\n  eventQueueRaiseEventsAtPath,\n  eventQueueRaiseEventsForChangedPath\n} from './view/EventQueue';\nimport { EventRegistration, QueryContext } from './view/EventRegistration';\n\nconst INTERRUPT_REASON = 'repo_interrupt';\n\n/**\n * If a transaction does not succeed after 25 retries, we abort it. Among other\n * things this ensure that if there's ever a bug causing a mismatch between\n * client / server hashes for some data, we won't retry indefinitely.\n */\nconst MAX_TRANSACTION_RETRIES = 25;\n\nconst enum TransactionStatus {\n  // We've run the transaction and updated transactionResultData_ with the result, but it isn't currently sent to the\n  // server. A transaction will go from RUN -> SENT -> RUN if it comes back from the server as rejected due to\n  // mismatched hash.\n  RUN,\n\n  // We've run the transaction and sent it to the server and it's currently outstanding (hasn't come back as accepted\n  // or rejected yet).\n  SENT,\n\n  // Temporary state used to mark completed transactions (whether successful or aborted).  The transaction will be\n  // removed when we get a chance to prune completed ones.\n  COMPLETED,\n\n  // Used when an already-sent transaction needs to be aborted (e.g. due to a conflicting set() call that was made).\n  // If it comes back as unsuccessful, we'll abort it.\n  SENT_NEEDS_ABORT,\n\n  // Temporary state used to mark transactions that need to be aborted.\n  NEEDS_ABORT\n}\n\ninterface Transaction {\n  path: Path;\n  update: (a: unknown) => unknown;\n  onComplete: (\n    error: Error | null,\n    committed: boolean,\n    node: Node | null\n  ) => void;\n  status: TransactionStatus;\n  order: number;\n  applyLocally: boolean;\n  retryCount: number;\n  unwatcher: () => void;\n  abortReason: string | null;\n  currentWriteId: number;\n  currentInputSnapshot: Node | null;\n  currentOutputSnapshotRaw: Node | null;\n  currentOutputSnapshotResolved: Node | null;\n}\n\n/**\n * A connection to a single data repository.\n */\nexport class Repo {\n  /** Key for uniquely identifying this repo, used in RepoManager */\n  readonly key: string;\n\n  dataUpdateCount = 0;\n  infoSyncTree_: SyncTree;\n  serverSyncTree_: SyncTree;\n\n  stats_: StatsCollection;\n  statsListener_: StatsListener | null = null;\n  eventQueue_ = new EventQueue();\n  nextWriteId_ = 1;\n  server_: ServerActions;\n  statsReporter_: StatsReporter;\n  infoData_: SnapshotHolder;\n  interceptServerDataCallback_: ((a: string, b: unknown) => void) | null = null;\n\n  /** A list of data pieces and paths to be set when this client disconnects. */\n  onDisconnect_: SparseSnapshotTree = newSparseSnapshotTree();\n\n  /** Stores queues of outstanding transactions for Firebase locations. */\n  transactionQueueTree_ = new Tree<Transaction[]>();\n\n  // TODO: This should be @private but it's used by test_access.js and internal.js\n  persistentConnection_: PersistentConnection | null = null;\n\n  constructor(\n    public repoInfo_: RepoInfo,\n    public forceRestClient_: boolean,\n    public authTokenProvider_: AuthTokenProvider,\n    public appCheckProvider_: AppCheckTokenProvider\n  ) {\n    // This key is intentionally not updated if RepoInfo is later changed or replaced\n    this.key = this.repoInfo_.toURLString();\n  }\n\n  /**\n   * @returns The URL corresponding to the root of this Firebase.\n   */\n  toString(): string {\n    return (\n      (this.repoInfo_.secure ? 'https://' : 'http://') + this.repoInfo_.host\n    );\n  }\n}\n\nexport function repoStart(\n  repo: Repo,\n  appId: string,\n  authOverride?: object\n): void {\n  repo.stats_ = statsManagerGetCollection(repo.repoInfo_);\n\n  if (repo.forceRestClient_ || beingCrawled()) {\n    repo.server_ = new ReadonlyRestClient(\n      repo.repoInfo_,\n      (\n        pathString: string,\n        data: unknown,\n        isMerge: boolean,\n        tag: number | null\n      ) => {\n        repoOnDataUpdate(repo, pathString, data, isMerge, tag);\n      },\n      repo.authTokenProvider_,\n      repo.appCheckProvider_\n    );\n\n    // Minor hack: Fire onConnect immediately, since there's no actual connection.\n    setTimeout(() => repoOnConnectStatus(repo, /* connectStatus= */ true), 0);\n  } else {\n    // Validate authOverride\n    if (typeof authOverride !== 'undefined' && authOverride !== null) {\n      if (typeof authOverride !== 'object') {\n        throw new Error(\n          'Only objects are supported for option databaseAuthVariableOverride'\n        );\n      }\n      try {\n        stringify(authOverride);\n      } catch (e) {\n        throw new Error('Invalid authOverride provided: ' + e);\n      }\n    }\n\n    repo.persistentConnection_ = new PersistentConnection(\n      repo.repoInfo_,\n      appId,\n      (\n        pathString: string,\n        data: unknown,\n        isMerge: boolean,\n        tag: number | null\n      ) => {\n        repoOnDataUpdate(repo, pathString, data, isMerge, tag);\n      },\n      (connectStatus: boolean) => {\n        repoOnConnectStatus(repo, connectStatus);\n      },\n      (updates: object) => {\n        repoOnServerInfoUpdate(repo, updates);\n      },\n      repo.authTokenProvider_,\n      repo.appCheckProvider_,\n      authOverride\n    );\n\n    repo.server_ = repo.persistentConnection_;\n  }\n\n  repo.authTokenProvider_.addTokenChangeListener(token => {\n    repo.server_.refreshAuthToken(token);\n  });\n\n  repo.appCheckProvider_.addTokenChangeListener(result => {\n    repo.server_.refreshAppCheckToken(result.token);\n  });\n\n  // In the case of multiple Repos for the same repoInfo (i.e. there are multiple Firebase.Contexts being used),\n  // we only want to create one StatsReporter.  As such, we'll report stats over the first Repo created.\n  repo.statsReporter_ = statsManagerGetOrCreateReporter(\n    repo.repoInfo_,\n    () => new StatsReporter(repo.stats_, repo.server_)\n  );\n\n  // Used for .info.\n  repo.infoData_ = new SnapshotHolder();\n  repo.infoSyncTree_ = new SyncTree({\n    startListening: (query, tag, currentHashFn, onComplete) => {\n      let infoEvents: Event[] = [];\n      const node = repo.infoData_.getNode(query._path);\n      // This is possibly a hack, but we have different semantics for .info endpoints. We don't raise null events\n      // on initial data...\n      if (!node.isEmpty()) {\n        infoEvents = syncTreeApplyServerOverwrite(\n          repo.infoSyncTree_,\n          query._path,\n          node\n        );\n        setTimeout(() => {\n          onComplete('ok');\n        }, 0);\n      }\n      return infoEvents;\n    },\n    stopListening: () => {}\n  });\n  repoUpdateInfo(repo, 'connected', false);\n\n  repo.serverSyncTree_ = new SyncTree({\n    startListening: (query, tag, currentHashFn, onComplete) => {\n      repo.server_.listen(query, currentHashFn, tag, (status, data) => {\n        const events = onComplete(status, data);\n        eventQueueRaiseEventsForChangedPath(\n          repo.eventQueue_,\n          query._path,\n          events\n        );\n      });\n      // No synchronous events for network-backed sync trees\n      return [];\n    },\n    stopListening: (query, tag) => {\n      repo.server_.unlisten(query, tag);\n    }\n  });\n}\n\n/**\n * @returns The time in milliseconds, taking the server offset into account if we have one.\n */\nexport function repoServerTime(repo: Repo): number {\n  const offsetNode = repo.infoData_.getNode(new Path('.info/serverTimeOffset'));\n  const offset = (offsetNode.val() as number) || 0;\n  return new Date().getTime() + offset;\n}\n\n/**\n * Generate ServerValues using some variables from the repo object.\n */\nexport function repoGenerateServerValues(repo: Repo): Indexable {\n  return generateWithValues({\n    timestamp: repoServerTime(repo)\n  });\n}\n\n/**\n * Called by realtime when we get new messages from the server.\n */\nfunction repoOnDataUpdate(\n  repo: Repo,\n  pathString: string,\n  data: unknown,\n  isMerge: boolean,\n  tag: number | null\n): void {\n  // For testing.\n  repo.dataUpdateCount++;\n  const path = new Path(pathString);\n  data = repo.interceptServerDataCallback_\n    ? repo.interceptServerDataCallback_(pathString, data)\n    : data;\n  let events = [];\n  if (tag) {\n    if (isMerge) {\n      const taggedChildren = map(\n        data as { [k: string]: unknown },\n        (raw: unknown) => nodeFromJSON(raw)\n      );\n      events = syncTreeApplyTaggedQueryMerge(\n        repo.serverSyncTree_,\n        path,\n        taggedChildren,\n        tag\n      );\n    } else {\n      const taggedSnap = nodeFromJSON(data);\n      events = syncTreeApplyTaggedQueryOverwrite(\n        repo.serverSyncTree_,\n        path,\n        taggedSnap,\n        tag\n      );\n    }\n  } else if (isMerge) {\n    const changedChildren = map(\n      data as { [k: string]: unknown },\n      (raw: unknown) => nodeFromJSON(raw)\n    );\n    events = syncTreeApplyServerMerge(\n      repo.serverSyncTree_,\n      path,\n      changedChildren\n    );\n  } else {\n    const snap = nodeFromJSON(data);\n    events = syncTreeApplyServerOverwrite(repo.serverSyncTree_, path, snap);\n  }\n  let affectedPath = path;\n  if (events.length > 0) {\n    // Since we have a listener outstanding for each transaction, receiving any events\n    // is a proxy for some change having occurred.\n    affectedPath = repoRerunTransactions(repo, path);\n  }\n  eventQueueRaiseEventsForChangedPath(repo.eventQueue_, affectedPath, events);\n}\n\n// TODO: This should be @private but it's used by test_access.js and internal.js\nexport function repoInterceptServerData(\n  repo: Repo,\n  callback: ((a: string, b: unknown) => unknown) | null\n): void {\n  repo.interceptServerDataCallback_ = callback;\n}\n\nfunction repoOnConnectStatus(repo: Repo, connectStatus: boolean): void {\n  repoUpdateInfo(repo, 'connected', connectStatus);\n  if (connectStatus === false) {\n    repoRunOnDisconnectEvents(repo);\n  }\n}\n\nfunction repoOnServerInfoUpdate(repo: Repo, updates: object): void {\n  each(updates, (key: string, value: unknown) => {\n    repoUpdateInfo(repo, key, value);\n  });\n}\n\nfunction repoUpdateInfo(repo: Repo, pathString: string, value: unknown): void {\n  const path = new Path('/.info/' + pathString);\n  const newNode = nodeFromJSON(value);\n  repo.infoData_.updateSnapshot(path, newNode);\n  const events = syncTreeApplyServerOverwrite(\n    repo.infoSyncTree_,\n    path,\n    newNode\n  );\n  eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);\n}\n\nfunction repoGetNextWriteId(repo: Repo): number {\n  return repo.nextWriteId_++;\n}\n\n/**\n * The purpose of `getValue` is to return the latest known value\n * satisfying `query`.\n *\n * This method will first check for in-memory cached values\n * belonging to active listeners. If they are found, such values\n * are considered to be the most up-to-date.\n *\n * If the client is not connected, this method will wait until the\n *  repo has established a connection and then request the value for `query`.\n * If the client is not able to retrieve the query result for another reason,\n * it reports an error.\n *\n * @param query - The query to surface a value for.\n */\nexport function repoGetValue(\n  repo: Repo,\n  query: QueryContext,\n  eventRegistration: ValueEventRegistration\n): Promise<Node> {\n  // Only active queries are cached. There is no persisted cache.\n  const cached = syncTreeGetServerValue(repo.serverSyncTree_, query);\n  if (cached != null) {\n    return Promise.resolve(cached);\n  }\n  return repo.server_.get(query).then(\n    payload => {\n      const node = nodeFromJSON(payload).withIndex(\n        query._queryParams.getIndex()\n      );\n      /**\n       * Below we simulate the actions of an `onlyOnce` `onValue()` event where:\n       * Add an event registration,\n       * Update data at the path,\n       * Raise any events,\n       * Cleanup the SyncTree\n       */\n      syncTreeAddEventRegistration(\n        repo.serverSyncTree_,\n        query,\n        eventRegistration,\n        true\n      );\n      let events: Event[];\n      if (query._queryParams.loadsAllData()) {\n        events = syncTreeApplyServerOverwrite(\n          repo.serverSyncTree_,\n          query._path,\n          node\n        );\n      } else {\n        const tag = syncTreeTagForQuery(repo.serverSyncTree_, query);\n        events = syncTreeApplyTaggedQueryOverwrite(\n          repo.serverSyncTree_,\n          query._path,\n          node,\n          tag\n        );\n      }\n      /*\n       * We need to raise events in the scenario where `get()` is called at a parent path, and\n       * while the `get()` is pending, `onValue` is called at a child location. While get() is waiting\n       * for the data, `onValue` will register a new event. Then, get() will come back, and update the syncTree\n       * and its corresponding serverCache, including the child location where `onValue` is called. Then,\n       * `onValue` will receive the event from the server, but look at the syncTree and see that the data received\n       * from the server is already at the SyncPoint, and so the `onValue` callback will never get fired.\n       * Calling `eventQueueRaiseEventsForChangedPath()` is the correct way to propagate the events and\n       * ensure the corresponding child events will get fired.\n       */\n      eventQueueRaiseEventsForChangedPath(\n        repo.eventQueue_,\n        query._path,\n        events\n      );\n      syncTreeRemoveEventRegistration(\n        repo.serverSyncTree_,\n        query,\n        eventRegistration,\n        null,\n        true\n      );\n      return node;\n    },\n    err => {\n      repoLog(repo, 'get for query ' + stringify(query) + ' failed: ' + err);\n      return Promise.reject(new Error(err as string));\n    }\n  );\n}\n\nexport function repoSetWithPriority(\n  repo: Repo,\n  path: Path,\n  newVal: unknown,\n  newPriority: number | string | null,\n  onComplete: ((status: Error | null, errorReason?: string) => void) | null\n): void {\n  repoLog(repo, 'set', {\n    path: path.toString(),\n    value: newVal,\n    priority: newPriority\n  });\n\n  // TODO: Optimize this behavior to either (a) store flag to skip resolving where possible and / or\n  // (b) store unresolved paths on JSON parse\n  const serverValues = repoGenerateServerValues(repo);\n  const newNodeUnresolved = nodeFromJSON(newVal, newPriority);\n  const existing = syncTreeCalcCompleteEventCache(repo.serverSyncTree_, path);\n  const newNode = resolveDeferredValueSnapshot(\n    newNodeUnresolved,\n    existing,\n    serverValues\n  );\n\n  const writeId = repoGetNextWriteId(repo);\n  const events = syncTreeApplyUserOverwrite(\n    repo.serverSyncTree_,\n    path,\n    newNode,\n    writeId,\n    true\n  );\n  eventQueueQueueEvents(repo.eventQueue_, events);\n  repo.server_.put(\n    path.toString(),\n    newNodeUnresolved.val(/*export=*/ true),\n    (status, errorReason) => {\n      const success = status === 'ok';\n      if (!success) {\n        warn('set at ' + path + ' failed: ' + status);\n      }\n\n      const clearEvents = syncTreeAckUserWrite(\n        repo.serverSyncTree_,\n        writeId,\n        !success\n      );\n      eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, clearEvents);\n      repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\n    }\n  );\n  const affectedPath = repoAbortTransactions(repo, path);\n  repoRerunTransactions(repo, affectedPath);\n  // We queued the events above, so just flush the queue here\n  eventQueueRaiseEventsForChangedPath(repo.eventQueue_, affectedPath, []);\n}\n\nexport function repoUpdate(\n  repo: Repo,\n  path: Path,\n  childrenToMerge: { [k: string]: unknown },\n  onComplete: ((status: Error | null, errorReason?: string) => void) | null\n): void {\n  repoLog(repo, 'update', { path: path.toString(), value: childrenToMerge });\n\n  // Start with our existing data and merge each child into it.\n  let empty = true;\n  const serverValues = repoGenerateServerValues(repo);\n  const changedChildren: { [k: string]: Node } = {};\n  each(childrenToMerge, (changedKey: string, changedValue: unknown) => {\n    empty = false;\n    changedChildren[changedKey] = resolveDeferredValueTree(\n      pathChild(path, changedKey),\n      nodeFromJSON(changedValue),\n      repo.serverSyncTree_,\n      serverValues\n    );\n  });\n\n  if (!empty) {\n    const writeId = repoGetNextWriteId(repo);\n    const events = syncTreeApplyUserMerge(\n      repo.serverSyncTree_,\n      path,\n      changedChildren,\n      writeId\n    );\n    eventQueueQueueEvents(repo.eventQueue_, events);\n    repo.server_.merge(\n      path.toString(),\n      childrenToMerge,\n      (status, errorReason) => {\n        const success = status === 'ok';\n        if (!success) {\n          warn('update at ' + path + ' failed: ' + status);\n        }\n\n        const clearEvents = syncTreeAckUserWrite(\n          repo.serverSyncTree_,\n          writeId,\n          !success\n        );\n        const affectedPath =\n          clearEvents.length > 0 ? repoRerunTransactions(repo, path) : path;\n        eventQueueRaiseEventsForChangedPath(\n          repo.eventQueue_,\n          affectedPath,\n          clearEvents\n        );\n        repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\n      }\n    );\n\n    each(childrenToMerge, (changedPath: string) => {\n      const affectedPath = repoAbortTransactions(\n        repo,\n        pathChild(path, changedPath)\n      );\n      repoRerunTransactions(repo, affectedPath);\n    });\n\n    // We queued the events above, so just flush the queue here\n    eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, []);\n  } else {\n    log(\"update() called with empty data.  Don't do anything.\");\n    repoCallOnCompleteCallback(repo, onComplete, 'ok', undefined);\n  }\n}\n\n/**\n * Applies all of the changes stored up in the onDisconnect_ tree.\n */\nfunction repoRunOnDisconnectEvents(repo: Repo): void {\n  repoLog(repo, 'onDisconnectEvents');\n\n  const serverValues = repoGenerateServerValues(repo);\n  const resolvedOnDisconnectTree = newSparseSnapshotTree();\n  sparseSnapshotTreeForEachTree(\n    repo.onDisconnect_,\n    newEmptyPath(),\n    (path, node) => {\n      const resolved = resolveDeferredValueTree(\n        path,\n        node,\n        repo.serverSyncTree_,\n        serverValues\n      );\n      sparseSnapshotTreeRemember(resolvedOnDisconnectTree, path, resolved);\n    }\n  );\n  let events: Event[] = [];\n\n  sparseSnapshotTreeForEachTree(\n    resolvedOnDisconnectTree,\n    newEmptyPath(),\n    (path, snap) => {\n      events = events.concat(\n        syncTreeApplyServerOverwrite(repo.serverSyncTree_, path, snap)\n      );\n      const affectedPath = repoAbortTransactions(repo, path);\n      repoRerunTransactions(repo, affectedPath);\n    }\n  );\n\n  repo.onDisconnect_ = newSparseSnapshotTree();\n  eventQueueRaiseEventsForChangedPath(repo.eventQueue_, newEmptyPath(), events);\n}\n\nexport function repoOnDisconnectCancel(\n  repo: Repo,\n  path: Path,\n  onComplete: ((status: Error | null, errorReason?: string) => void) | null\n): void {\n  repo.server_.onDisconnectCancel(path.toString(), (status, errorReason) => {\n    if (status === 'ok') {\n      sparseSnapshotTreeForget(repo.onDisconnect_, path);\n    }\n    repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\n  });\n}\n\nexport function repoOnDisconnectSet(\n  repo: Repo,\n  path: Path,\n  value: unknown,\n  onComplete: ((status: Error | null, errorReason?: string) => void) | null\n): void {\n  const newNode = nodeFromJSON(value);\n  repo.server_.onDisconnectPut(\n    path.toString(),\n    newNode.val(/*export=*/ true),\n    (status, errorReason) => {\n      if (status === 'ok') {\n        sparseSnapshotTreeRemember(repo.onDisconnect_, path, newNode);\n      }\n      repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\n    }\n  );\n}\n\nexport function repoOnDisconnectSetWithPriority(\n  repo: Repo,\n  path: Path,\n  value: unknown,\n  priority: unknown,\n  onComplete: ((status: Error | null, errorReason?: string) => void) | null\n): void {\n  const newNode = nodeFromJSON(value, priority);\n  repo.server_.onDisconnectPut(\n    path.toString(),\n    newNode.val(/*export=*/ true),\n    (status, errorReason) => {\n      if (status === 'ok') {\n        sparseSnapshotTreeRemember(repo.onDisconnect_, path, newNode);\n      }\n      repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\n    }\n  );\n}\n\nexport function repoOnDisconnectUpdate(\n  repo: Repo,\n  path: Path,\n  childrenToMerge: { [k: string]: unknown },\n  onComplete: ((status: Error | null, errorReason?: string) => void) | null\n): void {\n  if (isEmpty(childrenToMerge)) {\n    log(\"onDisconnect().update() called with empty data.  Don't do anything.\");\n    repoCallOnCompleteCallback(repo, onComplete, 'ok', undefined);\n    return;\n  }\n\n  repo.server_.onDisconnectMerge(\n    path.toString(),\n    childrenToMerge,\n    (status, errorReason) => {\n      if (status === 'ok') {\n        each(childrenToMerge, (childName: string, childNode: unknown) => {\n          const newChildNode = nodeFromJSON(childNode);\n          sparseSnapshotTreeRemember(\n            repo.onDisconnect_,\n            pathChild(path, childName),\n            newChildNode\n          );\n        });\n      }\n      repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\n    }\n  );\n}\n\nexport function repoAddEventCallbackForQuery(\n  repo: Repo,\n  query: QueryContext,\n  eventRegistration: EventRegistration\n): void {\n  let events;\n  if (pathGetFront(query._path) === '.info') {\n    events = syncTreeAddEventRegistration(\n      repo.infoSyncTree_,\n      query,\n      eventRegistration\n    );\n  } else {\n    events = syncTreeAddEventRegistration(\n      repo.serverSyncTree_,\n      query,\n      eventRegistration\n    );\n  }\n  eventQueueRaiseEventsAtPath(repo.eventQueue_, query._path, events);\n}\n\nexport function repoRemoveEventCallbackForQuery(\n  repo: Repo,\n  query: QueryContext,\n  eventRegistration: EventRegistration\n): void {\n  // These are guaranteed not to raise events, since we're not passing in a cancelError. However, we can future-proof\n  // a little bit by handling the return values anyways.\n  let events;\n  if (pathGetFront(query._path) === '.info') {\n    events = syncTreeRemoveEventRegistration(\n      repo.infoSyncTree_,\n      query,\n      eventRegistration\n    );\n  } else {\n    events = syncTreeRemoveEventRegistration(\n      repo.serverSyncTree_,\n      query,\n      eventRegistration\n    );\n  }\n  eventQueueRaiseEventsAtPath(repo.eventQueue_, query._path, events);\n}\n\nexport function repoInterrupt(repo: Repo): void {\n  if (repo.persistentConnection_) {\n    repo.persistentConnection_.interrupt(INTERRUPT_REASON);\n  }\n}\n\nexport function repoResume(repo: Repo): void {\n  if (repo.persistentConnection_) {\n    repo.persistentConnection_.resume(INTERRUPT_REASON);\n  }\n}\n\nexport function repoStats(repo: Repo, showDelta: boolean = false): void {\n  if (typeof console === 'undefined') {\n    return;\n  }\n\n  let stats: { [k: string]: unknown };\n  if (showDelta) {\n    if (!repo.statsListener_) {\n      repo.statsListener_ = new StatsListener(repo.stats_);\n    }\n    stats = repo.statsListener_.get();\n  } else {\n    stats = repo.stats_.get();\n  }\n\n  const longestName = Object.keys(stats).reduce(\n    (previousValue, currentValue) =>\n      Math.max(currentValue.length, previousValue),\n    0\n  );\n\n  each(stats, (stat: string, value: unknown) => {\n    let paddedStat = stat;\n    // pad stat names to be the same length (plus 2 extra spaces).\n    for (let i = stat.length; i < longestName + 2; i++) {\n      paddedStat += ' ';\n    }\n    console.log(paddedStat + value);\n  });\n}\n\nexport function repoStatsIncrementCounter(repo: Repo, metric: string): void {\n  repo.stats_.incrementCounter(metric);\n  statsReporterIncludeStat(repo.statsReporter_, metric);\n}\n\nfunction repoLog(repo: Repo, ...varArgs: unknown[]): void {\n  let prefix = '';\n  if (repo.persistentConnection_) {\n    prefix = repo.persistentConnection_.id + ':';\n  }\n  log(prefix, ...varArgs);\n}\n\nexport function repoCallOnCompleteCallback(\n  repo: Repo,\n  callback: ((status: Error | null, errorReason?: string) => void) | null,\n  status: string,\n  errorReason?: string | null\n): void {\n  if (callback) {\n    exceptionGuard(() => {\n      if (status === 'ok') {\n        callback(null);\n      } else {\n        const code = (status || 'error').toUpperCase();\n        let message = code;\n        if (errorReason) {\n          message += ': ' + errorReason;\n        }\n\n        const error = new Error(message);\n\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        (error as any).code = code;\n        callback(error);\n      }\n    });\n  }\n}\n\n/**\n * Creates a new transaction, adds it to the transactions we're tracking, and\n * sends it to the server if possible.\n *\n * @param path - Path at which to do transaction.\n * @param transactionUpdate - Update callback.\n * @param onComplete - Completion callback.\n * @param unwatcher - Function that will be called when the transaction no longer\n * need data updates for `path`.\n * @param applyLocally - Whether or not to make intermediate results visible\n */\nexport function repoStartTransaction(\n  repo: Repo,\n  path: Path,\n  transactionUpdate: (a: unknown) => unknown,\n  onComplete: ((error: Error, committed: boolean, node: Node) => void) | null,\n  unwatcher: () => void,\n  applyLocally: boolean\n): void {\n  repoLog(repo, 'transaction on ' + path);\n\n  // Initialize transaction.\n  const transaction: Transaction = {\n    path,\n    update: transactionUpdate,\n    onComplete,\n    // One of TransactionStatus enums.\n    status: null,\n    // Used when combining transactions at different locations to figure out\n    // which one goes first.\n    order: LUIDGenerator(),\n    // Whether to raise local events for this transaction.\n    applyLocally,\n    // Count of how many times we've retried the transaction.\n    retryCount: 0,\n    // Function to call to clean up our .on() listener.\n    unwatcher,\n    // Stores why a transaction was aborted.\n    abortReason: null,\n    currentWriteId: null,\n    currentInputSnapshot: null,\n    currentOutputSnapshotRaw: null,\n    currentOutputSnapshotResolved: null\n  };\n\n  // Run transaction initially.\n  const currentState = repoGetLatestState(repo, path, undefined);\n  transaction.currentInputSnapshot = currentState;\n  const newVal = transaction.update(currentState.val());\n  if (newVal === undefined) {\n    // Abort transaction.\n    transaction.unwatcher();\n    transaction.currentOutputSnapshotRaw = null;\n    transaction.currentOutputSnapshotResolved = null;\n    if (transaction.onComplete) {\n      transaction.onComplete(null, false, transaction.currentInputSnapshot);\n    }\n  } else {\n    validateFirebaseData(\n      'transaction failed: Data returned ',\n      newVal,\n      transaction.path\n    );\n\n    // Mark as run and add to our queue.\n    transaction.status = TransactionStatus.RUN;\n    const queueNode = treeSubTree(repo.transactionQueueTree_, path);\n    const nodeQueue = treeGetValue(queueNode) || [];\n    nodeQueue.push(transaction);\n\n    treeSetValue(queueNode, nodeQueue);\n\n    // Update visibleData and raise events\n    // Note: We intentionally raise events after updating all of our\n    // transaction state, since the user could start new transactions from the\n    // event callbacks.\n    let priorityForNode;\n    if (\n      typeof newVal === 'object' &&\n      newVal !== null &&\n      contains(newVal, '.priority')\n    ) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      priorityForNode = safeGet(newVal as any, '.priority');\n      assert(\n        isValidPriority(priorityForNode),\n        'Invalid priority returned by transaction. ' +\n          'Priority must be a valid string, finite number, server value, or null.'\n      );\n    } else {\n      const currentNode =\n        syncTreeCalcCompleteEventCache(repo.serverSyncTree_, path) ||\n        ChildrenNode.EMPTY_NODE;\n      priorityForNode = currentNode.getPriority().val();\n    }\n\n    const serverValues = repoGenerateServerValues(repo);\n    const newNodeUnresolved = nodeFromJSON(newVal, priorityForNode);\n    const newNode = resolveDeferredValueSnapshot(\n      newNodeUnresolved,\n      currentState,\n      serverValues\n    );\n    transaction.currentOutputSnapshotRaw = newNodeUnresolved;\n    transaction.currentOutputSnapshotResolved = newNode;\n    transaction.currentWriteId = repoGetNextWriteId(repo);\n\n    const events = syncTreeApplyUserOverwrite(\n      repo.serverSyncTree_,\n      path,\n      newNode,\n      transaction.currentWriteId,\n      transaction.applyLocally\n    );\n    eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);\n\n    repoSendReadyTransactions(repo, repo.transactionQueueTree_);\n  }\n}\n\n/**\n * @param excludeSets - A specific set to exclude\n */\nfunction repoGetLatestState(\n  repo: Repo,\n  path: Path,\n  excludeSets?: number[]\n): Node {\n  return (\n    syncTreeCalcCompleteEventCache(repo.serverSyncTree_, path, excludeSets) ||\n    ChildrenNode.EMPTY_NODE\n  );\n}\n\n/**\n * Sends any already-run transactions that aren't waiting for outstanding\n * transactions to complete.\n *\n * Externally it's called with no arguments, but it calls itself recursively\n * with a particular transactionQueueTree node to recurse through the tree.\n *\n * @param node - transactionQueueTree node to start at.\n */\nfunction repoSendReadyTransactions(\n  repo: Repo,\n  node: Tree<Transaction[]> = repo.transactionQueueTree_\n): void {\n  // Before recursing, make sure any completed transactions are removed.\n  if (!node) {\n    repoPruneCompletedTransactionsBelowNode(repo, node);\n  }\n\n  if (treeGetValue(node)) {\n    const queue = repoBuildTransactionQueue(repo, node);\n    assert(queue.length > 0, 'Sending zero length transaction queue');\n\n    const allRun = queue.every(\n      (transaction: Transaction) => transaction.status === TransactionStatus.RUN\n    );\n\n    // If they're all run (and not sent), we can send them.  Else, we must wait.\n    if (allRun) {\n      repoSendTransactionQueue(repo, treeGetPath(node), queue);\n    }\n  } else if (treeHasChildren(node)) {\n    treeForEachChild(node, childNode => {\n      repoSendReadyTransactions(repo, childNode);\n    });\n  }\n}\n\n/**\n * Given a list of run transactions, send them to the server and then handle\n * the result (success or failure).\n *\n * @param path - The location of the queue.\n * @param queue - Queue of transactions under the specified location.\n */\nfunction repoSendTransactionQueue(\n  repo: Repo,\n  path: Path,\n  queue: Transaction[]\n): void {\n  // Mark transactions as sent and increment retry count!\n  const setsToIgnore = queue.map(txn => {\n    return txn.currentWriteId;\n  });\n  const latestState = repoGetLatestState(repo, path, setsToIgnore);\n  let snapToSend = latestState;\n  const latestHash = latestState.hash();\n  for (let i = 0; i < queue.length; i++) {\n    const txn = queue[i];\n    assert(\n      txn.status === TransactionStatus.RUN,\n      'tryToSendTransactionQueue_: items in queue should all be run.'\n    );\n    txn.status = TransactionStatus.SENT;\n    txn.retryCount++;\n    const relativePath = newRelativePath(path, txn.path);\n    // If we've gotten to this point, the output snapshot must be defined.\n    snapToSend = snapToSend.updateChild(\n      relativePath /** @type {!Node} */,\n      txn.currentOutputSnapshotRaw\n    );\n  }\n\n  const dataToSend = snapToSend.val(true);\n  const pathToSend = path;\n\n  // Send the put.\n  repo.server_.put(\n    pathToSend.toString(),\n    dataToSend,\n    (status: string) => {\n      repoLog(repo, 'transaction put response', {\n        path: pathToSend.toString(),\n        status\n      });\n\n      let events: Event[] = [];\n      if (status === 'ok') {\n        // Queue up the callbacks and fire them after cleaning up all of our\n        // transaction state, since the callback could trigger more\n        // transactions or sets.\n        const callbacks = [];\n        for (let i = 0; i < queue.length; i++) {\n          queue[i].status = TransactionStatus.COMPLETED;\n          events = events.concat(\n            syncTreeAckUserWrite(repo.serverSyncTree_, queue[i].currentWriteId)\n          );\n          if (queue[i].onComplete) {\n            // We never unset the output snapshot, and given that this\n            // transaction is complete, it should be set\n            callbacks.push(() =>\n              queue[i].onComplete(\n                null,\n                true,\n                queue[i].currentOutputSnapshotResolved\n              )\n            );\n          }\n          queue[i].unwatcher();\n        }\n\n        // Now remove the completed transactions.\n        repoPruneCompletedTransactionsBelowNode(\n          repo,\n          treeSubTree(repo.transactionQueueTree_, path)\n        );\n        // There may be pending transactions that we can now send.\n        repoSendReadyTransactions(repo, repo.transactionQueueTree_);\n\n        eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);\n\n        // Finally, trigger onComplete callbacks.\n        for (let i = 0; i < callbacks.length; i++) {\n          exceptionGuard(callbacks[i]);\n        }\n      } else {\n        // transactions are no longer sent.  Update their status appropriately.\n        if (status === 'datastale') {\n          for (let i = 0; i < queue.length; i++) {\n            if (queue[i].status === TransactionStatus.SENT_NEEDS_ABORT) {\n              queue[i].status = TransactionStatus.NEEDS_ABORT;\n            } else {\n              queue[i].status = TransactionStatus.RUN;\n            }\n          }\n        } else {\n          warn(\n            'transaction at ' + pathToSend.toString() + ' failed: ' + status\n          );\n          for (let i = 0; i < queue.length; i++) {\n            queue[i].status = TransactionStatus.NEEDS_ABORT;\n            queue[i].abortReason = status;\n          }\n        }\n\n        repoRerunTransactions(repo, path);\n      }\n    },\n    latestHash\n  );\n}\n\n/**\n * Finds all transactions dependent on the data at changedPath and reruns them.\n *\n * Should be called any time cached data changes.\n *\n * Return the highest path that was affected by rerunning transactions. This\n * is the path at which events need to be raised for.\n *\n * @param changedPath - The path in mergedData that changed.\n * @returns The rootmost path that was affected by rerunning transactions.\n */\nfunction repoRerunTransactions(repo: Repo, changedPath: Path): Path {\n  const rootMostTransactionNode = repoGetAncestorTransactionNode(\n    repo,\n    changedPath\n  );\n  const path = treeGetPath(rootMostTransactionNode);\n\n  const queue = repoBuildTransactionQueue(repo, rootMostTransactionNode);\n  repoRerunTransactionQueue(repo, queue, path);\n\n  return path;\n}\n\n/**\n * Does all the work of rerunning transactions (as well as cleans up aborted\n * transactions and whatnot).\n *\n * @param queue - The queue of transactions to run.\n * @param path - The path the queue is for.\n */\nfunction repoRerunTransactionQueue(\n  repo: Repo,\n  queue: Transaction[],\n  path: Path\n): void {\n  if (queue.length === 0) {\n    return; // Nothing to do!\n  }\n\n  // Queue up the callbacks and fire them after cleaning up all of our\n  // transaction state, since the callback could trigger more transactions or\n  // sets.\n  const callbacks = [];\n  let events: Event[] = [];\n  // Ignore all of the sets we're going to re-run.\n  const txnsToRerun = queue.filter(q => {\n    return q.status === TransactionStatus.RUN;\n  });\n  const setsToIgnore = txnsToRerun.map(q => {\n    return q.currentWriteId;\n  });\n  for (let i = 0; i < queue.length; i++) {\n    const transaction = queue[i];\n    const relativePath = newRelativePath(path, transaction.path);\n    let abortTransaction = false,\n      abortReason;\n    assert(\n      relativePath !== null,\n      'rerunTransactionsUnderNode_: relativePath should not be null.'\n    );\n\n    if (transaction.status === TransactionStatus.NEEDS_ABORT) {\n      abortTransaction = true;\n      abortReason = transaction.abortReason;\n      events = events.concat(\n        syncTreeAckUserWrite(\n          repo.serverSyncTree_,\n          transaction.currentWriteId,\n          true\n        )\n      );\n    } else if (transaction.status === TransactionStatus.RUN) {\n      if (transaction.retryCount >= MAX_TRANSACTION_RETRIES) {\n        abortTransaction = true;\n        abortReason = 'maxretry';\n        events = events.concat(\n          syncTreeAckUserWrite(\n            repo.serverSyncTree_,\n            transaction.currentWriteId,\n            true\n          )\n        );\n      } else {\n        // This code reruns a transaction\n        const currentNode = repoGetLatestState(\n          repo,\n          transaction.path,\n          setsToIgnore\n        );\n        transaction.currentInputSnapshot = currentNode;\n        const newData = queue[i].update(currentNode.val());\n        if (newData !== undefined) {\n          validateFirebaseData(\n            'transaction failed: Data returned ',\n            newData,\n            transaction.path\n          );\n          let newDataNode = nodeFromJSON(newData);\n          const hasExplicitPriority =\n            typeof newData === 'object' &&\n            newData != null &&\n            contains(newData, '.priority');\n          if (!hasExplicitPriority) {\n            // Keep the old priority if there wasn't a priority explicitly specified.\n            newDataNode = newDataNode.updatePriority(currentNode.getPriority());\n          }\n\n          const oldWriteId = transaction.currentWriteId;\n          const serverValues = repoGenerateServerValues(repo);\n          const newNodeResolved = resolveDeferredValueSnapshot(\n            newDataNode,\n            currentNode,\n            serverValues\n          );\n\n          transaction.currentOutputSnapshotRaw = newDataNode;\n          transaction.currentOutputSnapshotResolved = newNodeResolved;\n          transaction.currentWriteId = repoGetNextWriteId(repo);\n          // Mutates setsToIgnore in place\n          setsToIgnore.splice(setsToIgnore.indexOf(oldWriteId), 1);\n          events = events.concat(\n            syncTreeApplyUserOverwrite(\n              repo.serverSyncTree_,\n              transaction.path,\n              newNodeResolved,\n              transaction.currentWriteId,\n              transaction.applyLocally\n            )\n          );\n          events = events.concat(\n            syncTreeAckUserWrite(repo.serverSyncTree_, oldWriteId, true)\n          );\n        } else {\n          abortTransaction = true;\n          abortReason = 'nodata';\n          events = events.concat(\n            syncTreeAckUserWrite(\n              repo.serverSyncTree_,\n              transaction.currentWriteId,\n              true\n            )\n          );\n        }\n      }\n    }\n    eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);\n    events = [];\n    if (abortTransaction) {\n      // Abort.\n      queue[i].status = TransactionStatus.COMPLETED;\n\n      // Removing a listener can trigger pruning which can muck with\n      // mergedData/visibleData (as it prunes data). So defer the unwatcher\n      // until we're done.\n      (function (unwatcher) {\n        setTimeout(unwatcher, Math.floor(0));\n      })(queue[i].unwatcher);\n\n      if (queue[i].onComplete) {\n        if (abortReason === 'nodata') {\n          callbacks.push(() =>\n            queue[i].onComplete(null, false, queue[i].currentInputSnapshot)\n          );\n        } else {\n          callbacks.push(() =>\n            queue[i].onComplete(new Error(abortReason), false, null)\n          );\n        }\n      }\n    }\n  }\n\n  // Clean up completed transactions.\n  repoPruneCompletedTransactionsBelowNode(repo, repo.transactionQueueTree_);\n\n  // Now fire callbacks, now that we're in a good, known state.\n  for (let i = 0; i < callbacks.length; i++) {\n    exceptionGuard(callbacks[i]);\n  }\n\n  // Try to send the transaction result to the server.\n  repoSendReadyTransactions(repo, repo.transactionQueueTree_);\n}\n\n/**\n * Returns the rootmost ancestor node of the specified path that has a pending\n * transaction on it, or just returns the node for the given path if there are\n * no pending transactions on any ancestor.\n *\n * @param path - The location to start at.\n * @returns The rootmost node with a transaction.\n */\nfunction repoGetAncestorTransactionNode(\n  repo: Repo,\n  path: Path\n): Tree<Transaction[]> {\n  let front;\n\n  // Start at the root and walk deeper into the tree towards path until we\n  // find a node with pending transactions.\n  let transactionNode = repo.transactionQueueTree_;\n  front = pathGetFront(path);\n  while (front !== null && treeGetValue(transactionNode) === undefined) {\n    transactionNode = treeSubTree(transactionNode, front);\n    path = pathPopFront(path);\n    front = pathGetFront(path);\n  }\n\n  return transactionNode;\n}\n\n/**\n * Builds the queue of all transactions at or below the specified\n * transactionNode.\n *\n * @param transactionNode\n * @returns The generated queue.\n */\nfunction repoBuildTransactionQueue(\n  repo: Repo,\n  transactionNode: Tree<Transaction[]>\n): Transaction[] {\n  // Walk any child transaction queues and aggregate them into a single queue.\n  const transactionQueue: Transaction[] = [];\n  repoAggregateTransactionQueuesForNode(\n    repo,\n    transactionNode,\n    transactionQueue\n  );\n\n  // Sort them by the order the transactions were created.\n  transactionQueue.sort((a, b) => a.order - b.order);\n\n  return transactionQueue;\n}\n\nfunction repoAggregateTransactionQueuesForNode(\n  repo: Repo,\n  node: Tree<Transaction[]>,\n  queue: Transaction[]\n): void {\n  const nodeQueue = treeGetValue(node);\n  if (nodeQueue) {\n    for (let i = 0; i < nodeQueue.length; i++) {\n      queue.push(nodeQueue[i]);\n    }\n  }\n\n  treeForEachChild(node, child => {\n    repoAggregateTransactionQueuesForNode(repo, child, queue);\n  });\n}\n\n/**\n * Remove COMPLETED transactions at or below this node in the transactionQueueTree_.\n */\nfunction repoPruneCompletedTransactionsBelowNode(\n  repo: Repo,\n  node: Tree<Transaction[]>\n): void {\n  const queue = treeGetValue(node);\n  if (queue) {\n    let to = 0;\n    for (let from = 0; from < queue.length; from++) {\n      if (queue[from].status !== TransactionStatus.COMPLETED) {\n        queue[to] = queue[from];\n        to++;\n      }\n    }\n    queue.length = to;\n    treeSetValue(node, queue.length > 0 ? queue : undefined);\n  }\n\n  treeForEachChild(node, childNode => {\n    repoPruneCompletedTransactionsBelowNode(repo, childNode);\n  });\n}\n\n/**\n * Aborts all transactions on ancestors or descendants of the specified path.\n * Called when doing a set() or update() since we consider them incompatible\n * with transactions.\n *\n * @param path - Path for which we want to abort related transactions.\n */\nfunction repoAbortTransactions(repo: Repo, path: Path): Path {\n  const affectedPath = treeGetPath(repoGetAncestorTransactionNode(repo, path));\n\n  const transactionNode = treeSubTree(repo.transactionQueueTree_, path);\n\n  treeForEachAncestor(transactionNode, (node: Tree<Transaction[]>) => {\n    repoAbortTransactionsOnNode(repo, node);\n  });\n\n  repoAbortTransactionsOnNode(repo, transactionNode);\n\n  treeForEachDescendant(transactionNode, (node: Tree<Transaction[]>) => {\n    repoAbortTransactionsOnNode(repo, node);\n  });\n\n  return affectedPath;\n}\n\n/**\n * Abort transactions stored in this transaction queue node.\n *\n * @param node - Node to abort transactions for.\n */\nfunction repoAbortTransactionsOnNode(\n  repo: Repo,\n  node: Tree<Transaction[]>\n): void {\n  const queue = treeGetValue(node);\n  if (queue) {\n    // Queue up the callbacks and fire them after cleaning up all of our\n    // transaction state, since the callback could trigger more transactions\n    // or sets.\n    const callbacks = [];\n\n    // Go through queue.  Any already-sent transactions must be marked for\n    // abort, while the unsent ones can be immediately aborted and removed.\n    let events: Event[] = [];\n    let lastSent = -1;\n    for (let i = 0; i < queue.length; i++) {\n      if (queue[i].status === TransactionStatus.SENT_NEEDS_ABORT) {\n        // Already marked.  No action needed.\n      } else if (queue[i].status === TransactionStatus.SENT) {\n        assert(\n          lastSent === i - 1,\n          'All SENT items should be at beginning of queue.'\n        );\n        lastSent = i;\n        // Mark transaction for abort when it comes back.\n        queue[i].status = TransactionStatus.SENT_NEEDS_ABORT;\n        queue[i].abortReason = 'set';\n      } else {\n        assert(\n          queue[i].status === TransactionStatus.RUN,\n          'Unexpected transaction status in abort'\n        );\n        // We can abort it immediately.\n        queue[i].unwatcher();\n        events = events.concat(\n          syncTreeAckUserWrite(\n            repo.serverSyncTree_,\n            queue[i].currentWriteId,\n            true\n          )\n        );\n        if (queue[i].onComplete) {\n          callbacks.push(\n            queue[i].onComplete.bind(null, new Error('set'), false, null)\n          );\n        }\n      }\n    }\n    if (lastSent === -1) {\n      // We're not waiting for any sent transactions.  We can clear the queue.\n      treeSetValue(node, undefined);\n    } else {\n      // Remove the transactions we aborted.\n      queue.length = lastSent + 1;\n    }\n\n    // Now fire the callbacks.\n    eventQueueRaiseEventsForChangedPath(\n      repo.eventQueue_,\n      treeGetPath(node),\n      events\n    );\n    for (let i = 0; i < callbacks.length; i++) {\n      exceptionGuard(callbacks[i]);\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { RepoInfo } from '../../RepoInfo';\nimport { Path } from '../Path';\nimport { warnIfPageIsSecure, warn, fatal } from '../util';\n\nfunction decodePath(pathString: string): string {\n  let pathStringDecoded = '';\n  const pieces = pathString.split('/');\n  for (let i = 0; i < pieces.length; i++) {\n    if (pieces[i].length > 0) {\n      let piece = pieces[i];\n      try {\n        piece = decodeURIComponent(piece.replace(/\\+/g, ' '));\n      } catch (e) {}\n      pathStringDecoded += '/' + piece;\n    }\n  }\n  return pathStringDecoded;\n}\n\n/**\n * @returns key value hash\n */\nfunction decodeQuery(queryString: string): { [key: string]: string } {\n  const results = {};\n  if (queryString.charAt(0) === '?') {\n    queryString = queryString.substring(1);\n  }\n  for (const segment of queryString.split('&')) {\n    if (segment.length === 0) {\n      continue;\n    }\n    const kv = segment.split('=');\n    if (kv.length === 2) {\n      results[decodeURIComponent(kv[0])] = decodeURIComponent(kv[1]);\n    } else {\n      warn(`Invalid query segment '${segment}' in query '${queryString}'`);\n    }\n  }\n  return results;\n}\n\nexport const parseRepoInfo = function (\n  dataURL: string,\n  nodeAdmin: boolean\n): { repoInfo: RepoInfo; path: Path } {\n  const parsedUrl = parseDatabaseURL(dataURL),\n    namespace = parsedUrl.namespace;\n\n  if (parsedUrl.domain === 'firebase.com') {\n    fatal(\n      parsedUrl.host +\n        ' is no longer supported. ' +\n        'Please use <YOUR FIREBASE>.firebaseio.com instead'\n    );\n  }\n\n  // Catch common error of uninitialized namespace value.\n  if (\n    (!namespace || namespace === 'undefined') &&\n    parsedUrl.domain !== 'localhost'\n  ) {\n    fatal(\n      'Cannot parse Firebase url. Please use https://<YOUR FIREBASE>.firebaseio.com'\n    );\n  }\n\n  if (!parsedUrl.secure) {\n    warnIfPageIsSecure();\n  }\n\n  const webSocketOnly = parsedUrl.scheme === 'ws' || parsedUrl.scheme === 'wss';\n\n  return {\n    repoInfo: new RepoInfo(\n      parsedUrl.host,\n      parsedUrl.secure,\n      namespace,\n      webSocketOnly,\n      nodeAdmin,\n      /*persistenceKey=*/ '',\n      /*includeNamespaceInQueryParams=*/ namespace !== parsedUrl.subdomain\n    ),\n    path: new Path(parsedUrl.pathString)\n  };\n};\n\nexport const parseDatabaseURL = function (dataURL: string): {\n  host: string;\n  port: number;\n  domain: string;\n  subdomain: string;\n  secure: boolean;\n  scheme: string;\n  pathString: string;\n  namespace: string;\n} {\n  // Default to empty strings in the event of a malformed string.\n  let host = '',\n    domain = '',\n    subdomain = '',\n    pathString = '',\n    namespace = '';\n\n  // Always default to SSL, unless otherwise specified.\n  let secure = true,\n    scheme = 'https',\n    port = 443;\n\n  // Don't do any validation here. The caller is responsible for validating the result of parsing.\n  if (typeof dataURL === 'string') {\n    // Parse scheme.\n    let colonInd = dataURL.indexOf('//');\n    if (colonInd >= 0) {\n      scheme = dataURL.substring(0, colonInd - 1);\n      dataURL = dataURL.substring(colonInd + 2);\n    }\n\n    // Parse host, path, and query string.\n    let slashInd = dataURL.indexOf('/');\n    if (slashInd === -1) {\n      slashInd = dataURL.length;\n    }\n    let questionMarkInd = dataURL.indexOf('?');\n    if (questionMarkInd === -1) {\n      questionMarkInd = dataURL.length;\n    }\n    host = dataURL.substring(0, Math.min(slashInd, questionMarkInd));\n    if (slashInd < questionMarkInd) {\n      // For pathString, questionMarkInd will always come after slashInd\n      pathString = decodePath(dataURL.substring(slashInd, questionMarkInd));\n    }\n    const queryParams = decodeQuery(\n      dataURL.substring(Math.min(dataURL.length, questionMarkInd))\n    );\n\n    // If we have a port, use scheme for determining if it's secure.\n    colonInd = host.indexOf(':');\n    if (colonInd >= 0) {\n      secure = scheme === 'https' || scheme === 'wss';\n      port = parseInt(host.substring(colonInd + 1), 10);\n    } else {\n      colonInd = host.length;\n    }\n\n    const hostWithoutPort = host.slice(0, colonInd);\n    if (hostWithoutPort.toLowerCase() === 'localhost') {\n      domain = 'localhost';\n    } else if (hostWithoutPort.split('.').length <= 2) {\n      domain = hostWithoutPort;\n    } else {\n      // Interpret the subdomain of a 3 or more component URL as the namespace name.\n      const dotInd = host.indexOf('.');\n      subdomain = host.substring(0, dotInd).toLowerCase();\n      domain = host.substring(dotInd + 1);\n      // Normalize namespaces to lowercase to share storage / connection.\n      namespace = subdomain;\n    }\n    // Always treat the value of the `ns` as the namespace name if it is present.\n    if ('ns' in queryParams) {\n      namespace = queryParams['ns'];\n    }\n  }\n\n  return {\n    host,\n    port,\n    domain,\n    subdomain,\n    secure,\n    scheme,\n    pathString,\n    namespace\n  };\n};\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, getModularInstance, Deferred } from '@firebase/util';\n\nimport {\n  Repo,\n  repoAddEventCallbackForQuery,\n  repoGetValue,\n  repoRemoveEventCallbackForQuery,\n  repoServerTime,\n  repoSetWithPriority,\n  repoUpdate\n} from '../core/Repo';\nimport { ChildrenNode } from '../core/snap/ChildrenNode';\nimport { Index } from '../core/snap/indexes/Index';\nimport { KEY_INDEX } from '../core/snap/indexes/KeyIndex';\nimport { PathIndex } from '../core/snap/indexes/PathIndex';\nimport { PRIORITY_INDEX } from '../core/snap/indexes/PriorityIndex';\nimport { VALUE_INDEX } from '../core/snap/indexes/ValueIndex';\nimport { Node } from '../core/snap/Node';\nimport { syncPointSetReferenceConstructor } from '../core/SyncPoint';\nimport { syncTreeSetReferenceConstructor } from '../core/SyncTree';\nimport { parseRepoInfo } from '../core/util/libs/parser';\nimport { nextPushId } from '../core/util/NextPushId';\nimport {\n  Path,\n  pathEquals,\n  pathGetBack,\n  pathGetFront,\n  pathChild,\n  pathParent,\n  pathToUrlEncodedString,\n  pathIsEmpty\n} from '../core/util/Path';\nimport {\n  fatal,\n  MAX_NAME,\n  MIN_NAME,\n  ObjectToUniqueKey\n} from '../core/util/util';\nimport {\n  isValidPriority,\n  validateFirebaseDataArg,\n  validateFirebaseMergeDataArg,\n  validateKey,\n  validatePathString,\n  validatePriority,\n  validateRootPathString,\n  validateUrl,\n  validateWritablePath\n} from '../core/util/validation';\nimport { Change } from '../core/view/Change';\nimport { CancelEvent, DataEvent, EventType } from '../core/view/Event';\nimport {\n  CallbackContext,\n  EventRegistration,\n  QueryContext,\n  UserCallback\n} from '../core/view/EventRegistration';\nimport {\n  QueryParams,\n  queryParamsEndAt,\n  queryParamsEndBefore,\n  queryParamsGetQueryObject,\n  queryParamsLimitToFirst,\n  queryParamsLimitToLast,\n  queryParamsOrderBy,\n  queryParamsStartAfter,\n  queryParamsStartAt\n} from '../core/view/QueryParams';\n\nimport { Database } from './Database';\nimport { OnDisconnect } from './OnDisconnect';\nimport {\n  ListenOptions,\n  Query as Query,\n  DatabaseReference,\n  Unsubscribe,\n  ThenableReference\n} from './Reference';\n\n/**\n * @internal\n */\nexport class QueryImpl implements Query, QueryContext {\n  /**\n   * @hideconstructor\n   */\n  constructor(\n    readonly _repo: Repo,\n    readonly _path: Path,\n    readonly _queryParams: QueryParams,\n    readonly _orderByCalled: boolean\n  ) {}\n\n  get key(): string | null {\n    if (pathIsEmpty(this._path)) {\n      return null;\n    } else {\n      return pathGetBack(this._path);\n    }\n  }\n\n  get ref(): DatabaseReference {\n    return new ReferenceImpl(this._repo, this._path);\n  }\n\n  get _queryIdentifier(): string {\n    const obj = queryParamsGetQueryObject(this._queryParams);\n    const id = ObjectToUniqueKey(obj);\n    return id === '{}' ? 'default' : id;\n  }\n\n  /**\n   * An object representation of the query parameters used by this Query.\n   */\n  get _queryObject(): object {\n    return queryParamsGetQueryObject(this._queryParams);\n  }\n\n  isEqual(other: QueryImpl | null): boolean {\n    other = getModularInstance(other);\n    if (!(other instanceof QueryImpl)) {\n      return false;\n    }\n\n    const sameRepo = this._repo === other._repo;\n    const samePath = pathEquals(this._path, other._path);\n    const sameQueryIdentifier =\n      this._queryIdentifier === other._queryIdentifier;\n\n    return sameRepo && samePath && sameQueryIdentifier;\n  }\n\n  toJSON(): string {\n    return this.toString();\n  }\n\n  toString(): string {\n    return this._repo.toString() + pathToUrlEncodedString(this._path);\n  }\n}\n\n/**\n * Validates that no other order by call has been made\n */\nfunction validateNoPreviousOrderByCall(query: QueryImpl, fnName: string) {\n  if (query._orderByCalled === true) {\n    throw new Error(fnName + \": You can't combine multiple orderBy calls.\");\n  }\n}\n\n/**\n * Validates start/end values for queries.\n */\nfunction validateQueryEndpoints(params: QueryParams) {\n  let startNode = null;\n  let endNode = null;\n  if (params.hasStart()) {\n    startNode = params.getIndexStartValue();\n  }\n  if (params.hasEnd()) {\n    endNode = params.getIndexEndValue();\n  }\n\n  if (params.getIndex() === KEY_INDEX) {\n    const tooManyArgsError =\n      'Query: When ordering by key, you may only pass one argument to ' +\n      'startAt(), endAt(), or equalTo().';\n    const wrongArgTypeError =\n      'Query: When ordering by key, the argument passed to startAt(), startAfter(), ' +\n      'endAt(), endBefore(), or equalTo() must be a string.';\n    if (params.hasStart()) {\n      const startName = params.getIndexStartName();\n      if (startName !== MIN_NAME) {\n        throw new Error(tooManyArgsError);\n      } else if (typeof startNode !== 'string') {\n        throw new Error(wrongArgTypeError);\n      }\n    }\n    if (params.hasEnd()) {\n      const endName = params.getIndexEndName();\n      if (endName !== MAX_NAME) {\n        throw new Error(tooManyArgsError);\n      } else if (typeof endNode !== 'string') {\n        throw new Error(wrongArgTypeError);\n      }\n    }\n  } else if (params.getIndex() === PRIORITY_INDEX) {\n    if (\n      (startNode != null && !isValidPriority(startNode)) ||\n      (endNode != null && !isValidPriority(endNode))\n    ) {\n      throw new Error(\n        'Query: When ordering by priority, the first argument passed to startAt(), ' +\n          'startAfter() endAt(), endBefore(), or equalTo() must be a valid priority value ' +\n          '(null, a number, or a string).'\n      );\n    }\n  } else {\n    assert(\n      params.getIndex() instanceof PathIndex ||\n        params.getIndex() === VALUE_INDEX,\n      'unknown index type.'\n    );\n    if (\n      (startNode != null && typeof startNode === 'object') ||\n      (endNode != null && typeof endNode === 'object')\n    ) {\n      throw new Error(\n        'Query: First argument passed to startAt(), startAfter(), endAt(), endBefore(), or ' +\n          'equalTo() cannot be an object.'\n      );\n    }\n  }\n}\n\n/**\n * Validates that limit* has been called with the correct combination of parameters\n */\nfunction validateLimit(params: QueryParams) {\n  if (\n    params.hasStart() &&\n    params.hasEnd() &&\n    params.hasLimit() &&\n    !params.hasAnchoredLimit()\n  ) {\n    throw new Error(\n      \"Query: Can't combine startAt(), startAfter(), endAt(), endBefore(), and limit(). Use \" +\n        'limitToFirst() or limitToLast() instead.'\n    );\n  }\n}\n/**\n * @internal\n */\nexport class ReferenceImpl extends QueryImpl implements DatabaseReference {\n  /** @hideconstructor */\n  constructor(repo: Repo, path: Path) {\n    super(repo, path, new QueryParams(), false);\n  }\n\n  get parent(): ReferenceImpl | null {\n    const parentPath = pathParent(this._path);\n    return parentPath === null\n      ? null\n      : new ReferenceImpl(this._repo, parentPath);\n  }\n\n  get root(): ReferenceImpl {\n    let ref: ReferenceImpl = this;\n    while (ref.parent !== null) {\n      ref = ref.parent;\n    }\n    return ref;\n  }\n}\n\n/**\n * A `DataSnapshot` contains data from a Database location.\n *\n * Any time you read data from the Database, you receive the data as a\n * `DataSnapshot`. A `DataSnapshot` is passed to the event callbacks you attach\n * with `on()` or `once()`. You can extract the contents of the snapshot as a\n * JavaScript object by calling the `val()` method. Alternatively, you can\n * traverse into the snapshot by calling `child()` to return child snapshots\n * (which you could then call `val()` on).\n *\n * A `DataSnapshot` is an efficiently generated, immutable copy of the data at\n * a Database location. It cannot be modified and will never change (to modify\n * data, you always call the `set()` method on a `Reference` directly).\n */\nexport class DataSnapshot {\n  /**\n   * @param _node - A SnapshotNode to wrap.\n   * @param ref - The location this snapshot came from.\n   * @param _index - The iteration order for this snapshot\n   * @hideconstructor\n   */\n  constructor(\n    readonly _node: Node,\n    /**\n     * The location of this DataSnapshot.\n     */\n    readonly ref: DatabaseReference,\n    readonly _index: Index\n  ) {}\n\n  /**\n   * Gets the priority value of the data in this `DataSnapshot`.\n   *\n   * Applications need not use priority but can order collections by\n   * ordinary properties (see\n   * {@link https://firebase.google.com/docs/database/web/lists-of-data#sorting_and_filtering_data |Sorting and filtering data}\n   * ).\n   */\n  get priority(): string | number | null {\n    // typecast here because we never return deferred values or internal priorities (MAX_PRIORITY)\n    return this._node.getPriority().val() as string | number | null;\n  }\n\n  /**\n   * The key (last part of the path) of the location of this `DataSnapshot`.\n   *\n   * The last token in a Database location is considered its key. For example,\n   * \"ada\" is the key for the /users/ada/ node. Accessing the key on any\n   * `DataSnapshot` will return the key for the location that generated it.\n   * However, accessing the key on the root URL of a Database will return\n   * `null`.\n   */\n  get key(): string | null {\n    return this.ref.key;\n  }\n\n  /** Returns the number of child properties of this `DataSnapshot`. */\n  get size(): number {\n    return this._node.numChildren();\n  }\n\n  /**\n   * Gets another `DataSnapshot` for the location at the specified relative path.\n   *\n   * Passing a relative path to the `child()` method of a DataSnapshot returns\n   * another `DataSnapshot` for the location at the specified relative path. The\n   * relative path can either be a simple child name (for example, \"ada\") or a\n   * deeper, slash-separated path (for example, \"ada/name/first\"). If the child\n   * location has no data, an empty `DataSnapshot` (that is, a `DataSnapshot`\n   * whose value is `null`) is returned.\n   *\n   * @param path - A relative path to the location of child data.\n   */\n  child(path: string): DataSnapshot {\n    const childPath = new Path(path);\n    const childRef = child(this.ref, path);\n    return new DataSnapshot(\n      this._node.getChild(childPath),\n      childRef,\n      PRIORITY_INDEX\n    );\n  }\n  /**\n   * Returns true if this `DataSnapshot` contains any data. It is slightly more\n   * efficient than using `snapshot.val() !== null`.\n   */\n  exists(): boolean {\n    return !this._node.isEmpty();\n  }\n\n  /**\n   * Exports the entire contents of the DataSnapshot as a JavaScript object.\n   *\n   * The `exportVal()` method is similar to `val()`, except priority information\n   * is included (if available), making it suitable for backing up your data.\n   *\n   * @returns The DataSnapshot's contents as a JavaScript value (Object,\n   *   Array, string, number, boolean, or `null`).\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  exportVal(): any {\n    return this._node.val(true);\n  }\n\n  /**\n   * Enumerates the top-level children in the `DataSnapshot`.\n   *\n   * Because of the way JavaScript objects work, the ordering of data in the\n   * JavaScript object returned by `val()` is not guaranteed to match the\n   * ordering on the server nor the ordering of `onChildAdded()` events. That is\n   * where `forEach()` comes in handy. It guarantees the children of a\n   * `DataSnapshot` will be iterated in their query order.\n   *\n   * If no explicit `orderBy*()` method is used, results are returned\n   * ordered by key (unless priorities are used, in which case, results are\n   * returned by priority).\n   *\n   * @param action - A function that will be called for each child DataSnapshot.\n   * The callback can return true to cancel further enumeration.\n   * @returns true if enumeration was canceled due to your callback returning\n   * true.\n   */\n  forEach(action: (child: DataSnapshot) => boolean | void): boolean {\n    if (this._node.isLeafNode()) {\n      return false;\n    }\n\n    const childrenNode = this._node as ChildrenNode;\n    // Sanitize the return value to a boolean. ChildrenNode.forEachChild has a weird return type...\n    return !!childrenNode.forEachChild(this._index, (key, node) => {\n      return action(\n        new DataSnapshot(node, child(this.ref, key), PRIORITY_INDEX)\n      );\n    });\n  }\n\n  /**\n   * Returns true if the specified child path has (non-null) data.\n   *\n   * @param path - A relative path to the location of a potential child.\n   * @returns `true` if data exists at the specified child path; else\n   *  `false`.\n   */\n  hasChild(path: string): boolean {\n    const childPath = new Path(path);\n    return !this._node.getChild(childPath).isEmpty();\n  }\n\n  /**\n   * Returns whether or not the `DataSnapshot` has any non-`null` child\n   * properties.\n   *\n   * You can use `hasChildren()` to determine if a `DataSnapshot` has any\n   * children. If it does, you can enumerate them using `forEach()`. If it\n   * doesn't, then either this snapshot contains a primitive value (which can be\n   * retrieved with `val()`) or it is empty (in which case, `val()` will return\n   * `null`).\n   *\n   * @returns true if this snapshot has any children; else false.\n   */\n  hasChildren(): boolean {\n    if (this._node.isLeafNode()) {\n      return false;\n    } else {\n      return !this._node.isEmpty();\n    }\n  }\n\n  /**\n   * Returns a JSON-serializable representation of this object.\n   */\n  toJSON(): object | null {\n    return this.exportVal();\n  }\n\n  /**\n   * Extracts a JavaScript value from a `DataSnapshot`.\n   *\n   * Depending on the data in a `DataSnapshot`, the `val()` method may return a\n   * scalar type (string, number, or boolean), an array, or an object. It may\n   * also return null, indicating that the `DataSnapshot` is empty (contains no\n   * data).\n   *\n   * @returns The DataSnapshot's contents as a JavaScript value (Object,\n   *   Array, string, number, boolean, or `null`).\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  val(): any {\n    return this._node.val();\n  }\n}\n\n/**\n *\n * Returns a `Reference` representing the location in the Database\n * corresponding to the provided path. If no path is provided, the `Reference`\n * will point to the root of the Database.\n *\n * @param db - The database instance to obtain a reference for.\n * @param path - Optional path representing the location the returned\n *   `Reference` will point. If not provided, the returned `Reference` will\n *   point to the root of the Database.\n * @returns If a path is provided, a `Reference`\n *   pointing to the provided path. Otherwise, a `Reference` pointing to the\n *   root of the Database.\n */\nexport function ref(db: Database, path?: string): DatabaseReference {\n  db = getModularInstance(db);\n  db._checkNotDeleted('ref');\n  return path !== undefined ? child(db._root, path) : db._root;\n}\n\n/**\n * Returns a `Reference` representing the location in the Database\n * corresponding to the provided Firebase URL.\n *\n * An exception is thrown if the URL is not a valid Firebase Database URL or it\n * has a different domain than the current `Database` instance.\n *\n * Note that all query parameters (`orderBy`, `limitToLast`, etc.) are ignored\n * and are not applied to the returned `Reference`.\n *\n * @param db - The database instance to obtain a reference for.\n * @param url - The Firebase URL at which the returned `Reference` will\n *   point.\n * @returns A `Reference` pointing to the provided\n *   Firebase URL.\n */\nexport function refFromURL(db: Database, url: string): DatabaseReference {\n  db = getModularInstance(db);\n  db._checkNotDeleted('refFromURL');\n  const parsedURL = parseRepoInfo(url, db._repo.repoInfo_.nodeAdmin);\n  validateUrl('refFromURL', parsedURL);\n\n  const repoInfo = parsedURL.repoInfo;\n  if (\n    !db._repo.repoInfo_.isCustomHost() &&\n    repoInfo.host !== db._repo.repoInfo_.host\n  ) {\n    fatal(\n      'refFromURL' +\n        ': Host name does not match the current database: ' +\n        '(found ' +\n        repoInfo.host +\n        ' but expected ' +\n        db._repo.repoInfo_.host +\n        ')'\n    );\n  }\n\n  return ref(db, parsedURL.path.toString());\n}\n/**\n * Gets a `Reference` for the location at the specified relative path.\n *\n * The relative path can either be a simple child name (for example, \"ada\") or\n * a deeper slash-separated path (for example, \"ada/name/first\").\n *\n * @param parent - The parent location.\n * @param path - A relative path from this location to the desired child\n *   location.\n * @returns The specified child location.\n */\nexport function child(\n  parent: DatabaseReference,\n  path: string\n): DatabaseReference {\n  parent = getModularInstance(parent);\n  if (pathGetFront(parent._path) === null) {\n    validateRootPathString('child', 'path', path, false);\n  } else {\n    validatePathString('child', 'path', path, false);\n  }\n  return new ReferenceImpl(parent._repo, pathChild(parent._path, path));\n}\n\n/**\n * Returns an `OnDisconnect` object - see\n * {@link https://firebase.google.com/docs/database/web/offline-capabilities | Enabling Offline Capabilities in JavaScript}\n * for more information on how to use it.\n *\n * @param ref - The reference to add OnDisconnect triggers for.\n */\nexport function onDisconnect(ref: DatabaseReference): OnDisconnect {\n  ref = getModularInstance(ref) as ReferenceImpl;\n  return new OnDisconnect(ref._repo, ref._path);\n}\n\nexport interface ThenableReferenceImpl\n  extends ReferenceImpl,\n    Pick<Promise<ReferenceImpl>, 'then' | 'catch'> {}\n\n/**\n * Generates a new child location using a unique key and returns its\n * `Reference`.\n *\n * This is the most common pattern for adding data to a collection of items.\n *\n * If you provide a value to `push()`, the value is written to the\n * generated location. If you don't pass a value, nothing is written to the\n * database and the child remains empty (but you can use the `Reference`\n * elsewhere).\n *\n * The unique keys generated by `push()` are ordered by the current time, so the\n * resulting list of items is chronologically sorted. The keys are also\n * designed to be unguessable (they contain 72 random bits of entropy).\n *\n * See {@link https://firebase.google.com/docs/database/web/lists-of-data#append_to_a_list_of_data | Append to a list of data}\n * </br>See {@link ttps://firebase.googleblog.com/2015/02/the-2120-ways-to-ensure-unique_68.html | The 2^120 Ways to Ensure Unique Identifiers}\n *\n * @param parent - The parent location.\n * @param value - Optional value to be written at the generated location.\n * @returns Combined `Promise` and `Reference`; resolves when write is complete,\n * but can be used immediately as the `Reference` to the child location.\n */\nexport function push(\n  parent: DatabaseReference,\n  value?: unknown\n): ThenableReference {\n  parent = getModularInstance(parent);\n  validateWritablePath('push', parent._path);\n  validateFirebaseDataArg('push', value, parent._path, true);\n  const now = repoServerTime(parent._repo);\n  const name = nextPushId(now);\n\n  // push() returns a ThennableReference whose promise is fulfilled with a\n  // regular Reference. We use child() to create handles to two different\n  // references. The first is turned into a ThennableReference below by adding\n  // then() and catch() methods and is used as the return value of push(). The\n  // second remains a regular Reference and is used as the fulfilled value of\n  // the first ThennableReference.\n  const thennablePushRef: Partial<ThenableReferenceImpl> = child(\n    parent,\n    name\n  ) as ReferenceImpl;\n  const pushRef = child(parent, name) as ReferenceImpl;\n\n  let promise: Promise<ReferenceImpl>;\n  if (value != null) {\n    promise = set(pushRef, value).then(() => pushRef);\n  } else {\n    promise = Promise.resolve(pushRef);\n  }\n\n  thennablePushRef.then = promise.then.bind(promise);\n  thennablePushRef.catch = promise.then.bind(promise, undefined);\n  return thennablePushRef as ThenableReferenceImpl;\n}\n\n/**\n * Removes the data at this Database location.\n *\n * Any data at child locations will also be deleted.\n *\n * The effect of the remove will be visible immediately and the corresponding\n * event 'value' will be triggered. Synchronization of the remove to the\n * Firebase servers will also be started, and the returned Promise will resolve\n * when complete. If provided, the onComplete callback will be called\n * asynchronously after synchronization has finished.\n *\n * @param ref - The location to remove.\n * @returns Resolves when remove on server is complete.\n */\nexport function remove(ref: DatabaseReference): Promise<void> {\n  validateWritablePath('remove', ref._path);\n  return set(ref, null);\n}\n\n/**\n * Writes data to this Database location.\n *\n * This will overwrite any data at this location and all child locations.\n *\n * The effect of the write will be visible immediately, and the corresponding\n * events (\"value\", \"child_added\", etc.) will be triggered. Synchronization of\n * the data to the Firebase servers will also be started, and the returned\n * Promise will resolve when complete. If provided, the `onComplete` callback\n * will be called asynchronously after synchronization has finished.\n *\n * Passing `null` for the new value is equivalent to calling `remove()`; namely,\n * all data at this location and all child locations will be deleted.\n *\n * `set()` will remove any priority stored at this location, so if priority is\n * meant to be preserved, you need to use `setWithPriority()` instead.\n *\n * Note that modifying data with `set()` will cancel any pending transactions\n * at that location, so extreme care should be taken if mixing `set()` and\n * `transaction()` to modify the same data.\n *\n * A single `set()` will generate a single \"value\" event at the location where\n * the `set()` was performed.\n *\n * @param ref - The location to write to.\n * @param value - The value to be written (string, number, boolean, object,\n *   array, or null).\n * @returns Resolves when write to server is complete.\n */\nexport function set(ref: DatabaseReference, value: unknown): Promise<void> {\n  ref = getModularInstance(ref);\n  validateWritablePath('set', ref._path);\n  validateFirebaseDataArg('set', value, ref._path, false);\n  const deferred = new Deferred<void>();\n  repoSetWithPriority(\n    ref._repo,\n    ref._path,\n    value,\n    /*priority=*/ null,\n    deferred.wrapCallback(() => {})\n  );\n  return deferred.promise;\n}\n\n/**\n * Sets a priority for the data at this Database location.\n *\n * Applications need not use priority but can order collections by\n * ordinary properties (see\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sorting_and_filtering_data | Sorting and filtering data}\n * ).\n *\n * @param ref - The location to write to.\n * @param priority - The priority to be written (string, number, or null).\n * @returns Resolves when write to server is complete.\n */\nexport function setPriority(\n  ref: DatabaseReference,\n  priority: string | number | null\n): Promise<void> {\n  ref = getModularInstance(ref);\n  validateWritablePath('setPriority', ref._path);\n  validatePriority('setPriority', priority, false);\n  const deferred = new Deferred<void>();\n  repoSetWithPriority(\n    ref._repo,\n    pathChild(ref._path, '.priority'),\n    priority,\n    null,\n    deferred.wrapCallback(() => {})\n  );\n  return deferred.promise;\n}\n\n/**\n * Writes data the Database location. Like `set()` but also specifies the\n * priority for that data.\n *\n * Applications need not use priority but can order collections by\n * ordinary properties (see\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sorting_and_filtering_data | Sorting and filtering data}\n * ).\n *\n * @param ref - The location to write to.\n * @param value - The value to be written (string, number, boolean, object,\n *   array, or null).\n * @param priority - The priority to be written (string, number, or null).\n * @returns Resolves when write to server is complete.\n */\nexport function setWithPriority(\n  ref: DatabaseReference,\n  value: unknown,\n  priority: string | number | null\n): Promise<void> {\n  validateWritablePath('setWithPriority', ref._path);\n  validateFirebaseDataArg('setWithPriority', value, ref._path, false);\n  validatePriority('setWithPriority', priority, false);\n  if (ref.key === '.length' || ref.key === '.keys') {\n    throw 'setWithPriority failed: ' + ref.key + ' is a read-only object.';\n  }\n\n  const deferred = new Deferred<void>();\n  repoSetWithPriority(\n    ref._repo,\n    ref._path,\n    value,\n    priority,\n    deferred.wrapCallback(() => {})\n  );\n  return deferred.promise;\n}\n\n/**\n * Writes multiple values to the Database at once.\n *\n * The `values` argument contains multiple property-value pairs that will be\n * written to the Database together. Each child property can either be a simple\n * property (for example, \"name\") or a relative path (for example,\n * \"name/first\") from the current location to the data to update.\n *\n * As opposed to the `set()` method, `update()` can be use to selectively update\n * only the referenced properties at the current location (instead of replacing\n * all the child properties at the current location).\n *\n * The effect of the write will be visible immediately, and the corresponding\n * events ('value', 'child_added', etc.) will be triggered. Synchronization of\n * the data to the Firebase servers will also be started, and the returned\n * Promise will resolve when complete. If provided, the `onComplete` callback\n * will be called asynchronously after synchronization has finished.\n *\n * A single `update()` will generate a single \"value\" event at the location\n * where the `update()` was performed, regardless of how many children were\n * modified.\n *\n * Note that modifying data with `update()` will cancel any pending\n * transactions at that location, so extreme care should be taken if mixing\n * `update()` and `transaction()` to modify the same data.\n *\n * Passing `null` to `update()` will remove the data at this location.\n *\n * See\n * {@link https://firebase.googleblog.com/2015/09/introducing-multi-location-updates-and_86.html | Introducing multi-location updates and more}.\n *\n * @param ref - The location to write to.\n * @param values - Object containing multiple values.\n * @returns Resolves when update on server is complete.\n */\nexport function update(ref: DatabaseReference, values: object): Promise<void> {\n  validateFirebaseMergeDataArg('update', values, ref._path, false);\n  const deferred = new Deferred<void>();\n  repoUpdate(\n    ref._repo,\n    ref._path,\n    values as Record<string, unknown>,\n    deferred.wrapCallback(() => {})\n  );\n  return deferred.promise;\n}\n\n/**\n * Gets the most up-to-date result for this query.\n *\n * @param query - The query to run.\n * @returns A `Promise` which resolves to the resulting DataSnapshot if a value is\n * available, or rejects if the client is unable to return a value (e.g., if the\n * server is unreachable and there is nothing cached).\n */\nexport function get(query: Query): Promise<DataSnapshot> {\n  query = getModularInstance(query) as QueryImpl;\n  const callbackContext = new CallbackContext(() => {});\n  const container = new ValueEventRegistration(callbackContext);\n  return repoGetValue(query._repo, query, container).then(node => {\n    return new DataSnapshot(\n      node,\n      new ReferenceImpl(query._repo, query._path),\n      query._queryParams.getIndex()\n    );\n  });\n}\n/**\n * Represents registration for 'value' events.\n */\nexport class ValueEventRegistration implements EventRegistration {\n  constructor(private callbackContext: CallbackContext) {}\n\n  respondsTo(eventType: string): boolean {\n    return eventType === 'value';\n  }\n\n  createEvent(change: Change, query: QueryContext): DataEvent {\n    const index = query._queryParams.getIndex();\n    return new DataEvent(\n      'value',\n      this,\n      new DataSnapshot(\n        change.snapshotNode,\n        new ReferenceImpl(query._repo, query._path),\n        index\n      )\n    );\n  }\n\n  getEventRunner(eventData: CancelEvent | DataEvent): () => void {\n    if (eventData.getEventType() === 'cancel') {\n      return () =>\n        this.callbackContext.onCancel((eventData as CancelEvent).error);\n    } else {\n      return () =>\n        this.callbackContext.onValue((eventData as DataEvent).snapshot, null);\n    }\n  }\n\n  createCancelEvent(error: Error, path: Path): CancelEvent | null {\n    if (this.callbackContext.hasCancelCallback) {\n      return new CancelEvent(this, error, path);\n    } else {\n      return null;\n    }\n  }\n\n  matches(other: EventRegistration): boolean {\n    if (!(other instanceof ValueEventRegistration)) {\n      return false;\n    } else if (!other.callbackContext || !this.callbackContext) {\n      // If no callback specified, we consider it to match any callback.\n      return true;\n    } else {\n      return other.callbackContext.matches(this.callbackContext);\n    }\n  }\n\n  hasAnyCallback(): boolean {\n    return this.callbackContext !== null;\n  }\n}\n\n/**\n * Represents the registration of a child_x event.\n */\nexport class ChildEventRegistration implements EventRegistration {\n  constructor(\n    private eventType: string,\n    private callbackContext: CallbackContext | null\n  ) {}\n\n  respondsTo(eventType: string): boolean {\n    let eventToCheck =\n      eventType === 'children_added' ? 'child_added' : eventType;\n    eventToCheck =\n      eventToCheck === 'children_removed' ? 'child_removed' : eventToCheck;\n    return this.eventType === eventToCheck;\n  }\n\n  createCancelEvent(error: Error, path: Path): CancelEvent | null {\n    if (this.callbackContext.hasCancelCallback) {\n      return new CancelEvent(this, error, path);\n    } else {\n      return null;\n    }\n  }\n\n  createEvent(change: Change, query: QueryContext): DataEvent {\n    assert(change.childName != null, 'Child events should have a childName.');\n    const childRef = child(\n      new ReferenceImpl(query._repo, query._path),\n      change.childName\n    );\n    const index = query._queryParams.getIndex();\n    return new DataEvent(\n      change.type as EventType,\n      this,\n      new DataSnapshot(change.snapshotNode, childRef, index),\n      change.prevName\n    );\n  }\n\n  getEventRunner(eventData: CancelEvent | DataEvent): () => void {\n    if (eventData.getEventType() === 'cancel') {\n      return () =>\n        this.callbackContext.onCancel((eventData as CancelEvent).error);\n    } else {\n      return () =>\n        this.callbackContext.onValue(\n          (eventData as DataEvent).snapshot,\n          (eventData as DataEvent).prevName\n        );\n    }\n  }\n\n  matches(other: EventRegistration): boolean {\n    if (other instanceof ChildEventRegistration) {\n      return (\n        this.eventType === other.eventType &&\n        (!this.callbackContext ||\n          !other.callbackContext ||\n          this.callbackContext.matches(other.callbackContext))\n      );\n    }\n\n    return false;\n  }\n\n  hasAnyCallback(): boolean {\n    return !!this.callbackContext;\n  }\n}\n\nfunction addEventListener(\n  query: Query,\n  eventType: EventType,\n  callback: UserCallback,\n  cancelCallbackOrListenOptions?: ((error: Error) => unknown) | ListenOptions,\n  options?: ListenOptions\n) {\n  let cancelCallback: ((error: Error) => unknown) | undefined;\n  if (typeof cancelCallbackOrListenOptions === 'object') {\n    cancelCallback = undefined;\n    options = cancelCallbackOrListenOptions;\n  }\n  if (typeof cancelCallbackOrListenOptions === 'function') {\n    cancelCallback = cancelCallbackOrListenOptions;\n  }\n\n  if (options && options.onlyOnce) {\n    const userCallback = callback;\n    const onceCallback: UserCallback = (dataSnapshot, previousChildName) => {\n      repoRemoveEventCallbackForQuery(query._repo, query, container);\n      userCallback(dataSnapshot, previousChildName);\n    };\n    onceCallback.userCallback = callback.userCallback;\n    onceCallback.context = callback.context;\n    callback = onceCallback;\n  }\n\n  const callbackContext = new CallbackContext(\n    callback,\n    cancelCallback || undefined\n  );\n  const container =\n    eventType === 'value'\n      ? new ValueEventRegistration(callbackContext)\n      : new ChildEventRegistration(eventType, callbackContext);\n  repoAddEventCallbackForQuery(query._repo, query, container);\n  return () => repoRemoveEventCallbackForQuery(query._repo, query, container);\n}\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onValue` event will trigger once with the initial data stored at this\n * location, and then trigger again each time the data changes. The\n * `DataSnapshot` passed to the callback will be for the location at which\n * `on()` was called. It won't trigger until the entire contents has been\n * synchronized. If the location has no data, it will be triggered with an empty\n * `DataSnapshot` (`val()` will return `null`).\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs. The\n * callback will be passed a DataSnapshot.\n * @param cancelCallback - An optional callback that will be notified if your\n * event subscription is ever canceled because your client does not have\n * permission to read this data (or it had permission but has now lost it).\n * This callback will be passed an `Error` object indicating why the failure\n * occurred.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onValue(\n  query: Query,\n  callback: (snapshot: DataSnapshot) => unknown,\n  cancelCallback?: (error: Error) => unknown\n): Unsubscribe;\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onValue` event will trigger once with the initial data stored at this\n * location, and then trigger again each time the data changes. The\n * `DataSnapshot` passed to the callback will be for the location at which\n * `on()` was called. It won't trigger until the entire contents has been\n * synchronized. If the location has no data, it will be triggered with an empty\n * `DataSnapshot` (`val()` will return `null`).\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs. The\n * callback will be passed a DataSnapshot.\n * @param options - An object that can be used to configure `onlyOnce`, which\n * then removes the listener after its first invocation.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onValue(\n  query: Query,\n  callback: (snapshot: DataSnapshot) => unknown,\n  options: ListenOptions\n): Unsubscribe;\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onValue` event will trigger once with the initial data stored at this\n * location, and then trigger again each time the data changes. The\n * `DataSnapshot` passed to the callback will be for the location at which\n * `on()` was called. It won't trigger until the entire contents has been\n * synchronized. If the location has no data, it will be triggered with an empty\n * `DataSnapshot` (`val()` will return `null`).\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs. The\n * callback will be passed a DataSnapshot.\n * @param cancelCallback - An optional callback that will be notified if your\n * event subscription is ever canceled because your client does not have\n * permission to read this data (or it had permission but has now lost it).\n * This callback will be passed an `Error` object indicating why the failure\n * occurred.\n * @param options - An object that can be used to configure `onlyOnce`, which\n * then removes the listener after its first invocation.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onValue(\n  query: Query,\n  callback: (snapshot: DataSnapshot) => unknown,\n  cancelCallback: (error: Error) => unknown,\n  options: ListenOptions\n): Unsubscribe;\n\nexport function onValue(\n  query: Query,\n  callback: (snapshot: DataSnapshot) => unknown,\n  cancelCallbackOrListenOptions?: ((error: Error) => unknown) | ListenOptions,\n  options?: ListenOptions\n): Unsubscribe {\n  return addEventListener(\n    query,\n    'value',\n    callback,\n    cancelCallbackOrListenOptions,\n    options\n  );\n}\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildAdded` event will be triggered once for each initial child at this\n * location, and it will be triggered again every time a new child is added. The\n * `DataSnapshot` passed into the callback will reflect the data for the\n * relevant child. For ordering purposes, it is passed a second argument which\n * is a string containing the key of the previous sibling child by sort order,\n * or `null` if it is the first child.\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param cancelCallback - An optional callback that will be notified if your\n * event subscription is ever canceled because your client does not have\n * permission to read this data (or it had permission but has now lost it).\n * This callback will be passed an `Error` object indicating why the failure\n * occurred.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildAdded(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName?: string | null\n  ) => unknown,\n  cancelCallback?: (error: Error) => unknown\n): Unsubscribe;\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildAdded` event will be triggered once for each initial child at this\n * location, and it will be triggered again every time a new child is added. The\n * `DataSnapshot` passed into the callback will reflect the data for the\n * relevant child. For ordering purposes, it is passed a second argument which\n * is a string containing the key of the previous sibling child by sort order,\n * or `null` if it is the first child.\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param options - An object that can be used to configure `onlyOnce`, which\n * then removes the listener after its first invocation.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildAdded(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  options: ListenOptions\n): Unsubscribe;\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildAdded` event will be triggered once for each initial child at this\n * location, and it will be triggered again every time a new child is added. The\n * `DataSnapshot` passed into the callback will reflect the data for the\n * relevant child. For ordering purposes, it is passed a second argument which\n * is a string containing the key of the previous sibling child by sort order,\n * or `null` if it is the first child.\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param cancelCallback - An optional callback that will be notified if your\n * event subscription is ever canceled because your client does not have\n * permission to read this data (or it had permission but has now lost it).\n * This callback will be passed an `Error` object indicating why the failure\n * occurred.\n * @param options - An object that can be used to configure `onlyOnce`, which\n * then removes the listener after its first invocation.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildAdded(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  cancelCallback: (error: Error) => unknown,\n  options: ListenOptions\n): Unsubscribe;\n\nexport function onChildAdded(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  cancelCallbackOrListenOptions?: ((error: Error) => unknown) | ListenOptions,\n  options?: ListenOptions\n): Unsubscribe {\n  return addEventListener(\n    query,\n    'child_added',\n    callback,\n    cancelCallbackOrListenOptions,\n    options\n  );\n}\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildChanged` event will be triggered when the data stored in a child\n * (or any of its descendants) changes. Note that a single `child_changed` event\n * may represent multiple changes to the child. The `DataSnapshot` passed to the\n * callback will contain the new child contents. For ordering purposes, the\n * callback is also passed a second argument which is a string containing the\n * key of the previous sibling child by sort order, or `null` if it is the first\n * child.\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param cancelCallback - An optional callback that will be notified if your\n * event subscription is ever canceled because your client does not have\n * permission to read this data (or it had permission but has now lost it).\n * This callback will be passed an `Error` object indicating why the failure\n * occurred.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildChanged(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  cancelCallback?: (error: Error) => unknown\n): Unsubscribe;\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildChanged` event will be triggered when the data stored in a child\n * (or any of its descendants) changes. Note that a single `child_changed` event\n * may represent multiple changes to the child. The `DataSnapshot` passed to the\n * callback will contain the new child contents. For ordering purposes, the\n * callback is also passed a second argument which is a string containing the\n * key of the previous sibling child by sort order, or `null` if it is the first\n * child.\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param options - An object that can be used to configure `onlyOnce`, which\n * then removes the listener after its first invocation.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildChanged(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  options: ListenOptions\n): Unsubscribe;\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildChanged` event will be triggered when the data stored in a child\n * (or any of its descendants) changes. Note that a single `child_changed` event\n * may represent multiple changes to the child. The `DataSnapshot` passed to the\n * callback will contain the new child contents. For ordering purposes, the\n * callback is also passed a second argument which is a string containing the\n * key of the previous sibling child by sort order, or `null` if it is the first\n * child.\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param cancelCallback - An optional callback that will be notified if your\n * event subscription is ever canceled because your client does not have\n * permission to read this data (or it had permission but has now lost it).\n * This callback will be passed an `Error` object indicating why the failure\n * occurred.\n * @param options - An object that can be used to configure `onlyOnce`, which\n * then removes the listener after its first invocation.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildChanged(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  cancelCallback: (error: Error) => unknown,\n  options: ListenOptions\n): Unsubscribe;\n\nexport function onChildChanged(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  cancelCallbackOrListenOptions?: ((error: Error) => unknown) | ListenOptions,\n  options?: ListenOptions\n): Unsubscribe {\n  return addEventListener(\n    query,\n    'child_changed',\n    callback,\n    cancelCallbackOrListenOptions,\n    options\n  );\n}\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildMoved` event will be triggered when a child's sort order changes\n * such that its position relative to its siblings changes. The `DataSnapshot`\n * passed to the callback will be for the data of the child that has moved. It\n * is also passed a second argument which is a string containing the key of the\n * previous sibling child by sort order, or `null` if it is the first child.\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param cancelCallback - An optional callback that will be notified if your\n * event subscription is ever canceled because your client does not have\n * permission to read this data (or it had permission but has now lost it).\n * This callback will be passed an `Error` object indicating why the failure\n * occurred.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildMoved(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  cancelCallback?: (error: Error) => unknown\n): Unsubscribe;\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildMoved` event will be triggered when a child's sort order changes\n * such that its position relative to its siblings changes. The `DataSnapshot`\n * passed to the callback will be for the data of the child that has moved. It\n * is also passed a second argument which is a string containing the key of the\n * previous sibling child by sort order, or `null` if it is the first child.\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param options - An object that can be used to configure `onlyOnce`, which\n * then removes the listener after its first invocation.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildMoved(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  options: ListenOptions\n): Unsubscribe;\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildMoved` event will be triggered when a child's sort order changes\n * such that its position relative to its siblings changes. The `DataSnapshot`\n * passed to the callback will be for the data of the child that has moved. It\n * is also passed a second argument which is a string containing the key of the\n * previous sibling child by sort order, or `null` if it is the first child.\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param cancelCallback - An optional callback that will be notified if your\n * event subscription is ever canceled because your client does not have\n * permission to read this data (or it had permission but has now lost it).\n * This callback will be passed an `Error` object indicating why the failure\n * occurred.\n * @param options - An object that can be used to configure `onlyOnce`, which\n * then removes the listener after its first invocation.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildMoved(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  cancelCallback: (error: Error) => unknown,\n  options: ListenOptions\n): Unsubscribe;\n\nexport function onChildMoved(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  cancelCallbackOrListenOptions?: ((error: Error) => unknown) | ListenOptions,\n  options?: ListenOptions\n): Unsubscribe {\n  return addEventListener(\n    query,\n    'child_moved',\n    callback,\n    cancelCallbackOrListenOptions,\n    options\n  );\n}\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildRemoved` event will be triggered once every time a child is\n * removed. The `DataSnapshot` passed into the callback will be the old data for\n * the child that was removed. A child will get removed when either:\n *\n * - a client explicitly calls `remove()` on that child or one of its ancestors\n * - a client calls `set(null)` on that child or one of its ancestors\n * - that child has all of its children removed\n * - there is a query in effect which now filters out the child (because it's\n *   sort order changed or the max limit was hit)\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param cancelCallback - An optional callback that will be notified if your\n * event subscription is ever canceled because your client does not have\n * permission to read this data (or it had permission but has now lost it).\n * This callback will be passed an `Error` object indicating why the failure\n * occurred.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildRemoved(\n  query: Query,\n  callback: (snapshot: DataSnapshot) => unknown,\n  cancelCallback?: (error: Error) => unknown\n): Unsubscribe;\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildRemoved` event will be triggered once every time a child is\n * removed. The `DataSnapshot` passed into the callback will be the old data for\n * the child that was removed. A child will get removed when either:\n *\n * - a client explicitly calls `remove()` on that child or one of its ancestors\n * - a client calls `set(null)` on that child or one of its ancestors\n * - that child has all of its children removed\n * - there is a query in effect which now filters out the child (because it's\n *   sort order changed or the max limit was hit)\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param options - An object that can be used to configure `onlyOnce`, which\n * then removes the listener after its first invocation.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildRemoved(\n  query: Query,\n  callback: (snapshot: DataSnapshot) => unknown,\n  options: ListenOptions\n): Unsubscribe;\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildRemoved` event will be triggered once every time a child is\n * removed. The `DataSnapshot` passed into the callback will be the old data for\n * the child that was removed. A child will get removed when either:\n *\n * - a client explicitly calls `remove()` on that child or one of its ancestors\n * - a client calls `set(null)` on that child or one of its ancestors\n * - that child has all of its children removed\n * - there is a query in effect which now filters out the child (because it's\n *   sort order changed or the max limit was hit)\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param cancelCallback - An optional callback that will be notified if your\n * event subscription is ever canceled because your client does not have\n * permission to read this data (or it had permission but has now lost it).\n * This callback will be passed an `Error` object indicating why the failure\n * occurred.\n * @param options - An object that can be used to configure `onlyOnce`, which\n * then removes the listener after its first invocation.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildRemoved(\n  query: Query,\n  callback: (snapshot: DataSnapshot) => unknown,\n  cancelCallback: (error: Error) => unknown,\n  options: ListenOptions\n): Unsubscribe;\n\nexport function onChildRemoved(\n  query: Query,\n  callback: (snapshot: DataSnapshot) => unknown,\n  cancelCallbackOrListenOptions?: ((error: Error) => unknown) | ListenOptions,\n  options?: ListenOptions\n): Unsubscribe {\n  return addEventListener(\n    query,\n    'child_removed',\n    callback,\n    cancelCallbackOrListenOptions,\n    options\n  );\n}\n\nexport { EventType };\n\n/**\n * Detaches a callback previously attached with the corresponding `on*()` (`onValue`, `onChildAdded`) listener.\n * Note: This is not the recommended way to remove a listener. Instead, please use the returned callback function from\n * the respective `on*` callbacks.\n *\n * Detach a callback previously attached with `on*()`. Calling `off()` on a parent listener\n * will not automatically remove listeners registered on child nodes, `off()`\n * must also be called on any child listeners to remove the callback.\n *\n * If a callback is not specified, all callbacks for the specified eventType\n * will be removed. Similarly, if no eventType is specified, all callbacks\n * for the `Reference` will be removed.\n *\n * Individual listeners can also be removed by invoking their unsubscribe\n * callbacks.\n *\n * @param query - The query that the listener was registered with.\n * @param eventType - One of the following strings: \"value\", \"child_added\",\n * \"child_changed\", \"child_removed\", or \"child_moved.\" If omitted, all callbacks\n * for the `Reference` will be removed.\n * @param callback - The callback function that was passed to `on()` or\n * `undefined` to remove all callbacks.\n */\nexport function off(\n  query: Query,\n  eventType?: EventType,\n  callback?: (\n    snapshot: DataSnapshot,\n    previousChildName?: string | null\n  ) => unknown\n): void {\n  let container: EventRegistration | null = null;\n  const expCallback = callback ? new CallbackContext(callback) : null;\n  if (eventType === 'value') {\n    container = new ValueEventRegistration(expCallback);\n  } else if (eventType) {\n    container = new ChildEventRegistration(eventType, expCallback);\n  }\n  repoRemoveEventCallbackForQuery(query._repo, query, container);\n}\n\n/** Describes the different query constraints available in this SDK. */\nexport type QueryConstraintType =\n  | 'endAt'\n  | 'endBefore'\n  | 'startAt'\n  | 'startAfter'\n  | 'limitToFirst'\n  | 'limitToLast'\n  | 'orderByChild'\n  | 'orderByKey'\n  | 'orderByPriority'\n  | 'orderByValue'\n  | 'equalTo';\n\n/**\n * A `QueryConstraint` is used to narrow the set of documents returned by a\n * Database query. `QueryConstraint`s are created by invoking {@link endAt},\n * {@link endBefore}, {@link startAt}, {@link startAfter}, {@link\n * limitToFirst}, {@link limitToLast}, {@link orderByChild},\n * {@link orderByChild}, {@link orderByKey} , {@link orderByPriority} ,\n * {@link orderByValue}  or {@link equalTo} and\n * can then be passed to {@link query} to create a new query instance that\n * also contains this `QueryConstraint`.\n */\nexport abstract class QueryConstraint {\n  /** The type of this query constraints */\n  abstract readonly type: QueryConstraintType;\n\n  /**\n   * Takes the provided `Query` and returns a copy of the `Query` with this\n   * `QueryConstraint` applied.\n   */\n  abstract _apply<T>(query: QueryImpl): QueryImpl;\n}\n\nclass QueryEndAtConstraint extends QueryConstraint {\n  readonly type: 'endAt';\n\n  constructor(\n    private readonly _value: number | string | boolean | null,\n    private readonly _key?: string\n  ) {\n    super();\n  }\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    validateFirebaseDataArg('endAt', this._value, query._path, true);\n    const newParams = queryParamsEndAt(\n      query._queryParams,\n      this._value,\n      this._key\n    );\n    validateLimit(newParams);\n    validateQueryEndpoints(newParams);\n    if (query._queryParams.hasEnd()) {\n      throw new Error(\n        'endAt: Starting point was already set (by another call to endAt, ' +\n          'endBefore or equalTo).'\n      );\n    }\n    return new QueryImpl(\n      query._repo,\n      query._path,\n      newParams,\n      query._orderByCalled\n    );\n  }\n}\n\n/**\n * Creates a `QueryConstraint` with the specified ending point.\n *\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\n * allows you to choose arbitrary starting and ending points for your queries.\n *\n * The ending point is inclusive, so children with exactly the specified value\n * will be included in the query. The optional key argument can be used to\n * further limit the range of the query. If it is specified, then children that\n * have exactly the specified value must also have a key name less than or equal\n * to the specified key.\n *\n * You can read more about `endAt()` in\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\n *\n * @param value - The value to end at. The argument type depends on which\n * `orderBy*()` function was used in this query. Specify a value that matches\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\n * value must be a string.\n * @param key - The child key to end at, among the children with the previously\n * specified priority. This argument is only allowed if ordering by child,\n * value, or priority.\n */\nexport function endAt(\n  value: number | string | boolean | null,\n  key?: string\n): QueryConstraint {\n  validateKey('endAt', 'key', key, true);\n  return new QueryEndAtConstraint(value, key);\n}\n\nclass QueryEndBeforeConstraint extends QueryConstraint {\n  readonly type: 'endBefore';\n\n  constructor(\n    private readonly _value: number | string | boolean | null,\n    private readonly _key?: string\n  ) {\n    super();\n  }\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    validateFirebaseDataArg('endBefore', this._value, query._path, false);\n    const newParams = queryParamsEndBefore(\n      query._queryParams,\n      this._value,\n      this._key\n    );\n    validateLimit(newParams);\n    validateQueryEndpoints(newParams);\n    if (query._queryParams.hasEnd()) {\n      throw new Error(\n        'endBefore: Starting point was already set (by another call to endAt, ' +\n          'endBefore or equalTo).'\n      );\n    }\n    return new QueryImpl(\n      query._repo,\n      query._path,\n      newParams,\n      query._orderByCalled\n    );\n  }\n}\n\n/**\n * Creates a `QueryConstraint` with the specified ending point (exclusive).\n *\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\n * allows you to choose arbitrary starting and ending points for your queries.\n *\n * The ending point is exclusive. If only a value is provided, children\n * with a value less than the specified value will be included in the query.\n * If a key is specified, then children must have a value lesss than or equal\n * to the specified value and a a key name less than the specified key.\n *\n * @param value - The value to end before. The argument type depends on which\n * `orderBy*()` function was used in this query. Specify a value that matches\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\n * value must be a string.\n * @param key - The child key to end before, among the children with the\n * previously specified priority. This argument is only allowed if ordering by\n * child, value, or priority.\n */\nexport function endBefore(\n  value: number | string | boolean | null,\n  key?: string\n): QueryConstraint {\n  validateKey('endBefore', 'key', key, true);\n  return new QueryEndBeforeConstraint(value, key);\n}\n\nclass QueryStartAtConstraint extends QueryConstraint {\n  readonly type: 'startAt';\n\n  constructor(\n    private readonly _value: number | string | boolean | null,\n    private readonly _key?: string\n  ) {\n    super();\n  }\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    validateFirebaseDataArg('startAt', this._value, query._path, true);\n    const newParams = queryParamsStartAt(\n      query._queryParams,\n      this._value,\n      this._key\n    );\n    validateLimit(newParams);\n    validateQueryEndpoints(newParams);\n    if (query._queryParams.hasStart()) {\n      throw new Error(\n        'startAt: Starting point was already set (by another call to startAt, ' +\n          'startBefore or equalTo).'\n      );\n    }\n    return new QueryImpl(\n      query._repo,\n      query._path,\n      newParams,\n      query._orderByCalled\n    );\n  }\n}\n\n/**\n * Creates a `QueryConstraint` with the specified starting point.\n *\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\n * allows you to choose arbitrary starting and ending points for your queries.\n *\n * The starting point is inclusive, so children with exactly the specified value\n * will be included in the query. The optional key argument can be used to\n * further limit the range of the query. If it is specified, then children that\n * have exactly the specified value must also have a key name greater than or\n * equal to the specified key.\n *\n * You can read more about `startAt()` in\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\n *\n * @param value - The value to start at. The argument type depends on which\n * `orderBy*()` function was used in this query. Specify a value that matches\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\n * value must be a string.\n * @param key - The child key to start at. This argument is only allowed if\n * ordering by child, value, or priority.\n */\nexport function startAt(\n  value: number | string | boolean | null = null,\n  key?: string\n): QueryConstraint {\n  validateKey('startAt', 'key', key, true);\n  return new QueryStartAtConstraint(value, key);\n}\n\nclass QueryStartAfterConstraint extends QueryConstraint {\n  readonly type: 'startAfter';\n\n  constructor(\n    private readonly _value: number | string | boolean | null,\n    private readonly _key?: string\n  ) {\n    super();\n  }\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    validateFirebaseDataArg('startAfter', this._value, query._path, false);\n    const newParams = queryParamsStartAfter(\n      query._queryParams,\n      this._value,\n      this._key\n    );\n    validateLimit(newParams);\n    validateQueryEndpoints(newParams);\n    if (query._queryParams.hasStart()) {\n      throw new Error(\n        'startAfter: Starting point was already set (by another call to startAt, ' +\n          'startAfter, or equalTo).'\n      );\n    }\n    return new QueryImpl(\n      query._repo,\n      query._path,\n      newParams,\n      query._orderByCalled\n    );\n  }\n}\n\n/**\n * Creates a `QueryConstraint` with the specified starting point (exclusive).\n *\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\n * allows you to choose arbitrary starting and ending points for your queries.\n *\n * The starting point is exclusive. If only a value is provided, children\n * with a value greater than the specified value will be included in the query.\n * If a key is specified, then children must have a value greater than or equal\n * to the specified value and a a key name greater than the specified key.\n *\n * @param value - The value to start after. The argument type depends on which\n * `orderBy*()` function was used in this query. Specify a value that matches\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\n * value must be a string.\n * @param key - The child key to start after. This argument is only allowed if\n * ordering by child, value, or priority.\n */\nexport function startAfter(\n  value: number | string | boolean | null,\n  key?: string\n): QueryConstraint {\n  validateKey('startAfter', 'key', key, true);\n  return new QueryStartAfterConstraint(value, key);\n}\n\nclass QueryLimitToFirstConstraint extends QueryConstraint {\n  readonly type: 'limitToFirst';\n\n  constructor(private readonly _limit: number) {\n    super();\n  }\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    if (query._queryParams.hasLimit()) {\n      throw new Error(\n        'limitToFirst: Limit was already set (by another call to limitToFirst ' +\n          'or limitToLast).'\n      );\n    }\n    return new QueryImpl(\n      query._repo,\n      query._path,\n      queryParamsLimitToFirst(query._queryParams, this._limit),\n      query._orderByCalled\n    );\n  }\n}\n\n/**\n * Creates a new `QueryConstraint` that if limited to the first specific number\n * of children.\n *\n * The `limitToFirst()` method is used to set a maximum number of children to be\n * synced for a given callback. If we set a limit of 100, we will initially only\n * receive up to 100 `child_added` events. If we have fewer than 100 messages\n * stored in our Database, a `child_added` event will fire for each message.\n * However, if we have over 100 messages, we will only receive a `child_added`\n * event for the first 100 ordered messages. As items change, we will receive\n * `child_removed` events for each item that drops out of the active list so\n * that the total number stays at 100.\n *\n * You can read more about `limitToFirst()` in\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\n *\n * @param limit - The maximum number of nodes to include in this query.\n */\nexport function limitToFirst(limit: number): QueryConstraint {\n  if (typeof limit !== 'number' || Math.floor(limit) !== limit || limit <= 0) {\n    throw new Error('limitToFirst: First argument must be a positive integer.');\n  }\n  return new QueryLimitToFirstConstraint(limit);\n}\n\nclass QueryLimitToLastConstraint extends QueryConstraint {\n  readonly type: 'limitToLast';\n\n  constructor(private readonly _limit: number) {\n    super();\n  }\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    if (query._queryParams.hasLimit()) {\n      throw new Error(\n        'limitToLast: Limit was already set (by another call to limitToFirst ' +\n          'or limitToLast).'\n      );\n    }\n    return new QueryImpl(\n      query._repo,\n      query._path,\n      queryParamsLimitToLast(query._queryParams, this._limit),\n      query._orderByCalled\n    );\n  }\n}\n\n/**\n * Creates a new `QueryConstraint` that is limited to return only the last\n * specified number of children.\n *\n * The `limitToLast()` method is used to set a maximum number of children to be\n * synced for a given callback. If we set a limit of 100, we will initially only\n * receive up to 100 `child_added` events. If we have fewer than 100 messages\n * stored in our Database, a `child_added` event will fire for each message.\n * However, if we have over 100 messages, we will only receive a `child_added`\n * event for the last 100 ordered messages. As items change, we will receive\n * `child_removed` events for each item that drops out of the active list so\n * that the total number stays at 100.\n *\n * You can read more about `limitToLast()` in\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\n *\n * @param limit - The maximum number of nodes to include in this query.\n */\nexport function limitToLast(limit: number): QueryConstraint {\n  if (typeof limit !== 'number' || Math.floor(limit) !== limit || limit <= 0) {\n    throw new Error('limitToLast: First argument must be a positive integer.');\n  }\n\n  return new QueryLimitToLastConstraint(limit);\n}\n\nclass QueryOrderByChildConstraint extends QueryConstraint {\n  readonly type: 'orderByChild';\n\n  constructor(private readonly _path: string) {\n    super();\n  }\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    validateNoPreviousOrderByCall(query, 'orderByChild');\n    const parsedPath = new Path(this._path);\n    if (pathIsEmpty(parsedPath)) {\n      throw new Error(\n        'orderByChild: cannot pass in empty path. Use orderByValue() instead.'\n      );\n    }\n    const index = new PathIndex(parsedPath);\n    const newParams = queryParamsOrderBy(query._queryParams, index);\n    validateQueryEndpoints(newParams);\n\n    return new QueryImpl(\n      query._repo,\n      query._path,\n      newParams,\n      /*orderByCalled=*/ true\n    );\n  }\n}\n\n/**\n * Creates a new `QueryConstraint` that orders by the specified child key.\n *\n * Queries can only order by one key at a time. Calling `orderByChild()`\n * multiple times on the same query is an error.\n *\n * Firebase queries allow you to order your data by any child key on the fly.\n * However, if you know in advance what your indexes will be, you can define\n * them via the .indexOn rule in your Security Rules for better performance. See\n * the{@link https://firebase.google.com/docs/database/security/indexing-data}\n * rule for more information.\n *\n * You can read more about `orderByChild()` in\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}.\n *\n * @param path - The path to order by.\n */\nexport function orderByChild(path: string): QueryConstraint {\n  if (path === '$key') {\n    throw new Error(\n      'orderByChild: \"$key\" is invalid.  Use orderByKey() instead.'\n    );\n  } else if (path === '$priority') {\n    throw new Error(\n      'orderByChild: \"$priority\" is invalid.  Use orderByPriority() instead.'\n    );\n  } else if (path === '$value') {\n    throw new Error(\n      'orderByChild: \"$value\" is invalid.  Use orderByValue() instead.'\n    );\n  }\n  validatePathString('orderByChild', 'path', path, false);\n  return new QueryOrderByChildConstraint(path);\n}\n\nclass QueryOrderByKeyConstraint extends QueryConstraint {\n  readonly type: 'orderByKey';\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    validateNoPreviousOrderByCall(query, 'orderByKey');\n    const newParams = queryParamsOrderBy(query._queryParams, KEY_INDEX);\n    validateQueryEndpoints(newParams);\n    return new QueryImpl(\n      query._repo,\n      query._path,\n      newParams,\n      /*orderByCalled=*/ true\n    );\n  }\n}\n\n/**\n * Creates a new `QueryConstraint` that orders by the key.\n *\n * Sorts the results of a query by their (ascending) key values.\n *\n * You can read more about `orderByKey()` in\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}.\n */\nexport function orderByKey(): QueryConstraint {\n  return new QueryOrderByKeyConstraint();\n}\n\nclass QueryOrderByPriorityConstraint extends QueryConstraint {\n  readonly type: 'orderByPriority';\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    validateNoPreviousOrderByCall(query, 'orderByPriority');\n    const newParams = queryParamsOrderBy(query._queryParams, PRIORITY_INDEX);\n    validateQueryEndpoints(newParams);\n    return new QueryImpl(\n      query._repo,\n      query._path,\n      newParams,\n      /*orderByCalled=*/ true\n    );\n  }\n}\n\n/**\n * Creates a new `QueryConstraint` that orders by priority.\n *\n * Applications need not use priority but can order collections by\n * ordinary properties (see\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}\n * for alternatives to priority.\n */\nexport function orderByPriority(): QueryConstraint {\n  return new QueryOrderByPriorityConstraint();\n}\n\nclass QueryOrderByValueConstraint extends QueryConstraint {\n  readonly type: 'orderByValue';\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    validateNoPreviousOrderByCall(query, 'orderByValue');\n    const newParams = queryParamsOrderBy(query._queryParams, VALUE_INDEX);\n    validateQueryEndpoints(newParams);\n    return new QueryImpl(\n      query._repo,\n      query._path,\n      newParams,\n      /*orderByCalled=*/ true\n    );\n  }\n}\n\n/**\n * Creates a new `QueryConstraint` that orders by value.\n *\n * If the children of a query are all scalar values (string, number, or\n * boolean), you can order the results by their (ascending) values.\n *\n * You can read more about `orderByValue()` in\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}.\n */\nexport function orderByValue(): QueryConstraint {\n  return new QueryOrderByValueConstraint();\n}\n\nclass QueryEqualToValueConstraint extends QueryConstraint {\n  readonly type: 'equalTo';\n\n  constructor(\n    private readonly _value: number | string | boolean | null,\n    private readonly _key?: string\n  ) {\n    super();\n  }\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    validateFirebaseDataArg('equalTo', this._value, query._path, false);\n    if (query._queryParams.hasStart()) {\n      throw new Error(\n        'equalTo: Starting point was already set (by another call to startAt/startAfter or ' +\n          'equalTo).'\n      );\n    }\n    if (query._queryParams.hasEnd()) {\n      throw new Error(\n        'equalTo: Ending point was already set (by another call to endAt/endBefore or ' +\n          'equalTo).'\n      );\n    }\n    return new QueryEndAtConstraint(this._value, this._key)._apply(\n      new QueryStartAtConstraint(this._value, this._key)._apply(query)\n    );\n  }\n}\n\n/**\n * Creates a `QueryConstraint` that includes children that match the specified\n * value.\n *\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\n * allows you to choose arbitrary starting and ending points for your queries.\n *\n * The optional key argument can be used to further limit the range of the\n * query. If it is specified, then children that have exactly the specified\n * value must also have exactly the specified key as their key name. This can be\n * used to filter result sets with many matches for the same value.\n *\n * You can read more about `equalTo()` in\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\n *\n * @param value - The value to match for. The argument type depends on which\n * `orderBy*()` function was used in this query. Specify a value that matches\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\n * value must be a string.\n * @param key - The child key to start at, among the children with the\n * previously specified priority. This argument is only allowed if ordering by\n * child, value, or priority.\n */\nexport function equalTo(\n  value: number | string | boolean | null,\n  key?: string\n): QueryConstraint {\n  validateKey('equalTo', 'key', key, true);\n  return new QueryEqualToValueConstraint(value, key);\n}\n\n/**\n * Creates a new immutable instance of `Query` that is extended to also include\n * additional query constraints.\n *\n * @param query - The Query instance to use as a base for the new constraints.\n * @param queryConstraints - The list of `QueryConstraint`s to apply.\n * @throws if any of the provided query constraints cannot be combined with the\n * existing or new constraints.\n */\nexport function query(\n  query: Query,\n  ...queryConstraints: QueryConstraint[]\n): Query {\n  let queryImpl = getModularInstance(query) as QueryImpl;\n  for (const constraint of queryConstraints) {\n    queryImpl = constraint._apply(queryImpl);\n  }\n  return queryImpl;\n}\n\n/**\n * Define reference constructor in various modules\n *\n * We are doing this here to avoid several circular\n * dependency issues\n */\nsyncPointSetReferenceConstructor(ReferenceImpl);\nsyncTreeSetReferenceConstructor(ReferenceImpl);\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport {\n  _FirebaseService,\n  _getProvider,\n  FirebaseApp,\n  getApp\n} from '@firebase/app';\nimport { AppCheckInternalComponentName } from '@firebase/app-check-interop-types';\nimport { FirebaseAuthInternalName } from '@firebase/auth-interop-types';\nimport { Provider } from '@firebase/component';\nimport {\n  getModularInstance,\n  createMockUserToken,\n  EmulatorMockTokenOptions,\n  getDefaultEmulatorHost\n} from '@firebase/util';\n\nimport { AppCheckTokenProvider } from '../core/AppCheckTokenProvider';\nimport {\n  AuthTokenProvider,\n  EmulatorTokenProvider,\n  FirebaseAuthTokenProvider\n} from '../core/AuthTokenProvider';\nimport { Repo, repoInterrupt, repoResume, repoStart } from '../core/Repo';\nimport { RepoInfo } from '../core/RepoInfo';\nimport { parseRepoInfo } from '../core/util/libs/parser';\nimport { newEmptyPath, pathIsEmpty } from '../core/util/Path';\nimport {\n  warn,\n  fatal,\n  log,\n  enableLogging as enableLoggingImpl\n} from '../core/util/util';\nimport { validateUrl } from '../core/util/validation';\nimport { BrowserPollConnection } from '../realtime/BrowserPollConnection';\nimport { TransportManager } from '../realtime/TransportManager';\nimport { WebSocketConnection } from '../realtime/WebSocketConnection';\n\nimport { ReferenceImpl } from './Reference_impl';\n\nexport { EmulatorMockTokenOptions } from '@firebase/util';\n/**\n * This variable is also defined in the firebase Node.js Admin SDK. Before\n * modifying this definition, consult the definition in:\n *\n * https://github.com/firebase/firebase-admin-node\n *\n * and make sure the two are consistent.\n */\nconst FIREBASE_DATABASE_EMULATOR_HOST_VAR = 'FIREBASE_DATABASE_EMULATOR_HOST';\n\n/**\n * Creates and caches `Repo` instances.\n */\nconst repos: {\n  [appName: string]: {\n    [dbUrl: string]: Repo;\n  };\n} = {};\n\n/**\n * If true, any new `Repo` will be created to use `ReadonlyRestClient` (for testing purposes).\n */\nlet useRestClient = false;\n\n/**\n * Update an existing `Repo` in place to point to a new host/port.\n */\nfunction repoManagerApplyEmulatorSettings(\n  repo: Repo,\n  host: string,\n  port: number,\n  tokenProvider?: AuthTokenProvider\n): void {\n  repo.repoInfo_ = new RepoInfo(\n    `${host}:${port}`,\n    /* secure= */ false,\n    repo.repoInfo_.namespace,\n    repo.repoInfo_.webSocketOnly,\n    repo.repoInfo_.nodeAdmin,\n    repo.repoInfo_.persistenceKey,\n    repo.repoInfo_.includeNamespaceInQueryParams\n  );\n\n  if (tokenProvider) {\n    repo.authTokenProvider_ = tokenProvider;\n  }\n}\n\n/**\n * This function should only ever be called to CREATE a new database instance.\n * @internal\n */\nexport function repoManagerDatabaseFromApp(\n  app: FirebaseApp,\n  authProvider: Provider<FirebaseAuthInternalName>,\n  appCheckProvider?: Provider<AppCheckInternalComponentName>,\n  url?: string,\n  nodeAdmin?: boolean\n): Database {\n  let dbUrl: string | undefined = url || app.options.databaseURL;\n  if (dbUrl === undefined) {\n    if (!app.options.projectId) {\n      fatal(\n        \"Can't determine Firebase Database URL. Be sure to include \" +\n          ' a Project ID when calling firebase.initializeApp().'\n      );\n    }\n\n    log('Using default host for project ', app.options.projectId);\n    dbUrl = `${app.options.projectId}-default-rtdb.firebaseio.com`;\n  }\n\n  let parsedUrl = parseRepoInfo(dbUrl, nodeAdmin);\n  let repoInfo = parsedUrl.repoInfo;\n\n  let isEmulator: boolean;\n\n  let dbEmulatorHost: string | undefined = undefined;\n  if (typeof process !== 'undefined' && process.env) {\n    dbEmulatorHost = process.env[FIREBASE_DATABASE_EMULATOR_HOST_VAR];\n  }\n\n  if (dbEmulatorHost) {\n    isEmulator = true;\n    dbUrl = `http://${dbEmulatorHost}?ns=${repoInfo.namespace}`;\n    parsedUrl = parseRepoInfo(dbUrl, nodeAdmin);\n    repoInfo = parsedUrl.repoInfo;\n  } else {\n    isEmulator = !parsedUrl.repoInfo.secure;\n  }\n\n  const authTokenProvider =\n    nodeAdmin && isEmulator\n      ? new EmulatorTokenProvider(EmulatorTokenProvider.OWNER)\n      : new FirebaseAuthTokenProvider(app.name, app.options, authProvider);\n\n  validateUrl('Invalid Firebase Database URL', parsedUrl);\n  if (!pathIsEmpty(parsedUrl.path)) {\n    fatal(\n      'Database URL must point to the root of a Firebase Database ' +\n        '(not including a child path).'\n    );\n  }\n\n  const repo = repoManagerCreateRepo(\n    repoInfo,\n    app,\n    authTokenProvider,\n    new AppCheckTokenProvider(app.name, appCheckProvider)\n  );\n  return new Database(repo, app);\n}\n\n/**\n * Remove the repo and make sure it is disconnected.\n *\n */\nfunction repoManagerDeleteRepo(repo: Repo, appName: string): void {\n  const appRepos = repos[appName];\n  // This should never happen...\n  if (!appRepos || appRepos[repo.key] !== repo) {\n    fatal(`Database ${appName}(${repo.repoInfo_}) has already been deleted.`);\n  }\n  repoInterrupt(repo);\n  delete appRepos[repo.key];\n}\n\n/**\n * Ensures a repo doesn't already exist and then creates one using the\n * provided app.\n *\n * @param repoInfo - The metadata about the Repo\n * @returns The Repo object for the specified server / repoName.\n */\nfunction repoManagerCreateRepo(\n  repoInfo: RepoInfo,\n  app: FirebaseApp,\n  authTokenProvider: AuthTokenProvider,\n  appCheckProvider: AppCheckTokenProvider\n): Repo {\n  let appRepos = repos[app.name];\n\n  if (!appRepos) {\n    appRepos = {};\n    repos[app.name] = appRepos;\n  }\n\n  let repo = appRepos[repoInfo.toURLString()];\n  if (repo) {\n    fatal(\n      'Database initialized multiple times. Please make sure the format of the database URL matches with each database() call.'\n    );\n  }\n  repo = new Repo(repoInfo, useRestClient, authTokenProvider, appCheckProvider);\n  appRepos[repoInfo.toURLString()] = repo;\n\n  return repo;\n}\n\n/**\n * Forces us to use ReadonlyRestClient instead of PersistentConnection for new Repos.\n */\nexport function repoManagerForceRestClient(forceRestClient: boolean): void {\n  useRestClient = forceRestClient;\n}\n\n/**\n * Class representing a Firebase Realtime Database.\n */\nexport class Database implements _FirebaseService {\n  /** Represents a `Database` instance. */\n  readonly 'type' = 'database';\n\n  /** Track if the instance has been used (root or repo accessed) */\n  _instanceStarted: boolean = false;\n\n  /** Backing state for root_ */\n  private _rootInternal?: ReferenceImpl;\n\n  /** @hideconstructor */\n  constructor(\n    public _repoInternal: Repo,\n    /** The {@link @firebase/app#FirebaseApp} associated with this Realtime Database instance. */\n    readonly app: FirebaseApp\n  ) {}\n\n  get _repo(): Repo {\n    if (!this._instanceStarted) {\n      repoStart(\n        this._repoInternal,\n        this.app.options.appId,\n        this.app.options['databaseAuthVariableOverride']\n      );\n      this._instanceStarted = true;\n    }\n    return this._repoInternal;\n  }\n\n  get _root(): ReferenceImpl {\n    if (!this._rootInternal) {\n      this._rootInternal = new ReferenceImpl(this._repo, newEmptyPath());\n    }\n    return this._rootInternal;\n  }\n\n  _delete(): Promise<void> {\n    if (this._rootInternal !== null) {\n      repoManagerDeleteRepo(this._repo, this.app.name);\n      this._repoInternal = null;\n      this._rootInternal = null;\n    }\n    return Promise.resolve();\n  }\n\n  _checkNotDeleted(apiName: string) {\n    if (this._rootInternal === null) {\n      fatal('Cannot call ' + apiName + ' on a deleted database.');\n    }\n  }\n}\n\nfunction checkTransportInit() {\n  if (TransportManager.IS_TRANSPORT_INITIALIZED) {\n    warn(\n      'Transport has already been initialized. Please call this function before calling ref or setting up a listener'\n    );\n  }\n}\n\n/**\n * Force the use of websockets instead of longPolling.\n */\nexport function forceWebSockets() {\n  checkTransportInit();\n  BrowserPollConnection.forceDisallow();\n}\n\n/**\n * Force the use of longPolling instead of websockets. This will be ignored if websocket protocol is used in databaseURL.\n */\nexport function forceLongPolling() {\n  checkTransportInit();\n  WebSocketConnection.forceDisallow();\n  BrowserPollConnection.forceAllow();\n}\n\n/**\n * Returns the instance of the Realtime Database SDK that is associated\n * with the provided {@link @firebase/app#FirebaseApp}. Initializes a new instance with\n * with default settings if no instance exists or if the existing instance uses\n * a custom database URL.\n *\n * @param app - The {@link @firebase/app#FirebaseApp} instance that the returned Realtime\n * Database instance is associated with.\n * @param url - The URL of the Realtime Database instance to connect to. If not\n * provided, the SDK connects to the default instance of the Firebase App.\n * @returns The `Database` instance of the provided app.\n */\nexport function getDatabase(\n  app: FirebaseApp = getApp(),\n  url?: string\n): Database {\n  const db = _getProvider(app, 'database').getImmediate({\n    identifier: url\n  }) as Database;\n  const databaseEmulatorHost = getDefaultEmulatorHost('database');\n  if (databaseEmulatorHost) {\n    const [host, port] = databaseEmulatorHost.split(':');\n    connectDatabaseEmulator(db, host, parseInt(port, 10));\n  }\n  return db;\n}\n\n/**\n * Modify the provided instance to communicate with the Realtime Database\n * emulator.\n *\n * <p>Note: This method must be called before performing any other operation.\n *\n * @param db - The instance to modify.\n * @param host - The emulator host (ex: localhost)\n * @param port - The emulator port (ex: 8080)\n * @param options.mockUserToken - the mock auth token to use for unit testing Security Rules\n */\nexport function connectDatabaseEmulator(\n  db: Database,\n  host: string,\n  port: number,\n  options: {\n    mockUserToken?: EmulatorMockTokenOptions | string;\n  } = {}\n): void {\n  db = getModularInstance(db);\n  db._checkNotDeleted('useEmulator');\n  if (db._instanceStarted) {\n    fatal(\n      'Cannot call useEmulator() after instance has already been initialized.'\n    );\n  }\n\n  const repo = db._repoInternal;\n  let tokenProvider: EmulatorTokenProvider | undefined = undefined;\n  if (repo.repoInfo_.nodeAdmin) {\n    if (options.mockUserToken) {\n      fatal(\n        'mockUserToken is not supported by the Admin SDK. For client access with mock users, please use the \"firebase\" package instead of \"firebase-admin\".'\n      );\n    }\n    tokenProvider = new EmulatorTokenProvider(EmulatorTokenProvider.OWNER);\n  } else if (options.mockUserToken) {\n    const token =\n      typeof options.mockUserToken === 'string'\n        ? options.mockUserToken\n        : createMockUserToken(options.mockUserToken, db.app.options.projectId);\n    tokenProvider = new EmulatorTokenProvider(token);\n  }\n\n  // Modify the repo to apply emulator settings\n  repoManagerApplyEmulatorSettings(repo, host, port, tokenProvider);\n}\n\n/**\n * Disconnects from the server (all Database operations will be completed\n * offline).\n *\n * The client automatically maintains a persistent connection to the Database\n * server, which will remain active indefinitely and reconnect when\n * disconnected. However, the `goOffline()` and `goOnline()` methods may be used\n * to control the client connection in cases where a persistent connection is\n * undesirable.\n *\n * While offline, the client will no longer receive data updates from the\n * Database. However, all Database operations performed locally will continue to\n * immediately fire events, allowing your application to continue behaving\n * normally. Additionally, each operation performed locally will automatically\n * be queued and retried upon reconnection to the Database server.\n *\n * To reconnect to the Database and begin receiving remote events, see\n * `goOnline()`.\n *\n * @param db - The instance to disconnect.\n */\nexport function goOffline(db: Database): void {\n  db = getModularInstance(db);\n  db._checkNotDeleted('goOffline');\n  repoInterrupt(db._repo);\n}\n\n/**\n * Reconnects to the server and synchronizes the offline Database state\n * with the server state.\n *\n * This method should be used after disabling the active connection with\n * `goOffline()`. Once reconnected, the client will transmit the proper data\n * and fire the appropriate events so that your client \"catches up\"\n * automatically.\n *\n * @param db - The instance to reconnect.\n */\nexport function goOnline(db: Database): void {\n  db = getModularInstance(db);\n  db._checkNotDeleted('goOnline');\n  repoResume(db._repo);\n}\n\n/**\n * Logs debugging information to the console.\n *\n * @param enabled - Enables logging if `true`, disables logging if `false`.\n * @param persistent - Remembers the logging state between page refreshes if\n * `true`.\n */\nexport function enableLogging(enabled: boolean, persistent?: boolean);\n\n/**\n * Logs debugging information to the console.\n *\n * @param logger - A custom logger function to control how things get logged.\n */\nexport function enableLogging(logger: (message: string) => unknown);\n\nexport function enableLogging(\n  logger: boolean | ((message: string) => unknown),\n  persistent?: boolean\n): void {\n  enableLoggingImpl(logger, persistent);\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { PersistentConnection } from '../core/PersistentConnection';\nimport { RepoInfo } from '../core/RepoInfo';\nimport { Connection } from '../realtime/Connection';\n\nimport { repoManagerForceRestClient } from './Database';\n\nexport const DataConnection = PersistentConnection;\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n(PersistentConnection.prototype as any).simpleListen = function (\n  pathString: string,\n  onComplete: (a: unknown) => void\n) {\n  this.sendRequest('q', { p: pathString }, onComplete);\n};\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n(PersistentConnection.prototype as any).echo = function (\n  data: unknown,\n  onEcho: (a: unknown) => void\n) {\n  this.sendRequest('echo', { d: data }, onEcho);\n};\n\n// RealTimeConnection properties that we use in tests.\nexport const RealTimeConnection = Connection;\n\n/**\n * @internal\n */\nexport const hijackHash = function (newHash: () => string) {\n  const oldPut = PersistentConnection.prototype.put;\n  PersistentConnection.prototype.put = function (\n    pathString,\n    data,\n    onComplete,\n    hash\n  ) {\n    if (hash !== undefined) {\n      hash = newHash();\n    }\n    oldPut.call(this, pathString, data, onComplete, hash);\n  };\n  return function () {\n    PersistentConnection.prototype.put = oldPut;\n  };\n};\n\nexport const ConnectionTarget = RepoInfo;\n\n/**\n * Forces the RepoManager to create Repos that use ReadonlyRestClient instead of PersistentConnection.\n * @internal\n */\nexport const forceRestClient = function (forceRestClient: boolean) {\n  repoManagerForceRestClient(forceRestClient);\n};\n","/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport {\n  _registerComponent,\n  registerVersion,\n  SDK_VERSION\n} from '@firebase/app';\nimport { Component, ComponentType } from '@firebase/component';\n\nimport { name, version } from '../package.json';\nimport { setSDKVersion } from '../src/core/version';\n\nimport { repoManagerDatabaseFromApp } from './api/Database';\n\nexport function registerDatabase(variant?: string): void {\n  setSDKVersion(SDK_VERSION);\n  _registerComponent(\n    new Component(\n      'database',\n      (container, { instanceIdentifier: url }) => {\n        const app = container.getProvider('app').getImmediate()!;\n        const authProvider = container.getProvider('auth-internal');\n        const appCheckProvider = container.getProvider('app-check-internal');\n        return repoManagerDatabaseFromApp(\n          app,\n          authProvider,\n          appCheckProvider,\n          url\n        );\n      },\n      ComponentType.PUBLIC\n    ).setMultipleInstances(true)\n  );\n  registerVersion(name, version, variant);\n  // BUILD_TARGET will be replaced by values like esm5, esm2017, cjs5, etc during the compilation\n  registerVersion(name, version, '__BUILD_TARGET__');\n}\n","function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nexport default function _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}","import unsupportedIterableToArray from \"./unsupportedIterableToArray.js\";\nexport default function _createForOfIteratorHelper(o, allowArrayLike) {\n  var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"];\n\n  if (!it) {\n    if (Array.isArray(o) || (it = unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n\n      var F = function F() {};\n\n      return {\n        s: F,\n        n: function n() {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function e(_e) {\n          throw _e;\n        },\n        f: F\n      };\n    }\n\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n\n  var normalCompletion = true,\n      didErr = false,\n      err;\n  return {\n    s: function s() {\n      it = it.call(o);\n    },\n    n: function n() {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function e(_e2) {\n      didErr = true;\n      err = _e2;\n    },\n    f: function f() {\n      try {\n        if (!normalCompletion && it[\"return\"] != null) it[\"return\"]();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}","import _typeof from \"./typeof.js\";\nexport default function _regeneratorRuntime() {\n  \"use strict\";\n  /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */\n\n  _regeneratorRuntime = function _regeneratorRuntime() {\n    return exports;\n  };\n\n  var exports = {},\n      Op = Object.prototype,\n      hasOwn = Op.hasOwnProperty,\n      $Symbol = \"function\" == typeof Symbol ? Symbol : {},\n      iteratorSymbol = $Symbol.iterator || \"@@iterator\",\n      asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\",\n      toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\";\n\n  function define(obj, key, value) {\n    return Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: !0,\n      configurable: !0,\n      writable: !0\n    }), obj[key];\n  }\n\n  try {\n    define({}, \"\");\n  } catch (err) {\n    define = function define(obj, key, value) {\n      return obj[key] = value;\n    };\n  }\n\n  function wrap(innerFn, outerFn, self, tryLocsList) {\n    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator,\n        generator = Object.create(protoGenerator.prototype),\n        context = new Context(tryLocsList || []);\n    return generator._invoke = function (innerFn, self, context) {\n      var state = \"suspendedStart\";\n      return function (method, arg) {\n        if (\"executing\" === state) throw new Error(\"Generator is already running\");\n\n        if (\"completed\" === state) {\n          if (\"throw\" === method) throw arg;\n          return doneResult();\n        }\n\n        for (context.method = method, context.arg = arg;;) {\n          var delegate = context.delegate;\n\n          if (delegate) {\n            var delegateResult = maybeInvokeDelegate(delegate, context);\n\n            if (delegateResult) {\n              if (delegateResult === ContinueSentinel) continue;\n              return delegateResult;\n            }\n          }\n\n          if (\"next\" === context.method) context.sent = context._sent = context.arg;else if (\"throw\" === context.method) {\n            if (\"suspendedStart\" === state) throw state = \"completed\", context.arg;\n            context.dispatchException(context.arg);\n          } else \"return\" === context.method && context.abrupt(\"return\", context.arg);\n          state = \"executing\";\n          var record = tryCatch(innerFn, self, context);\n\n          if (\"normal\" === record.type) {\n            if (state = context.done ? \"completed\" : \"suspendedYield\", record.arg === ContinueSentinel) continue;\n            return {\n              value: record.arg,\n              done: context.done\n            };\n          }\n\n          \"throw\" === record.type && (state = \"completed\", context.method = \"throw\", context.arg = record.arg);\n        }\n      };\n    }(innerFn, self, context), generator;\n  }\n\n  function tryCatch(fn, obj, arg) {\n    try {\n      return {\n        type: \"normal\",\n        arg: fn.call(obj, arg)\n      };\n    } catch (err) {\n      return {\n        type: \"throw\",\n        arg: err\n      };\n    }\n  }\n\n  exports.wrap = wrap;\n  var ContinueSentinel = {};\n\n  function Generator() {}\n\n  function GeneratorFunction() {}\n\n  function GeneratorFunctionPrototype() {}\n\n  var IteratorPrototype = {};\n  define(IteratorPrototype, iteratorSymbol, function () {\n    return this;\n  });\n  var getProto = Object.getPrototypeOf,\n      NativeIteratorPrototype = getProto && getProto(getProto(values([])));\n  NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype);\n  var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype);\n\n  function defineIteratorMethods(prototype) {\n    [\"next\", \"throw\", \"return\"].forEach(function (method) {\n      define(prototype, method, function (arg) {\n        return this._invoke(method, arg);\n      });\n    });\n  }\n\n  function AsyncIterator(generator, PromiseImpl) {\n    function invoke(method, arg, resolve, reject) {\n      var record = tryCatch(generator[method], generator, arg);\n\n      if (\"throw\" !== record.type) {\n        var result = record.arg,\n            value = result.value;\n        return value && \"object\" == _typeof(value) && hasOwn.call(value, \"__await\") ? PromiseImpl.resolve(value.__await).then(function (value) {\n          invoke(\"next\", value, resolve, reject);\n        }, function (err) {\n          invoke(\"throw\", err, resolve, reject);\n        }) : PromiseImpl.resolve(value).then(function (unwrapped) {\n          result.value = unwrapped, resolve(result);\n        }, function (error) {\n          return invoke(\"throw\", error, resolve, reject);\n        });\n      }\n\n      reject(record.arg);\n    }\n\n    var previousPromise;\n\n    this._invoke = function (method, arg) {\n      function callInvokeWithMethodAndArg() {\n        return new PromiseImpl(function (resolve, reject) {\n          invoke(method, arg, resolve, reject);\n        });\n      }\n\n      return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();\n    };\n  }\n\n  function maybeInvokeDelegate(delegate, context) {\n    var method = delegate.iterator[context.method];\n\n    if (undefined === method) {\n      if (context.delegate = null, \"throw\" === context.method) {\n        if (delegate.iterator[\"return\"] && (context.method = \"return\", context.arg = undefined, maybeInvokeDelegate(delegate, context), \"throw\" === context.method)) return ContinueSentinel;\n        context.method = \"throw\", context.arg = new TypeError(\"The iterator does not provide a 'throw' method\");\n      }\n\n      return ContinueSentinel;\n    }\n\n    var record = tryCatch(method, delegate.iterator, context.arg);\n    if (\"throw\" === record.type) return context.method = \"throw\", context.arg = record.arg, context.delegate = null, ContinueSentinel;\n    var info = record.arg;\n    return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, \"return\" !== context.method && (context.method = \"next\", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = \"throw\", context.arg = new TypeError(\"iterator result is not an object\"), context.delegate = null, ContinueSentinel);\n  }\n\n  function pushTryEntry(locs) {\n    var entry = {\n      tryLoc: locs[0]\n    };\n    1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry);\n  }\n\n  function resetTryEntry(entry) {\n    var record = entry.completion || {};\n    record.type = \"normal\", delete record.arg, entry.completion = record;\n  }\n\n  function Context(tryLocsList) {\n    this.tryEntries = [{\n      tryLoc: \"root\"\n    }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0);\n  }\n\n  function values(iterable) {\n    if (iterable) {\n      var iteratorMethod = iterable[iteratorSymbol];\n      if (iteratorMethod) return iteratorMethod.call(iterable);\n      if (\"function\" == typeof iterable.next) return iterable;\n\n      if (!isNaN(iterable.length)) {\n        var i = -1,\n            next = function next() {\n          for (; ++i < iterable.length;) {\n            if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next;\n          }\n\n          return next.value = undefined, next.done = !0, next;\n        };\n\n        return next.next = next;\n      }\n    }\n\n    return {\n      next: doneResult\n    };\n  }\n\n  function doneResult() {\n    return {\n      value: undefined,\n      done: !0\n    };\n  }\n\n  return GeneratorFunction.prototype = GeneratorFunctionPrototype, define(Gp, \"constructor\", GeneratorFunctionPrototype), define(GeneratorFunctionPrototype, \"constructor\", GeneratorFunction), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, \"GeneratorFunction\"), exports.isGeneratorFunction = function (genFun) {\n    var ctor = \"function\" == typeof genFun && genFun.constructor;\n    return !!ctor && (ctor === GeneratorFunction || \"GeneratorFunction\" === (ctor.displayName || ctor.name));\n  }, exports.mark = function (genFun) {\n    return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, \"GeneratorFunction\")), genFun.prototype = Object.create(Gp), genFun;\n  }, exports.awrap = function (arg) {\n    return {\n      __await: arg\n    };\n  }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () {\n    return this;\n  }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) {\n    void 0 === PromiseImpl && (PromiseImpl = Promise);\n    var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl);\n    return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) {\n      return result.done ? result.value : iter.next();\n    });\n  }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, \"Generator\"), define(Gp, iteratorSymbol, function () {\n    return this;\n  }), define(Gp, \"toString\", function () {\n    return \"[object Generator]\";\n  }), exports.keys = function (object) {\n    var keys = [];\n\n    for (var key in object) {\n      keys.push(key);\n    }\n\n    return keys.reverse(), function next() {\n      for (; keys.length;) {\n        var key = keys.pop();\n        if (key in object) return next.value = key, next.done = !1, next;\n      }\n\n      return next.done = !0, next;\n    };\n  }, exports.values = values, Context.prototype = {\n    constructor: Context,\n    reset: function reset(skipTempReset) {\n      if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) {\n        \"t\" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined);\n      }\n    },\n    stop: function stop() {\n      this.done = !0;\n      var rootRecord = this.tryEntries[0].completion;\n      if (\"throw\" === rootRecord.type) throw rootRecord.arg;\n      return this.rval;\n    },\n    dispatchException: function dispatchException(exception) {\n      if (this.done) throw exception;\n      var context = this;\n\n      function handle(loc, caught) {\n        return record.type = \"throw\", record.arg = exception, context.next = loc, caught && (context.method = \"next\", context.arg = undefined), !!caught;\n      }\n\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i],\n            record = entry.completion;\n        if (\"root\" === entry.tryLoc) return handle(\"end\");\n\n        if (entry.tryLoc <= this.prev) {\n          var hasCatch = hasOwn.call(entry, \"catchLoc\"),\n              hasFinally = hasOwn.call(entry, \"finallyLoc\");\n\n          if (hasCatch && hasFinally) {\n            if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0);\n            if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc);\n          } else if (hasCatch) {\n            if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0);\n          } else {\n            if (!hasFinally) throw new Error(\"try statement without catch or finally\");\n            if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc);\n          }\n        }\n      }\n    },\n    abrupt: function abrupt(type, arg) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n\n        if (entry.tryLoc <= this.prev && hasOwn.call(entry, \"finallyLoc\") && this.prev < entry.finallyLoc) {\n          var finallyEntry = entry;\n          break;\n        }\n      }\n\n      finallyEntry && (\"break\" === type || \"continue\" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null);\n      var record = finallyEntry ? finallyEntry.completion : {};\n      return record.type = type, record.arg = arg, finallyEntry ? (this.method = \"next\", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record);\n    },\n    complete: function complete(record, afterLoc) {\n      if (\"throw\" === record.type) throw record.arg;\n      return \"break\" === record.type || \"continue\" === record.type ? this.next = record.arg : \"return\" === record.type ? (this.rval = this.arg = record.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel;\n    },\n    finish: function finish(finallyLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel;\n      }\n    },\n    \"catch\": function _catch(tryLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n\n        if (entry.tryLoc === tryLoc) {\n          var record = entry.completion;\n\n          if (\"throw\" === record.type) {\n            var thrown = record.arg;\n            resetTryEntry(entry);\n          }\n\n          return thrown;\n        }\n      }\n\n      throw new Error(\"illegal catch attempt\");\n    },\n    delegateYield: function delegateYield(iterable, resultName, nextLoc) {\n      return this.delegate = {\n        iterator: values(iterable),\n        resultName: resultName,\n        nextLoc: nextLoc\n      }, \"next\" === this.method && (this.arg = undefined), ContinueSentinel;\n    }\n  }, exports;\n}","const instanceOfAny = (object, constructors) => constructors.some((c) => object instanceof c);\n\nlet idbProxyableTypes;\nlet cursorAdvanceMethods;\n// This is a function to prevent it throwing up in node environments.\nfunction getIdbProxyableTypes() {\n    return (idbProxyableTypes ||\n        (idbProxyableTypes = [\n            IDBDatabase,\n            IDBObjectStore,\n            IDBIndex,\n            IDBCursor,\n            IDBTransaction,\n        ]));\n}\n// This is a function to prevent it throwing up in node environments.\nfunction getCursorAdvanceMethods() {\n    return (cursorAdvanceMethods ||\n        (cursorAdvanceMethods = [\n            IDBCursor.prototype.advance,\n            IDBCursor.prototype.continue,\n            IDBCursor.prototype.continuePrimaryKey,\n        ]));\n}\nconst cursorRequestMap = new WeakMap();\nconst transactionDoneMap = new WeakMap();\nconst transactionStoreNamesMap = new WeakMap();\nconst transformCache = new WeakMap();\nconst reverseTransformCache = new WeakMap();\nfunction promisifyRequest(request) {\n    const promise = new Promise((resolve, reject) => {\n        const unlisten = () => {\n            request.removeEventListener('success', success);\n            request.removeEventListener('error', error);\n        };\n        const success = () => {\n            resolve(wrap(request.result));\n            unlisten();\n        };\n        const error = () => {\n            reject(request.error);\n            unlisten();\n        };\n        request.addEventListener('success', success);\n        request.addEventListener('error', error);\n    });\n    promise\n        .then((value) => {\n        // Since cursoring reuses the IDBRequest (*sigh*), we cache it for later retrieval\n        // (see wrapFunction).\n        if (value instanceof IDBCursor) {\n            cursorRequestMap.set(value, request);\n        }\n        // Catching to avoid \"Uncaught Promise exceptions\"\n    })\n        .catch(() => { });\n    // This mapping exists in reverseTransformCache but doesn't doesn't exist in transformCache. This\n    // is because we create many promises from a single IDBRequest.\n    reverseTransformCache.set(promise, request);\n    return promise;\n}\nfunction cacheDonePromiseForTransaction(tx) {\n    // Early bail if we've already created a done promise for this transaction.\n    if (transactionDoneMap.has(tx))\n        return;\n    const done = new Promise((resolve, reject) => {\n        const unlisten = () => {\n            tx.removeEventListener('complete', complete);\n            tx.removeEventListener('error', error);\n            tx.removeEventListener('abort', error);\n        };\n        const complete = () => {\n            resolve();\n            unlisten();\n        };\n        const error = () => {\n            reject(tx.error || new DOMException('AbortError', 'AbortError'));\n            unlisten();\n        };\n        tx.addEventListener('complete', complete);\n        tx.addEventListener('error', error);\n        tx.addEventListener('abort', error);\n    });\n    // Cache it for later retrieval.\n    transactionDoneMap.set(tx, done);\n}\nlet idbProxyTraps = {\n    get(target, prop, receiver) {\n        if (target instanceof IDBTransaction) {\n            // Special handling for transaction.done.\n            if (prop === 'done')\n                return transactionDoneMap.get(target);\n            // Polyfill for objectStoreNames because of Edge.\n            if (prop === 'objectStoreNames') {\n                return target.objectStoreNames || transactionStoreNamesMap.get(target);\n            }\n            // Make tx.store return the only store in the transaction, or undefined if there are many.\n            if (prop === 'store') {\n                return receiver.objectStoreNames[1]\n                    ? undefined\n                    : receiver.objectStore(receiver.objectStoreNames[0]);\n            }\n        }\n        // Else transform whatever we get back.\n        return wrap(target[prop]);\n    },\n    set(target, prop, value) {\n        target[prop] = value;\n        return true;\n    },\n    has(target, prop) {\n        if (target instanceof IDBTransaction &&\n            (prop === 'done' || prop === 'store')) {\n            return true;\n        }\n        return prop in target;\n    },\n};\nfunction replaceTraps(callback) {\n    idbProxyTraps = callback(idbProxyTraps);\n}\nfunction wrapFunction(func) {\n    // Due to expected object equality (which is enforced by the caching in `wrap`), we\n    // only create one new func per func.\n    // Edge doesn't support objectStoreNames (booo), so we polyfill it here.\n    if (func === IDBDatabase.prototype.transaction &&\n        !('objectStoreNames' in IDBTransaction.prototype)) {\n        return function (storeNames, ...args) {\n            const tx = func.call(unwrap(this), storeNames, ...args);\n            transactionStoreNamesMap.set(tx, storeNames.sort ? storeNames.sort() : [storeNames]);\n            return wrap(tx);\n        };\n    }\n    // Cursor methods are special, as the behaviour is a little more different to standard IDB. In\n    // IDB, you advance the cursor and wait for a new 'success' on the IDBRequest that gave you the\n    // cursor. It's kinda like a promise that can resolve with many values. That doesn't make sense\n    // with real promises, so each advance methods returns a new promise for the cursor object, or\n    // undefined if the end of the cursor has been reached.\n    if (getCursorAdvanceMethods().includes(func)) {\n        return function (...args) {\n            // Calling the original function with the proxy as 'this' causes ILLEGAL INVOCATION, so we use\n            // the original object.\n            func.apply(unwrap(this), args);\n            return wrap(cursorRequestMap.get(this));\n        };\n    }\n    return function (...args) {\n        // Calling the original function with the proxy as 'this' causes ILLEGAL INVOCATION, so we use\n        // the original object.\n        return wrap(func.apply(unwrap(this), args));\n    };\n}\nfunction transformCachableValue(value) {\n    if (typeof value === 'function')\n        return wrapFunction(value);\n    // This doesn't return, it just creates a 'done' promise for the transaction,\n    // which is later returned for transaction.done (see idbObjectHandler).\n    if (value instanceof IDBTransaction)\n        cacheDonePromiseForTransaction(value);\n    if (instanceOfAny(value, getIdbProxyableTypes()))\n        return new Proxy(value, idbProxyTraps);\n    // Return the same value back if we're not going to transform it.\n    return value;\n}\nfunction wrap(value) {\n    // We sometimes generate multiple promises from a single IDBRequest (eg when cursoring), because\n    // IDB is weird and a single IDBRequest can yield many responses, so these can't be cached.\n    if (value instanceof IDBRequest)\n        return promisifyRequest(value);\n    // If we've already transformed this value before, reuse the transformed value.\n    // This is faster, but it also provides object equality.\n    if (transformCache.has(value))\n        return transformCache.get(value);\n    const newValue = transformCachableValue(value);\n    // Not all types are transformed.\n    // These may be primitive types, so they can't be WeakMap keys.\n    if (newValue !== value) {\n        transformCache.set(value, newValue);\n        reverseTransformCache.set(newValue, value);\n    }\n    return newValue;\n}\nconst unwrap = (value) => reverseTransformCache.get(value);\n\nexport { reverseTransformCache as a, instanceOfAny as i, replaceTraps as r, unwrap as u, wrap as w };\n","import { w as wrap, r as replaceTraps } from './wrap-idb-value.js';\nexport { u as unwrap, w as wrap } from './wrap-idb-value.js';\n\n/**\n * Open a database.\n *\n * @param name Name of the database.\n * @param version Schema version.\n * @param callbacks Additional callbacks.\n */\nfunction openDB(name, version, { blocked, upgrade, blocking, terminated } = {}) {\n    const request = indexedDB.open(name, version);\n    const openPromise = wrap(request);\n    if (upgrade) {\n        request.addEventListener('upgradeneeded', (event) => {\n            upgrade(wrap(request.result), event.oldVersion, event.newVersion, wrap(request.transaction));\n        });\n    }\n    if (blocked)\n        request.addEventListener('blocked', () => blocked());\n    openPromise\n        .then((db) => {\n        if (terminated)\n            db.addEventListener('close', () => terminated());\n        if (blocking)\n            db.addEventListener('versionchange', () => blocking());\n    })\n        .catch(() => { });\n    return openPromise;\n}\n/**\n * Delete a database.\n *\n * @param name Name of the database.\n */\nfunction deleteDB(name, { blocked } = {}) {\n    const request = indexedDB.deleteDatabase(name);\n    if (blocked)\n        request.addEventListener('blocked', () => blocked());\n    return wrap(request).then(() => undefined);\n}\n\nconst readMethods = ['get', 'getKey', 'getAll', 'getAllKeys', 'count'];\nconst writeMethods = ['put', 'add', 'delete', 'clear'];\nconst cachedMethods = new Map();\nfunction getMethod(target, prop) {\n    if (!(target instanceof IDBDatabase &&\n        !(prop in target) &&\n        typeof prop === 'string')) {\n        return;\n    }\n    if (cachedMethods.get(prop))\n        return cachedMethods.get(prop);\n    const targetFuncName = prop.replace(/FromIndex$/, '');\n    const useIndex = prop !== targetFuncName;\n    const isWrite = writeMethods.includes(targetFuncName);\n    if (\n    // Bail if the target doesn't exist on the target. Eg, getAll isn't in Edge.\n    !(targetFuncName in (useIndex ? IDBIndex : IDBObjectStore).prototype) ||\n        !(isWrite || readMethods.includes(targetFuncName))) {\n        return;\n    }\n    const method = async function (storeName, ...args) {\n        // isWrite ? 'readwrite' : undefined gzipps better, but fails in Edge :(\n        const tx = this.transaction(storeName, isWrite ? 'readwrite' : 'readonly');\n        let target = tx.store;\n        if (useIndex)\n            target = target.index(args.shift());\n        // Must reject if op rejects.\n        // If it's a write operation, must reject if tx.done rejects.\n        // Must reject with op rejection first.\n        // Must resolve with op value.\n        // Must handle both promises (no unhandled rejections)\n        return (await Promise.all([\n            target[targetFuncName](...args),\n            isWrite && tx.done,\n        ]))[0];\n    };\n    cachedMethods.set(prop, method);\n    return method;\n}\nreplaceTraps((oldTraps) => ({\n    ...oldTraps,\n    get: (target, prop, receiver) => getMethod(target, prop) || oldTraps.get(target, prop, receiver),\n    has: (target, prop) => !!getMethod(target, prop) || oldTraps.has(target, prop),\n}));\n\nexport { deleteDB, openDB };\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  ComponentContainer,\n  ComponentType,\n  Provider,\n  Name\n} from '@firebase/component';\nimport { PlatformLoggerService, VersionService } from './types';\n\nexport class PlatformLoggerServiceImpl implements PlatformLoggerService {\n  constructor(private readonly container: ComponentContainer) {}\n  // In initial implementation, this will be called by installations on\n  // auth token refresh, and installations will send this string.\n  getPlatformInfoString(): string {\n    const providers = this.container.getProviders();\n    // Loop through providers and get library/version pairs from any that are\n    // version components.\n    return providers\n      .map(provider => {\n        if (isVersionServiceProvider(provider)) {\n          const service = provider.getImmediate() as VersionService;\n          return `${service.library}/${service.version}`;\n        } else {\n          return null;\n        }\n      })\n      .filter(logString => logString)\n      .join(' ');\n  }\n}\n/**\n *\n * @param provider check if this provider provides a VersionService\n *\n * NOTE: Using Provider<'app-version'> is a hack to indicate that the provider\n * provides VersionService. The provider is not necessarily a 'app-version'\n * provider.\n */\nfunction isVersionServiceProvider(provider: Provider<Name>): boolean {\n  const component = provider.getComponent();\n  return component?.type === ComponentType.VERSION;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Logger } from '@firebase/logger';\n\nexport const logger = new Logger('@firebase/app');\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { name as appName } from '../package.json';\nimport { name as appCompatName } from '../../app-compat/package.json';\nimport { name as analyticsCompatName } from '../../../packages/analytics-compat/package.json';\nimport { name as analyticsName } from '../../../packages/analytics/package.json';\nimport { name as appCheckCompatName } from '../../../packages/app-check-compat/package.json';\nimport { name as appCheckName } from '../../../packages/app-check/package.json';\nimport { name as authName } from '../../../packages/auth/package.json';\nimport { name as authCompatName } from '../../../packages/auth-compat/package.json';\nimport { name as databaseName } from '../../../packages/database/package.json';\nimport { name as databaseCompatName } from '../../../packages/database-compat/package.json';\nimport { name as functionsName } from '../../../packages/functions/package.json';\nimport { name as functionsCompatName } from '../../../packages/functions-compat/package.json';\nimport { name as installationsName } from '../../../packages/installations/package.json';\nimport { name as installationsCompatName } from '../../../packages/installations-compat/package.json';\nimport { name as messagingName } from '../../../packages/messaging/package.json';\nimport { name as messagingCompatName } from '../../../packages/messaging-compat/package.json';\nimport { name as performanceName } from '../../../packages/performance/package.json';\nimport { name as performanceCompatName } from '../../../packages/performance-compat/package.json';\nimport { name as remoteConfigName } from '../../../packages/remote-config/package.json';\nimport { name as remoteConfigCompatName } from '../../../packages/remote-config-compat/package.json';\nimport { name as storageName } from '../../../packages/storage/package.json';\nimport { name as storageCompatName } from '../../../packages/storage-compat/package.json';\nimport { name as firestoreName } from '../../../packages/firestore/package.json';\nimport { name as firestoreCompatName } from '../../../packages/firestore-compat/package.json';\nimport { name as packageName } from '../../../packages/firebase/package.json';\n\n/**\n * The default app name\n *\n * @internal\n */\nexport const DEFAULT_ENTRY_NAME = '[DEFAULT]';\n\nexport const PLATFORM_LOG_STRING = {\n  [appName]: 'fire-core',\n  [appCompatName]: 'fire-core-compat',\n  [analyticsName]: 'fire-analytics',\n  [analyticsCompatName]: 'fire-analytics-compat',\n  [appCheckName]: 'fire-app-check',\n  [appCheckCompatName]: 'fire-app-check-compat',\n  [authName]: 'fire-auth',\n  [authCompatName]: 'fire-auth-compat',\n  [databaseName]: 'fire-rtdb',\n  [databaseCompatName]: 'fire-rtdb-compat',\n  [functionsName]: 'fire-fn',\n  [functionsCompatName]: 'fire-fn-compat',\n  [installationsName]: 'fire-iid',\n  [installationsCompatName]: 'fire-iid-compat',\n  [messagingName]: 'fire-fcm',\n  [messagingCompatName]: 'fire-fcm-compat',\n  [performanceName]: 'fire-perf',\n  [performanceCompatName]: 'fire-perf-compat',\n  [remoteConfigName]: 'fire-rc',\n  [remoteConfigCompatName]: 'fire-rc-compat',\n  [storageName]: 'fire-gcs',\n  [storageCompatName]: 'fire-gcs-compat',\n  [firestoreName]: 'fire-fst',\n  [firestoreCompatName]: 'fire-fst-compat',\n  'fire-js': 'fire-js', // Platform identifier for JS SDK.\n  [packageName]: 'fire-js-all'\n} as const;\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseApp } from './public-types';\nimport { Component, Provider, Name } from '@firebase/component';\nimport { logger } from './logger';\nimport { DEFAULT_ENTRY_NAME } from './constants';\nimport { FirebaseAppImpl } from './firebaseApp';\n\n/**\n * @internal\n */\nexport const _apps = new Map<string, FirebaseApp>();\n\n/**\n * Registered components.\n *\n * @internal\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport const _components = new Map<string, Component<any>>();\n\n/**\n * @param component - the component being added to this app's container\n *\n * @internal\n */\nexport function _addComponent<T extends Name>(\n  app: FirebaseApp,\n  component: Component<T>\n): void {\n  try {\n    (app as FirebaseAppImpl).container.addComponent(component);\n  } catch (e) {\n    logger.debug(\n      `Component ${component.name} failed to register with FirebaseApp ${app.name}`,\n      e\n    );\n  }\n}\n\n/**\n *\n * @internal\n */\nexport function _addOrOverwriteComponent(\n  app: FirebaseApp,\n  component: Component\n): void {\n  (app as FirebaseAppImpl).container.addOrOverwriteComponent(component);\n}\n\n/**\n *\n * @param component - the component to register\n * @returns whether or not the component is registered successfully\n *\n * @internal\n */\nexport function _registerComponent<T extends Name>(\n  component: Component<T>\n): boolean {\n  const componentName = component.name;\n  if (_components.has(componentName)) {\n    logger.debug(\n      `There were multiple attempts to register component ${componentName}.`\n    );\n\n    return false;\n  }\n\n  _components.set(componentName, component);\n\n  // add the component to existing app instances\n  for (const app of _apps.values()) {\n    _addComponent(app as FirebaseAppImpl, component);\n  }\n\n  return true;\n}\n\n/**\n *\n * @param app - FirebaseApp instance\n * @param name - service name\n *\n * @returns the provider for the service with the matching name\n *\n * @internal\n */\nexport function _getProvider<T extends Name>(\n  app: FirebaseApp,\n  name: T\n): Provider<T> {\n  const heartbeatController = (app as FirebaseAppImpl).container\n    .getProvider('heartbeat')\n    .getImmediate({ optional: true });\n  if (heartbeatController) {\n    void heartbeatController.triggerHeartbeat();\n  }\n  return (app as FirebaseAppImpl).container.getProvider(name);\n}\n\n/**\n *\n * @param app - FirebaseApp instance\n * @param name - service name\n * @param instanceIdentifier - service instance identifier in case the service supports multiple instances\n *\n * @internal\n */\nexport function _removeServiceInstance<T extends Name>(\n  app: FirebaseApp,\n  name: T,\n  instanceIdentifier: string = DEFAULT_ENTRY_NAME\n): void {\n  _getProvider(app, name).clearInstance(instanceIdentifier);\n}\n\n/**\n * Test only\n *\n * @internal\n */\nexport function _clearComponents(): void {\n  _components.clear();\n}\n\n/**\n * Exported in order to be used in app-compat package\n */\nexport { DEFAULT_ENTRY_NAME as _DEFAULT_ENTRY_NAME };\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ErrorFactory, ErrorMap } from '@firebase/util';\n\nexport const enum AppError {\n  NO_APP = 'no-app',\n  BAD_APP_NAME = 'bad-app-name',\n  DUPLICATE_APP = 'duplicate-app',\n  APP_DELETED = 'app-deleted',\n  NO_OPTIONS = 'no-options',\n  INVALID_APP_ARGUMENT = 'invalid-app-argument',\n  INVALID_LOG_ARGUMENT = 'invalid-log-argument',\n  IDB_OPEN = 'idb-open',\n  IDB_GET = 'idb-get',\n  IDB_WRITE = 'idb-set',\n  IDB_DELETE = 'idb-delete'\n}\n\nconst ERRORS: ErrorMap<AppError> = {\n  [AppError.NO_APP]:\n    \"No Firebase App '{$appName}' has been created - \" +\n    'call Firebase App.initializeApp()',\n  [AppError.BAD_APP_NAME]: \"Illegal App name: '{$appName}\",\n  [AppError.DUPLICATE_APP]:\n    \"Firebase App named '{$appName}' already exists with different options or config\",\n  [AppError.APP_DELETED]: \"Firebase App named '{$appName}' already deleted\",\n  [AppError.NO_OPTIONS]:\n    'Need to provide options, when not being deployed to hosting via source.',\n  [AppError.INVALID_APP_ARGUMENT]:\n    'firebase.{$appName}() takes either no argument or a ' +\n    'Firebase App instance.',\n  [AppError.INVALID_LOG_ARGUMENT]:\n    'First argument to `onLog` must be null or a function.',\n  [AppError.IDB_OPEN]:\n    'Error thrown when opening IndexedDB. Original error: {$originalErrorMessage}.',\n  [AppError.IDB_GET]:\n    'Error thrown when reading from IndexedDB. Original error: {$originalErrorMessage}.',\n  [AppError.IDB_WRITE]:\n    'Error thrown when writing to IndexedDB. Original error: {$originalErrorMessage}.',\n  [AppError.IDB_DELETE]:\n    'Error thrown when deleting from IndexedDB. Original error: {$originalErrorMessage}.'\n};\n\ninterface ErrorParams {\n  [AppError.NO_APP]: { appName: string };\n  [AppError.BAD_APP_NAME]: { appName: string };\n  [AppError.DUPLICATE_APP]: { appName: string };\n  [AppError.APP_DELETED]: { appName: string };\n  [AppError.INVALID_APP_ARGUMENT]: { appName: string };\n  [AppError.IDB_OPEN]: { originalErrorMessage?: string };\n  [AppError.IDB_GET]: { originalErrorMessage?: string };\n  [AppError.IDB_WRITE]: { originalErrorMessage?: string };\n  [AppError.IDB_DELETE]: { originalErrorMessage?: string };\n}\n\nexport const ERROR_FACTORY = new ErrorFactory<AppError, ErrorParams>(\n  'app',\n  'Firebase',\n  ERRORS\n);\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  FirebaseApp,\n  FirebaseOptions,\n  FirebaseAppSettings\n} from './public-types';\nimport {\n  ComponentContainer,\n  Component,\n  ComponentType\n} from '@firebase/component';\nimport { ERROR_FACTORY, AppError } from './errors';\n\nexport class FirebaseAppImpl implements FirebaseApp {\n  private readonly _options: FirebaseOptions;\n  private readonly _name: string;\n  /**\n   * Original config values passed in as a constructor parameter.\n   * It is only used to compare with another config object to support idempotent initializeApp().\n   *\n   * Updating automaticDataCollectionEnabled on the App instance will not change its value in _config.\n   */\n  private readonly _config: Required<FirebaseAppSettings>;\n  private _automaticDataCollectionEnabled: boolean;\n  private _isDeleted = false;\n  private readonly _container: ComponentContainer;\n\n  constructor(\n    options: FirebaseOptions,\n    config: Required<FirebaseAppSettings>,\n    container: ComponentContainer\n  ) {\n    this._options = { ...options };\n    this._config = { ...config };\n    this._name = config.name;\n    this._automaticDataCollectionEnabled =\n      config.automaticDataCollectionEnabled;\n    this._container = container;\n    this.container.addComponent(\n      new Component('app', () => this, ComponentType.PUBLIC)\n    );\n  }\n\n  get automaticDataCollectionEnabled(): boolean {\n    this.checkDestroyed();\n    return this._automaticDataCollectionEnabled;\n  }\n\n  set automaticDataCollectionEnabled(val: boolean) {\n    this.checkDestroyed();\n    this._automaticDataCollectionEnabled = val;\n  }\n\n  get name(): string {\n    this.checkDestroyed();\n    return this._name;\n  }\n\n  get options(): FirebaseOptions {\n    this.checkDestroyed();\n    return this._options;\n  }\n\n  get config(): Required<FirebaseAppSettings> {\n    this.checkDestroyed();\n    return this._config;\n  }\n\n  get container(): ComponentContainer {\n    return this._container;\n  }\n\n  get isDeleted(): boolean {\n    return this._isDeleted;\n  }\n\n  set isDeleted(val: boolean) {\n    this._isDeleted = val;\n  }\n\n  /**\n   * This function will throw an Error if the App has already been deleted -\n   * use before performing API actions on the App.\n   */\n  private checkDestroyed(): void {\n    if (this.isDeleted) {\n      throw ERROR_FACTORY.create(AppError.APP_DELETED, { appName: this._name });\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  FirebaseApp,\n  FirebaseOptions,\n  FirebaseAppSettings\n} from './public-types';\nimport { DEFAULT_ENTRY_NAME, PLATFORM_LOG_STRING } from './constants';\nimport { ERROR_FACTORY, AppError } from './errors';\nimport {\n  ComponentContainer,\n  Component,\n  Name,\n  ComponentType\n} from '@firebase/component';\nimport { version } from '../../firebase/package.json';\nimport { FirebaseAppImpl } from './firebaseApp';\nimport { _apps, _components, _registerComponent } from './internal';\nimport { logger } from './logger';\nimport {\n  LogLevelString,\n  setLogLevel as setLogLevelImpl,\n  LogCallback,\n  LogOptions,\n  setUserLogHandler\n} from '@firebase/logger';\nimport { deepEqual, getDefaultAppConfig } from '@firebase/util';\n\nexport { FirebaseError } from '@firebase/util';\n\n/**\n * The current SDK version.\n *\n * @public\n */\nexport const SDK_VERSION = version;\n\n/**\n * Creates and initializes a {@link @firebase/app#FirebaseApp} instance.\n *\n * See\n * {@link\n *   https://firebase.google.com/docs/web/setup#add_firebase_to_your_app\n *   | Add Firebase to your app} and\n * {@link\n *   https://firebase.google.com/docs/web/setup#multiple-projects\n *   | Initialize multiple projects} for detailed documentation.\n *\n * @example\n * ```javascript\n *\n * // Initialize default app\n * // Retrieve your own options values by adding a web app on\n * // https://console.firebase.google.com\n * initializeApp({\n *   apiKey: \"AIza....\",                             // Auth / General Use\n *   authDomain: \"YOUR_APP.firebaseapp.com\",         // Auth with popup/redirect\n *   databaseURL: \"https://YOUR_APP.firebaseio.com\", // Realtime Database\n *   storageBucket: \"YOUR_APP.appspot.com\",          // Storage\n *   messagingSenderId: \"123456789\"                  // Cloud Messaging\n * });\n * ```\n *\n * @example\n * ```javascript\n *\n * // Initialize another app\n * const otherApp = initializeApp({\n *   databaseURL: \"https://<OTHER_DATABASE_NAME>.firebaseio.com\",\n *   storageBucket: \"<OTHER_STORAGE_BUCKET>.appspot.com\"\n * }, \"otherApp\");\n * ```\n *\n * @param options - Options to configure the app's services.\n * @param name - Optional name of the app to initialize. If no name\n *   is provided, the default is `\"[DEFAULT]\"`.\n *\n * @returns The initialized app.\n *\n * @public\n */\nexport function initializeApp(\n  options: FirebaseOptions,\n  name?: string\n): FirebaseApp;\n/**\n * Creates and initializes a FirebaseApp instance.\n *\n * @param options - Options to configure the app's services.\n * @param config - FirebaseApp Configuration\n *\n * @public\n */\nexport function initializeApp(\n  options: FirebaseOptions,\n  config?: FirebaseAppSettings\n): FirebaseApp;\n/**\n * Creates and initializes a FirebaseApp instance.\n *\n * @public\n */\nexport function initializeApp(): FirebaseApp;\nexport function initializeApp(\n  _options?: FirebaseOptions,\n  rawConfig = {}\n): FirebaseApp {\n  let options = _options;\n\n  if (typeof rawConfig !== 'object') {\n    const name = rawConfig;\n    rawConfig = { name };\n  }\n\n  const config: Required<FirebaseAppSettings> = {\n    name: DEFAULT_ENTRY_NAME,\n    automaticDataCollectionEnabled: false,\n    ...rawConfig\n  };\n  const name = config.name;\n\n  if (typeof name !== 'string' || !name) {\n    throw ERROR_FACTORY.create(AppError.BAD_APP_NAME, {\n      appName: String(name)\n    });\n  }\n\n  options ||= getDefaultAppConfig();\n\n  if (!options) {\n    throw ERROR_FACTORY.create(AppError.NO_OPTIONS);\n  }\n\n  const existingApp = _apps.get(name) as FirebaseAppImpl;\n  if (existingApp) {\n    // return the existing app if options and config deep equal the ones in the existing app.\n    if (\n      deepEqual(options, existingApp.options) &&\n      deepEqual(config, existingApp.config)\n    ) {\n      return existingApp;\n    } else {\n      throw ERROR_FACTORY.create(AppError.DUPLICATE_APP, { appName: name });\n    }\n  }\n\n  const container = new ComponentContainer(name);\n  for (const component of _components.values()) {\n    container.addComponent(component);\n  }\n\n  const newApp = new FirebaseAppImpl(options, config, container);\n\n  _apps.set(name, newApp);\n\n  return newApp;\n}\n\n/**\n * Retrieves a {@link @firebase/app#FirebaseApp} instance.\n *\n * When called with no arguments, the default app is returned. When an app name\n * is provided, the app corresponding to that name is returned.\n *\n * An exception is thrown if the app being retrieved has not yet been\n * initialized.\n *\n * @example\n * ```javascript\n * // Return the default app\n * const app = getApp();\n * ```\n *\n * @example\n * ```javascript\n * // Return a named app\n * const otherApp = getApp(\"otherApp\");\n * ```\n *\n * @param name - Optional name of the app to return. If no name is\n *   provided, the default is `\"[DEFAULT]\"`.\n *\n * @returns The app corresponding to the provided app name.\n *   If no app name is provided, the default app is returned.\n *\n * @public\n */\nexport function getApp(name: string = DEFAULT_ENTRY_NAME): FirebaseApp {\n  const app = _apps.get(name);\n  if (!app && name === DEFAULT_ENTRY_NAME) {\n    return initializeApp();\n  }\n  if (!app) {\n    throw ERROR_FACTORY.create(AppError.NO_APP, { appName: name });\n  }\n\n  return app;\n}\n\n/**\n * A (read-only) array of all initialized apps.\n * @public\n */\nexport function getApps(): FirebaseApp[] {\n  return Array.from(_apps.values());\n}\n\n/**\n * Renders this app unusable and frees the resources of all associated\n * services.\n *\n * @example\n * ```javascript\n * deleteApp(app)\n *   .then(function() {\n *     console.log(\"App deleted successfully\");\n *   })\n *   .catch(function(error) {\n *     console.log(\"Error deleting app:\", error);\n *   });\n * ```\n *\n * @public\n */\nexport async function deleteApp(app: FirebaseApp): Promise<void> {\n  const name = app.name;\n  if (_apps.has(name)) {\n    _apps.delete(name);\n    await Promise.all(\n      (app as FirebaseAppImpl).container\n        .getProviders()\n        .map(provider => provider.delete())\n    );\n    (app as FirebaseAppImpl).isDeleted = true;\n  }\n}\n\n/**\n * Registers a library's name and version for platform logging purposes.\n * @param library - Name of 1p or 3p library (e.g. firestore, angularfire)\n * @param version - Current version of that library.\n * @param variant - Bundle variant, e.g., node, rn, etc.\n *\n * @public\n */\nexport function registerVersion(\n  libraryKeyOrName: string,\n  version: string,\n  variant?: string\n): void {\n  // TODO: We can use this check to whitelist strings when/if we set up\n  // a good whitelist system.\n  let library = PLATFORM_LOG_STRING[libraryKeyOrName] ?? libraryKeyOrName;\n  if (variant) {\n    library += `-${variant}`;\n  }\n  const libraryMismatch = library.match(/\\s|\\//);\n  const versionMismatch = version.match(/\\s|\\//);\n  if (libraryMismatch || versionMismatch) {\n    const warning = [\n      `Unable to register library \"${library}\" with version \"${version}\":`\n    ];\n    if (libraryMismatch) {\n      warning.push(\n        `library name \"${library}\" contains illegal characters (whitespace or \"/\")`\n      );\n    }\n    if (libraryMismatch && versionMismatch) {\n      warning.push('and');\n    }\n    if (versionMismatch) {\n      warning.push(\n        `version name \"${version}\" contains illegal characters (whitespace or \"/\")`\n      );\n    }\n    logger.warn(warning.join(' '));\n    return;\n  }\n  _registerComponent(\n    new Component(\n      `${library}-version` as Name,\n      () => ({ library, version }),\n      ComponentType.VERSION\n    )\n  );\n}\n\n/**\n * Sets log handler for all Firebase SDKs.\n * @param logCallback - An optional custom log handler that executes user code whenever\n * the Firebase SDK makes a logging call.\n *\n * @public\n */\nexport function onLog(\n  logCallback: LogCallback | null,\n  options?: LogOptions\n): void {\n  if (logCallback !== null && typeof logCallback !== 'function') {\n    throw ERROR_FACTORY.create(AppError.INVALID_LOG_ARGUMENT);\n  }\n  setUserLogHandler(logCallback, options);\n}\n\n/**\n * Sets log level for all Firebase SDKs.\n *\n * All of the log types above the current log level are captured (i.e. if\n * you set the log level to `info`, errors are logged, but `debug` and\n * `verbose` logs are not).\n *\n * @public\n */\nexport function setLogLevel(logLevel: LogLevelString): void {\n  setLogLevelImpl(logLevel);\n}\n","/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseError } from '@firebase/util';\nimport { DBSchema, openDB, IDBPDatabase } from 'idb';\nimport { AppError, ERROR_FACTORY } from './errors';\nimport { FirebaseApp } from './public-types';\nimport { HeartbeatsInIndexedDB } from './types';\nimport { logger } from './logger';\n\nconst DB_NAME = 'firebase-heartbeat-database';\nconst DB_VERSION = 1;\nconst STORE_NAME = 'firebase-heartbeat-store';\n\ninterface AppDB extends DBSchema {\n  'firebase-heartbeat-store': {\n    key: string;\n    value: HeartbeatsInIndexedDB;\n  };\n}\n\nlet dbPromise: Promise<IDBPDatabase<AppDB>> | null = null;\nfunction getDbPromise(): Promise<IDBPDatabase<AppDB>> {\n  if (!dbPromise) {\n    dbPromise = openDB<AppDB>(DB_NAME, DB_VERSION, {\n      upgrade: (db, oldVersion) => {\n        // We don't use 'break' in this switch statement, the fall-through\n        // behavior is what we want, because if there are multiple versions between\n        // the old version and the current version, we want ALL the migrations\n        // that correspond to those versions to run, not only the last one.\n        // eslint-disable-next-line default-case\n        switch (oldVersion) {\n          case 0:\n            db.createObjectStore(STORE_NAME);\n        }\n      }\n    }).catch(e => {\n      throw ERROR_FACTORY.create(AppError.IDB_OPEN, {\n        originalErrorMessage: e.message\n      });\n    });\n  }\n  return dbPromise;\n}\n\nexport async function readHeartbeatsFromIndexedDB(\n  app: FirebaseApp\n): Promise<HeartbeatsInIndexedDB | undefined> {\n  try {\n    const db = await getDbPromise();\n    return db\n      .transaction(STORE_NAME)\n      .objectStore(STORE_NAME)\n      .get(computeKey(app)) as Promise<HeartbeatsInIndexedDB | undefined>;\n  } catch (e) {\n    if (e instanceof FirebaseError) {\n      logger.warn(e.message);\n    } else {\n      const idbGetError = ERROR_FACTORY.create(AppError.IDB_GET, {\n        originalErrorMessage: (e as Error)?.message\n      });\n      logger.warn(idbGetError.message);\n    }\n  }\n}\n\nexport async function writeHeartbeatsToIndexedDB(\n  app: FirebaseApp,\n  heartbeatObject: HeartbeatsInIndexedDB\n): Promise<void> {\n  try {\n    const db = await getDbPromise();\n    const tx = db.transaction(STORE_NAME, 'readwrite');\n    const objectStore = tx.objectStore(STORE_NAME);\n    await objectStore.put(heartbeatObject, computeKey(app));\n    return tx.done;\n  } catch (e) {\n    if (e instanceof FirebaseError) {\n      logger.warn(e.message);\n    } else {\n      const idbGetError = ERROR_FACTORY.create(AppError.IDB_WRITE, {\n        originalErrorMessage: (e as Error)?.message\n      });\n      logger.warn(idbGetError.message);\n    }\n  }\n}\n\nfunction computeKey(app: FirebaseApp): string {\n  return `${app.name}!${app.options.appId}`;\n}\n","/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ComponentContainer } from '@firebase/component';\nimport {\n  base64urlEncodeWithoutPadding,\n  isIndexedDBAvailable,\n  validateIndexedDBOpenable\n} from '@firebase/util';\nimport {\n  readHeartbeatsFromIndexedDB,\n  writeHeartbeatsToIndexedDB\n} from './indexeddb';\nimport { FirebaseApp } from './public-types';\nimport {\n  HeartbeatsByUserAgent,\n  HeartbeatService,\n  HeartbeatsInIndexedDB,\n  HeartbeatStorage,\n  SingleDateHeartbeat\n} from './types';\n\nconst MAX_HEADER_BYTES = 1024;\n// 30 days\nconst STORED_HEARTBEAT_RETENTION_MAX_MILLIS = 30 * 24 * 60 * 60 * 1000;\n\nexport class HeartbeatServiceImpl implements HeartbeatService {\n  /**\n   * The persistence layer for heartbeats\n   * Leave public for easier testing.\n   */\n  _storage: HeartbeatStorageImpl;\n\n  /**\n   * In-memory cache for heartbeats, used by getHeartbeatsHeader() to generate\n   * the header string.\n   * Stores one record per date. This will be consolidated into the standard\n   * format of one record per user agent string before being sent as a header.\n   * Populated from indexedDB when the controller is instantiated and should\n   * be kept in sync with indexedDB.\n   * Leave public for easier testing.\n   */\n  _heartbeatsCache: HeartbeatsInIndexedDB | null = null;\n\n  /**\n   * the initialization promise for populating heartbeatCache.\n   * If getHeartbeatsHeader() is called before the promise resolves\n   * (hearbeatsCache == null), it should wait for this promise\n   * Leave public for easier testing.\n   */\n  _heartbeatsCachePromise: Promise<HeartbeatsInIndexedDB>;\n  constructor(private readonly container: ComponentContainer) {\n    const app = this.container.getProvider('app').getImmediate();\n    this._storage = new HeartbeatStorageImpl(app);\n    this._heartbeatsCachePromise = this._storage.read().then(result => {\n      this._heartbeatsCache = result;\n      return result;\n    });\n  }\n\n  /**\n   * Called to report a heartbeat. The function will generate\n   * a HeartbeatsByUserAgent object, update heartbeatsCache, and persist it\n   * to IndexedDB.\n   * Note that we only store one heartbeat per day. So if a heartbeat for today is\n   * already logged, subsequent calls to this function in the same day will be ignored.\n   */\n  async triggerHeartbeat(): Promise<void> {\n    const platformLogger = this.container\n      .getProvider('platform-logger')\n      .getImmediate();\n\n    // This is the \"Firebase user agent\" string from the platform logger\n    // service, not the browser user agent.\n    const agent = platformLogger.getPlatformInfoString();\n    const date = getUTCDateString();\n    if (this._heartbeatsCache === null) {\n      this._heartbeatsCache = await this._heartbeatsCachePromise;\n    }\n    // Do not store a heartbeat if one is already stored for this day\n    // or if a header has already been sent today.\n    if (\n      this._heartbeatsCache.lastSentHeartbeatDate === date ||\n      this._heartbeatsCache.heartbeats.some(\n        singleDateHeartbeat => singleDateHeartbeat.date === date\n      )\n    ) {\n      return;\n    } else {\n      // There is no entry for this date. Create one.\n      this._heartbeatsCache.heartbeats.push({ date, agent });\n    }\n    // Remove entries older than 30 days.\n    this._heartbeatsCache.heartbeats = this._heartbeatsCache.heartbeats.filter(\n      singleDateHeartbeat => {\n        const hbTimestamp = new Date(singleDateHeartbeat.date).valueOf();\n        const now = Date.now();\n        return now - hbTimestamp <= STORED_HEARTBEAT_RETENTION_MAX_MILLIS;\n      }\n    );\n    return this._storage.overwrite(this._heartbeatsCache);\n  }\n\n  /**\n   * Returns a base64 encoded string which can be attached to the heartbeat-specific header directly.\n   * It also clears all heartbeats from memory as well as in IndexedDB.\n   *\n   * NOTE: Consuming product SDKs should not send the header if this method\n   * returns an empty string.\n   */\n  async getHeartbeatsHeader(): Promise<string> {\n    if (this._heartbeatsCache === null) {\n      await this._heartbeatsCachePromise;\n    }\n    // If it's still null or the array is empty, there is no data to send.\n    if (\n      this._heartbeatsCache === null ||\n      this._heartbeatsCache.heartbeats.length === 0\n    ) {\n      return '';\n    }\n    const date = getUTCDateString();\n    // Extract as many heartbeats from the cache as will fit under the size limit.\n    const { heartbeatsToSend, unsentEntries } = extractHeartbeatsForHeader(\n      this._heartbeatsCache.heartbeats\n    );\n    const headerString = base64urlEncodeWithoutPadding(\n      JSON.stringify({ version: 2, heartbeats: heartbeatsToSend })\n    );\n    // Store last sent date to prevent another being logged/sent for the same day.\n    this._heartbeatsCache.lastSentHeartbeatDate = date;\n    if (unsentEntries.length > 0) {\n      // Store any unsent entries if they exist.\n      this._heartbeatsCache.heartbeats = unsentEntries;\n      // This seems more likely than emptying the array (below) to lead to some odd state\n      // since the cache isn't empty and this will be called again on the next request,\n      // and is probably safest if we await it.\n      await this._storage.overwrite(this._heartbeatsCache);\n    } else {\n      this._heartbeatsCache.heartbeats = [];\n      // Do not wait for this, to reduce latency.\n      void this._storage.overwrite(this._heartbeatsCache);\n    }\n    return headerString;\n  }\n}\n\nfunction getUTCDateString(): string {\n  const today = new Date();\n  // Returns date format 'YYYY-MM-DD'\n  return today.toISOString().substring(0, 10);\n}\n\nexport function extractHeartbeatsForHeader(\n  heartbeatsCache: SingleDateHeartbeat[],\n  maxSize = MAX_HEADER_BYTES\n): {\n  heartbeatsToSend: HeartbeatsByUserAgent[];\n  unsentEntries: SingleDateHeartbeat[];\n} {\n  // Heartbeats grouped by user agent in the standard format to be sent in\n  // the header.\n  const heartbeatsToSend: HeartbeatsByUserAgent[] = [];\n  // Single date format heartbeats that are not sent.\n  let unsentEntries = heartbeatsCache.slice();\n  for (const singleDateHeartbeat of heartbeatsCache) {\n    // Look for an existing entry with the same user agent.\n    const heartbeatEntry = heartbeatsToSend.find(\n      hb => hb.agent === singleDateHeartbeat.agent\n    );\n    if (!heartbeatEntry) {\n      // If no entry for this user agent exists, create one.\n      heartbeatsToSend.push({\n        agent: singleDateHeartbeat.agent,\n        dates: [singleDateHeartbeat.date]\n      });\n      if (countBytes(heartbeatsToSend) > maxSize) {\n        // If the header would exceed max size, remove the added heartbeat\n        // entry and stop adding to the header.\n        heartbeatsToSend.pop();\n        break;\n      }\n    } else {\n      heartbeatEntry.dates.push(singleDateHeartbeat.date);\n      // If the header would exceed max size, remove the added date\n      // and stop adding to the header.\n      if (countBytes(heartbeatsToSend) > maxSize) {\n        heartbeatEntry.dates.pop();\n        break;\n      }\n    }\n    // Pop unsent entry from queue. (Skipped if adding the entry exceeded\n    // quota and the loop breaks early.)\n    unsentEntries = unsentEntries.slice(1);\n  }\n  return {\n    heartbeatsToSend,\n    unsentEntries\n  };\n}\n\nexport class HeartbeatStorageImpl implements HeartbeatStorage {\n  private _canUseIndexedDBPromise: Promise<boolean>;\n  constructor(public app: FirebaseApp) {\n    this._canUseIndexedDBPromise = this.runIndexedDBEnvironmentCheck();\n  }\n  async runIndexedDBEnvironmentCheck(): Promise<boolean> {\n    if (!isIndexedDBAvailable()) {\n      return false;\n    } else {\n      return validateIndexedDBOpenable()\n        .then(() => true)\n        .catch(() => false);\n    }\n  }\n  /**\n   * Read all heartbeats.\n   */\n  async read(): Promise<HeartbeatsInIndexedDB> {\n    const canUseIndexedDB = await this._canUseIndexedDBPromise;\n    if (!canUseIndexedDB) {\n      return { heartbeats: [] };\n    } else {\n      const idbHeartbeatObject = await readHeartbeatsFromIndexedDB(this.app);\n      return idbHeartbeatObject || { heartbeats: [] };\n    }\n  }\n  // overwrite the storage with the provided heartbeats\n  async overwrite(heartbeatsObject: HeartbeatsInIndexedDB): Promise<void> {\n    const canUseIndexedDB = await this._canUseIndexedDBPromise;\n    if (!canUseIndexedDB) {\n      return;\n    } else {\n      const existingHeartbeatsObject = await this.read();\n      return writeHeartbeatsToIndexedDB(this.app, {\n        lastSentHeartbeatDate:\n          heartbeatsObject.lastSentHeartbeatDate ??\n          existingHeartbeatsObject.lastSentHeartbeatDate,\n        heartbeats: heartbeatsObject.heartbeats\n      });\n    }\n  }\n  // add heartbeats\n  async add(heartbeatsObject: HeartbeatsInIndexedDB): Promise<void> {\n    const canUseIndexedDB = await this._canUseIndexedDBPromise;\n    if (!canUseIndexedDB) {\n      return;\n    } else {\n      const existingHeartbeatsObject = await this.read();\n      return writeHeartbeatsToIndexedDB(this.app, {\n        lastSentHeartbeatDate:\n          heartbeatsObject.lastSentHeartbeatDate ??\n          existingHeartbeatsObject.lastSentHeartbeatDate,\n        heartbeats: [\n          ...existingHeartbeatsObject.heartbeats,\n          ...heartbeatsObject.heartbeats\n        ]\n      });\n    }\n  }\n}\n\n/**\n * Calculate bytes of a HeartbeatsByUserAgent array after being wrapped\n * in a platform logging header JSON object, stringified, and converted\n * to base 64.\n */\nexport function countBytes(heartbeatsCache: HeartbeatsByUserAgent[]): number {\n  // base64 has a restricted set of characters, all of which should be 1 byte.\n  return base64urlEncodeWithoutPadding(\n    // heartbeatsCache wrapper properties\n    JSON.stringify({ version: 2, heartbeats: heartbeatsCache })\n  ).length;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Component, ComponentType } from '@firebase/component';\nimport { PlatformLoggerServiceImpl } from './platformLoggerService';\nimport { name, version } from '../package.json';\nimport { _registerComponent } from './internal';\nimport { registerVersion } from './api';\nimport { HeartbeatServiceImpl } from './heartbeatService';\n\nexport function registerCoreComponents(variant?: string): void {\n  _registerComponent(\n    new Component(\n      'platform-logger',\n      container => new PlatformLoggerServiceImpl(container),\n      ComponentType.PRIVATE\n    )\n  );\n  _registerComponent(\n    new Component(\n      'heartbeat',\n      container => new HeartbeatServiceImpl(container),\n      ComponentType.PRIVATE\n    )\n  );\n\n  // Register `app` package.\n  registerVersion(name, version, variant);\n  // BUILD_TARGET will be replaced by values like esm5, esm2017, cjs5, etc during the compilation\n  registerVersion(name, version, '__BUILD_TARGET__');\n  // Register platform SDK identifier (no version).\n  registerVersion('fire-js', '');\n}\n","/**\n * Firebase App\n *\n * @remarks This package coordinates the communication between the different Firebase components\n * @packageDocumentation\n */\n\n/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { registerCoreComponents } from './registerCoreComponents';\n\nexport * from './api';\nexport * from './internal';\nexport * from './public-types';\n\nregisterCoreComponents('__RUNTIME_ENV__');\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport {\n  InstantiationMode,\n  InstanceFactory,\n  ComponentType,\n  Dictionary,\n  Name,\n  onInstanceCreatedCallback\n} from './types';\n\n/**\n * Component for service name T, e.g. `auth`, `auth-internal`\n */\nexport class Component<T extends Name = Name> {\n  multipleInstances = false;\n  /**\n   * Properties to be added to the service namespace\n   */\n  serviceProps: Dictionary = {};\n\n  instantiationMode = InstantiationMode.LAZY;\n\n  onInstanceCreated: onInstanceCreatedCallback<T> | null = null;\n\n  /**\n   *\n   * @param name The public service name, e.g. app, auth, firestore, database\n   * @param instanceFactory Service factory responsible for creating the public interface\n   * @param type whether the service provided by the component is public or private\n   */\n  constructor(\n    readonly name: T,\n    readonly instanceFactory: InstanceFactory<T>,\n    readonly type: ComponentType\n  ) {}\n\n  setInstantiationMode(mode: InstantiationMode): this {\n    this.instantiationMode = mode;\n    return this;\n  }\n\n  setMultipleInstances(multipleInstances: boolean): this {\n    this.multipleInstances = multipleInstances;\n    return this;\n  }\n\n  setServiceProps(props: Dictionary): this {\n    this.serviceProps = props;\n    return this;\n  }\n\n  setInstanceCreatedCallback(callback: onInstanceCreatedCallback<T>): this {\n    this.onInstanceCreated = callback;\n    return this;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport const DEFAULT_ENTRY_NAME = '[DEFAULT]';\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Deferred } from '@firebase/util';\nimport { ComponentContainer } from './component_container';\nimport { DEFAULT_ENTRY_NAME } from './constants';\nimport {\n  InitializeOptions,\n  InstantiationMode,\n  Name,\n  NameServiceMapping,\n  OnInitCallBack\n} from './types';\nimport { Component } from './component';\n\n/**\n * Provider for instance for service name T, e.g. 'auth', 'auth-internal'\n * NameServiceMapping[T] is an alias for the type of the instance\n */\nexport class Provider<T extends Name> {\n  private component: Component<T> | null = null;\n  private readonly instances: Map<string, NameServiceMapping[T]> = new Map();\n  private readonly instancesDeferred: Map<\n    string,\n    Deferred<NameServiceMapping[T]>\n  > = new Map();\n  private readonly instancesOptions: Map<string, Record<string, unknown>> =\n    new Map();\n  private onInitCallbacks: Map<string, Set<OnInitCallBack<T>>> = new Map();\n\n  constructor(\n    private readonly name: T,\n    private readonly container: ComponentContainer\n  ) {}\n\n  /**\n   * @param identifier A provider can provide mulitple instances of a service\n   * if this.component.multipleInstances is true.\n   */\n  get(identifier?: string): Promise<NameServiceMapping[T]> {\n    // if multipleInstances is not supported, use the default name\n    const normalizedIdentifier = this.normalizeInstanceIdentifier(identifier);\n\n    if (!this.instancesDeferred.has(normalizedIdentifier)) {\n      const deferred = new Deferred<NameServiceMapping[T]>();\n      this.instancesDeferred.set(normalizedIdentifier, deferred);\n\n      if (\n        this.isInitialized(normalizedIdentifier) ||\n        this.shouldAutoInitialize()\n      ) {\n        // initialize the service if it can be auto-initialized\n        try {\n          const instance = this.getOrInitializeService({\n            instanceIdentifier: normalizedIdentifier\n          });\n          if (instance) {\n            deferred.resolve(instance);\n          }\n        } catch (e) {\n          // when the instance factory throws an exception during get(), it should not cause\n          // a fatal error. We just return the unresolved promise in this case.\n        }\n      }\n    }\n\n    return this.instancesDeferred.get(normalizedIdentifier)!.promise;\n  }\n\n  /**\n   *\n   * @param options.identifier A provider can provide mulitple instances of a service\n   * if this.component.multipleInstances is true.\n   * @param options.optional If optional is false or not provided, the method throws an error when\n   * the service is not immediately available.\n   * If optional is true, the method returns null if the service is not immediately available.\n   */\n  getImmediate(options: {\n    identifier?: string;\n    optional: true;\n  }): NameServiceMapping[T] | null;\n  getImmediate(options?: {\n    identifier?: string;\n    optional?: false;\n  }): NameServiceMapping[T];\n  getImmediate(options?: {\n    identifier?: string;\n    optional?: boolean;\n  }): NameServiceMapping[T] | null {\n    // if multipleInstances is not supported, use the default name\n    const normalizedIdentifier = this.normalizeInstanceIdentifier(\n      options?.identifier\n    );\n    const optional = options?.optional ?? false;\n\n    if (\n      this.isInitialized(normalizedIdentifier) ||\n      this.shouldAutoInitialize()\n    ) {\n      try {\n        return this.getOrInitializeService({\n          instanceIdentifier: normalizedIdentifier\n        });\n      } catch (e) {\n        if (optional) {\n          return null;\n        } else {\n          throw e;\n        }\n      }\n    } else {\n      // In case a component is not initialized and should/can not be auto-initialized at the moment, return null if the optional flag is set, or throw\n      if (optional) {\n        return null;\n      } else {\n        throw Error(`Service ${this.name} is not available`);\n      }\n    }\n  }\n\n  getComponent(): Component<T> | null {\n    return this.component;\n  }\n\n  setComponent(component: Component<T>): void {\n    if (component.name !== this.name) {\n      throw Error(\n        `Mismatching Component ${component.name} for Provider ${this.name}.`\n      );\n    }\n\n    if (this.component) {\n      throw Error(`Component for ${this.name} has already been provided`);\n    }\n\n    this.component = component;\n\n    // return early without attempting to initialize the component if the component requires explicit initialization (calling `Provider.initialize()`)\n    if (!this.shouldAutoInitialize()) {\n      return;\n    }\n\n    // if the service is eager, initialize the default instance\n    if (isComponentEager(component)) {\n      try {\n        this.getOrInitializeService({ instanceIdentifier: DEFAULT_ENTRY_NAME });\n      } catch (e) {\n        // when the instance factory for an eager Component throws an exception during the eager\n        // initialization, it should not cause a fatal error.\n        // TODO: Investigate if we need to make it configurable, because some component may want to cause\n        // a fatal error in this case?\n      }\n    }\n\n    // Create service instances for the pending promises and resolve them\n    // NOTE: if this.multipleInstances is false, only the default instance will be created\n    // and all promises with resolve with it regardless of the identifier.\n    for (const [\n      instanceIdentifier,\n      instanceDeferred\n    ] of this.instancesDeferred.entries()) {\n      const normalizedIdentifier =\n        this.normalizeInstanceIdentifier(instanceIdentifier);\n\n      try {\n        // `getOrInitializeService()` should always return a valid instance since a component is guaranteed. use ! to make typescript happy.\n        const instance = this.getOrInitializeService({\n          instanceIdentifier: normalizedIdentifier\n        })!;\n        instanceDeferred.resolve(instance);\n      } catch (e) {\n        // when the instance factory throws an exception, it should not cause\n        // a fatal error. We just leave the promise unresolved.\n      }\n    }\n  }\n\n  clearInstance(identifier: string = DEFAULT_ENTRY_NAME): void {\n    this.instancesDeferred.delete(identifier);\n    this.instancesOptions.delete(identifier);\n    this.instances.delete(identifier);\n  }\n\n  // app.delete() will call this method on every provider to delete the services\n  // TODO: should we mark the provider as deleted?\n  async delete(): Promise<void> {\n    const services = Array.from(this.instances.values());\n\n    await Promise.all([\n      ...services\n        .filter(service => 'INTERNAL' in service) // legacy services\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        .map(service => (service as any).INTERNAL!.delete()),\n      ...services\n        .filter(service => '_delete' in service) // modularized services\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        .map(service => (service as any)._delete())\n    ]);\n  }\n\n  isComponentSet(): boolean {\n    return this.component != null;\n  }\n\n  isInitialized(identifier: string = DEFAULT_ENTRY_NAME): boolean {\n    return this.instances.has(identifier);\n  }\n\n  getOptions(identifier: string = DEFAULT_ENTRY_NAME): Record<string, unknown> {\n    return this.instancesOptions.get(identifier) || {};\n  }\n\n  initialize(opts: InitializeOptions = {}): NameServiceMapping[T] {\n    const { options = {} } = opts;\n    const normalizedIdentifier = this.normalizeInstanceIdentifier(\n      opts.instanceIdentifier\n    );\n    if (this.isInitialized(normalizedIdentifier)) {\n      throw Error(\n        `${this.name}(${normalizedIdentifier}) has already been initialized`\n      );\n    }\n\n    if (!this.isComponentSet()) {\n      throw Error(`Component ${this.name} has not been registered yet`);\n    }\n\n    const instance = this.getOrInitializeService({\n      instanceIdentifier: normalizedIdentifier,\n      options\n    })!;\n\n    // resolve any pending promise waiting for the service instance\n    for (const [\n      instanceIdentifier,\n      instanceDeferred\n    ] of this.instancesDeferred.entries()) {\n      const normalizedDeferredIdentifier =\n        this.normalizeInstanceIdentifier(instanceIdentifier);\n      if (normalizedIdentifier === normalizedDeferredIdentifier) {\n        instanceDeferred.resolve(instance);\n      }\n    }\n\n    return instance;\n  }\n\n  /**\n   *\n   * @param callback - a function that will be invoked  after the provider has been initialized by calling provider.initialize().\n   * The function is invoked SYNCHRONOUSLY, so it should not execute any longrunning tasks in order to not block the program.\n   *\n   * @param identifier An optional instance identifier\n   * @returns a function to unregister the callback\n   */\n  onInit(callback: OnInitCallBack<T>, identifier?: string): () => void {\n    const normalizedIdentifier = this.normalizeInstanceIdentifier(identifier);\n    const existingCallbacks =\n      this.onInitCallbacks.get(normalizedIdentifier) ??\n      new Set<OnInitCallBack<T>>();\n    existingCallbacks.add(callback);\n    this.onInitCallbacks.set(normalizedIdentifier, existingCallbacks);\n\n    const existingInstance = this.instances.get(normalizedIdentifier);\n    if (existingInstance) {\n      callback(existingInstance, normalizedIdentifier);\n    }\n\n    return () => {\n      existingCallbacks.delete(callback);\n    };\n  }\n\n  /**\n   * Invoke onInit callbacks synchronously\n   * @param instance the service instance`\n   */\n  private invokeOnInitCallbacks(\n    instance: NameServiceMapping[T],\n    identifier: string\n  ): void {\n    const callbacks = this.onInitCallbacks.get(identifier);\n    if (!callbacks) {\n      return;\n    }\n    for (const callback of callbacks) {\n      try {\n        callback(instance, identifier);\n      } catch {\n        // ignore errors in the onInit callback\n      }\n    }\n  }\n\n  private getOrInitializeService({\n    instanceIdentifier,\n    options = {}\n  }: {\n    instanceIdentifier: string;\n    options?: Record<string, unknown>;\n  }): NameServiceMapping[T] | null {\n    let instance = this.instances.get(instanceIdentifier);\n    if (!instance && this.component) {\n      instance = this.component.instanceFactory(this.container, {\n        instanceIdentifier: normalizeIdentifierForFactory(instanceIdentifier),\n        options\n      });\n      this.instances.set(instanceIdentifier, instance);\n      this.instancesOptions.set(instanceIdentifier, options);\n\n      /**\n       * Invoke onInit listeners.\n       * Note this.component.onInstanceCreated is different, which is used by the component creator,\n       * while onInit listeners are registered by consumers of the provider.\n       */\n      this.invokeOnInitCallbacks(instance, instanceIdentifier);\n\n      /**\n       * Order is important\n       * onInstanceCreated() should be called after this.instances.set(instanceIdentifier, instance); which\n       * makes `isInitialized()` return true.\n       */\n      if (this.component.onInstanceCreated) {\n        try {\n          this.component.onInstanceCreated(\n            this.container,\n            instanceIdentifier,\n            instance\n          );\n        } catch {\n          // ignore errors in the onInstanceCreatedCallback\n        }\n      }\n    }\n\n    return instance || null;\n  }\n\n  private normalizeInstanceIdentifier(\n    identifier: string = DEFAULT_ENTRY_NAME\n  ): string {\n    if (this.component) {\n      return this.component.multipleInstances ? identifier : DEFAULT_ENTRY_NAME;\n    } else {\n      return identifier; // assume multiple instances are supported before the component is provided.\n    }\n  }\n\n  private shouldAutoInitialize(): boolean {\n    return (\n      !!this.component &&\n      this.component.instantiationMode !== InstantiationMode.EXPLICIT\n    );\n  }\n}\n\n// undefined should be passed to the service factory for the default instance\nfunction normalizeIdentifierForFactory(identifier: string): string | undefined {\n  return identifier === DEFAULT_ENTRY_NAME ? undefined : identifier;\n}\n\nfunction isComponentEager<T extends Name>(component: Component<T>): boolean {\n  return component.instantiationMode === InstantiationMode.EAGER;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Provider } from './provider';\nimport { Component } from './component';\nimport { Name } from './types';\n\n/**\n * ComponentContainer that provides Providers for service name T, e.g. `auth`, `auth-internal`\n */\nexport class ComponentContainer {\n  private readonly providers = new Map<string, Provider<Name>>();\n\n  constructor(private readonly name: string) {}\n\n  /**\n   *\n   * @param component Component being added\n   * @param overwrite When a component with the same name has already been registered,\n   * if overwrite is true: overwrite the existing component with the new component and create a new\n   * provider with the new component. It can be useful in tests where you want to use different mocks\n   * for different tests.\n   * if overwrite is false: throw an exception\n   */\n  addComponent<T extends Name>(component: Component<T>): void {\n    const provider = this.getProvider(component.name);\n    if (provider.isComponentSet()) {\n      throw new Error(\n        `Component ${component.name} has already been registered with ${this.name}`\n      );\n    }\n\n    provider.setComponent(component);\n  }\n\n  addOrOverwriteComponent<T extends Name>(component: Component<T>): void {\n    const provider = this.getProvider(component.name);\n    if (provider.isComponentSet()) {\n      // delete the existing provider from the container, so we can register the new component\n      this.providers.delete(component.name);\n    }\n\n    this.addComponent(component);\n  }\n\n  /**\n   * getProvider provides a type safe interface where it can only be called with a field name\n   * present in NameServiceMapping interface.\n   *\n   * Firebase SDKs providing services should extend NameServiceMapping interface to register\n   * themselves.\n   */\n  getProvider<T extends Name>(name: T): Provider<T> {\n    if (this.providers.has(name)) {\n      return this.providers.get(name) as unknown as Provider<T>;\n    }\n\n    // create a Provider for a service that hasn't registered with Firebase\n    const provider = new Provider<T>(name, this);\n    this.providers.set(name, provider as unknown as Provider<Name>);\n\n    return provider as Provider<T>;\n  }\n\n  getProviders(): Array<Provider<Name>> {\n    return Array.from(this.providers.values());\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport type LogLevelString =\n  | 'debug'\n  | 'verbose'\n  | 'info'\n  | 'warn'\n  | 'error'\n  | 'silent';\n\nexport interface LogOptions {\n  level: LogLevelString;\n}\n\nexport type LogCallback = (callbackParams: LogCallbackParams) => void;\n\nexport interface LogCallbackParams {\n  level: LogLevelString;\n  message: string;\n  args: unknown[];\n  type: string;\n}\n\n/**\n * A container for all of the Logger instances\n */\nexport const instances: Logger[] = [];\n\n/**\n * The JS SDK supports 5 log levels and also allows a user the ability to\n * silence the logs altogether.\n *\n * The order is a follows:\n * DEBUG < VERBOSE < INFO < WARN < ERROR\n *\n * All of the log types above the current log level will be captured (i.e. if\n * you set the log level to `INFO`, errors will still be logged, but `DEBUG` and\n * `VERBOSE` logs will not)\n */\nexport enum LogLevel {\n  DEBUG,\n  VERBOSE,\n  INFO,\n  WARN,\n  ERROR,\n  SILENT\n}\n\nconst levelStringToEnum: { [key in LogLevelString]: LogLevel } = {\n  'debug': LogLevel.DEBUG,\n  'verbose': LogLevel.VERBOSE,\n  'info': LogLevel.INFO,\n  'warn': LogLevel.WARN,\n  'error': LogLevel.ERROR,\n  'silent': LogLevel.SILENT\n};\n\n/**\n * The default log level\n */\nconst defaultLogLevel: LogLevel = LogLevel.INFO;\n\n/**\n * We allow users the ability to pass their own log handler. We will pass the\n * type of log, the current log level, and any other arguments passed (i.e. the\n * messages that the user wants to log) to this function.\n */\nexport type LogHandler = (\n  loggerInstance: Logger,\n  logType: LogLevel,\n  ...args: unknown[]\n) => void;\n\n/**\n * By default, `console.debug` is not displayed in the developer console (in\n * chrome). To avoid forcing users to have to opt-in to these logs twice\n * (i.e. once for firebase, and once in the console), we are sending `DEBUG`\n * logs to the `console.log` function.\n */\nconst ConsoleMethod = {\n  [LogLevel.DEBUG]: 'log',\n  [LogLevel.VERBOSE]: 'log',\n  [LogLevel.INFO]: 'info',\n  [LogLevel.WARN]: 'warn',\n  [LogLevel.ERROR]: 'error'\n};\n\n/**\n * The default log handler will forward DEBUG, VERBOSE, INFO, WARN, and ERROR\n * messages on to their corresponding console counterparts (if the log method\n * is supported by the current log level)\n */\nconst defaultLogHandler: LogHandler = (instance, logType, ...args): void => {\n  if (logType < instance.logLevel) {\n    return;\n  }\n  const now = new Date().toISOString();\n  const method = ConsoleMethod[logType as keyof typeof ConsoleMethod];\n  if (method) {\n    console[method as 'log' | 'info' | 'warn' | 'error'](\n      `[${now}]  ${instance.name}:`,\n      ...args\n    );\n  } else {\n    throw new Error(\n      `Attempted to log a message with an invalid logType (value: ${logType})`\n    );\n  }\n};\n\nexport class Logger {\n  /**\n   * Gives you an instance of a Logger to capture messages according to\n   * Firebase's logging scheme.\n   *\n   * @param name The name that the logs will be associated with\n   */\n  constructor(public name: string) {\n    /**\n     * Capture the current instance for later use\n     */\n    instances.push(this);\n  }\n\n  /**\n   * The log level of the given Logger instance.\n   */\n  private _logLevel = defaultLogLevel;\n\n  get logLevel(): LogLevel {\n    return this._logLevel;\n  }\n\n  set logLevel(val: LogLevel) {\n    if (!(val in LogLevel)) {\n      throw new TypeError(`Invalid value \"${val}\" assigned to \\`logLevel\\``);\n    }\n    this._logLevel = val;\n  }\n\n  // Workaround for setter/getter having to be the same type.\n  setLogLevel(val: LogLevel | LogLevelString): void {\n    this._logLevel = typeof val === 'string' ? levelStringToEnum[val] : val;\n  }\n\n  /**\n   * The main (internal) log handler for the Logger instance.\n   * Can be set to a new function in internal package code but not by user.\n   */\n  private _logHandler: LogHandler = defaultLogHandler;\n  get logHandler(): LogHandler {\n    return this._logHandler;\n  }\n  set logHandler(val: LogHandler) {\n    if (typeof val !== 'function') {\n      throw new TypeError('Value assigned to `logHandler` must be a function');\n    }\n    this._logHandler = val;\n  }\n\n  /**\n   * The optional, additional, user-defined log handler for the Logger instance.\n   */\n  private _userLogHandler: LogHandler | null = null;\n  get userLogHandler(): LogHandler | null {\n    return this._userLogHandler;\n  }\n  set userLogHandler(val: LogHandler | null) {\n    this._userLogHandler = val;\n  }\n\n  /**\n   * The functions below are all based on the `console` interface\n   */\n\n  debug(...args: unknown[]): void {\n    this._userLogHandler && this._userLogHandler(this, LogLevel.DEBUG, ...args);\n    this._logHandler(this, LogLevel.DEBUG, ...args);\n  }\n  log(...args: unknown[]): void {\n    this._userLogHandler &&\n      this._userLogHandler(this, LogLevel.VERBOSE, ...args);\n    this._logHandler(this, LogLevel.VERBOSE, ...args);\n  }\n  info(...args: unknown[]): void {\n    this._userLogHandler && this._userLogHandler(this, LogLevel.INFO, ...args);\n    this._logHandler(this, LogLevel.INFO, ...args);\n  }\n  warn(...args: unknown[]): void {\n    this._userLogHandler && this._userLogHandler(this, LogLevel.WARN, ...args);\n    this._logHandler(this, LogLevel.WARN, ...args);\n  }\n  error(...args: unknown[]): void {\n    this._userLogHandler && this._userLogHandler(this, LogLevel.ERROR, ...args);\n    this._logHandler(this, LogLevel.ERROR, ...args);\n  }\n}\n\nexport function setLogLevel(level: LogLevelString | LogLevel): void {\n  instances.forEach(inst => {\n    inst.setLogLevel(level);\n  });\n}\n\nexport function setUserLogHandler(\n  logCallback: LogCallback | null,\n  options?: LogOptions\n): void {\n  for (const instance of instances) {\n    let customLogLevel: LogLevel | null = null;\n    if (options && options.level) {\n      customLogLevel = levelStringToEnum[options.level];\n    }\n    if (logCallback === null) {\n      instance.userLogHandler = null;\n    } else {\n      instance.userLogHandler = (\n        instance: Logger,\n        level: LogLevel,\n        ...args: unknown[]\n      ) => {\n        const message = args\n          .map(arg => {\n            if (arg == null) {\n              return null;\n            } else if (typeof arg === 'string') {\n              return arg;\n            } else if (typeof arg === 'number' || typeof arg === 'boolean') {\n              return arg.toString();\n            } else if (arg instanceof Error) {\n              return arg.message;\n            } else {\n              try {\n                return JSON.stringify(arg);\n              } catch (ignored) {\n                return null;\n              }\n            }\n          })\n          .filter(arg => arg)\n          .join(' ');\n        if (level >= (customLogLevel ?? instance.logLevel)) {\n          logCallback({\n            level: LogLevel[level].toLowerCase() as LogLevelString,\n            message,\n            args,\n            type: instance.name\n          });\n        }\n      };\n    }\n  }\n}\n"],"names":["CONSTANTS","assert","assertion","message","assertionError","Error","stringToByteArray","str","out","p","i","length","c","charCodeAt","base64","byteToCharMap_","charToByteMap_","byteToCharMapWebSafe_","charToByteMapWebSafe_","ENCODED_VALS_BASE","ENCODED_VALS","this","ENCODED_VALS_WEBSAFE","HAS_NATIVE_SUPPORT","atob","encodeByteArray","input","webSafe","Array","isArray","init_","byteToCharMap","output","byte1","haveByte2","byte2","haveByte3","byte3","outByte1","outByte2","outByte3","outByte4","push","join","encodeString","btoa","decodeString","bytes","pos","c1","String","fromCharCode","c2","u","c3","byteArrayToString","decodeStringToByteArray","charToByteMap","charAt","byte4","base64Encode","utf8Bytes","base64urlEncodeWithoutPadding","replace","base64Decode","e","console","error","deepCopy","value","deepExtend","undefined","target","source","Object","constructor","Date","getTime","prop","hasOwnProperty","getUA","navigator","isMobileCordova","window","test","isBrowserExtension","runtime","chrome","browser","id","isReactNative","isIE","ua","indexOf","isNodeSdk","isIndexedDBAvailable","indexedDB","validateIndexedDBOpenable","Promise","resolve","reject","preExist","DB_CHECK_NAME","request","self","open","onsuccess","result","close","deleteDatabase","onupgradeneeded","onerror","_a","areCookiesEnabled","cookieEnabled","getDefaultsFromGlobal","global","getGlobal","__FIREBASE_DEFAULTS__","getDefaults","process","defaultsJsonString","defaultsJsonPath","__FIREBASE_DEFAULTS_PATH__","warn","JSON","parse","require","getDefaultsFromEnvVariable","document","match","cookie","decoded","getDefaultsFromCookie","getDefaultEmulatorHost","productName","_b","getDefaultAppConfig","config","getExperimentalSetting","name","Deferred","promise","callback","catch","createMockUserToken","token","projectId","uid","project","iat","sub","user_id","payload","iss","aud","exp","auth_time","firebase","sign_in_provider","identities","stringify","alg","type","FirebaseError","code","customData","setPrototypeOf","prototype","captureStackTrace","ErrorFactory","create","service","serviceName","errors","fullCode","template","replaceTemplate","fullMessage","data","PATTERN","_","key","jsonEval","decode","header","claims","signature","parts","split","isValidFormat","isAdmin","contains","obj","call","safeGet","isEmpty","map","fn","contextObj","res","deepEqual","a","b","aKeys","keys","bKeys","k","includes","aProp","bProp","isObject","thing","querystring","querystringParams","params","forEach","arrayVal","encodeURIComponent","entries","querystringDecode","decodeURIComponent","extractQuerystring","url","queryStart","fragmentStart","substring","Sha1","chain_","buf_","W_","pad_","inbuf_","total_","blockSize","reset","buf","offset","W","t","f","d","lengthMinusBlock","n","inbuf","compress_","digest","totalBits","update","j","createSubscribe","executor","onNoObservers","proxy","ObserverProxy","subscribe","bind","observers","unsubscribes","observerCount","task","finalized","then","forEachObserver","observer","next","complete","nextOrObserver","methods","method","implementsAnyMethods","noop","unsub","unsubscribeOne","finalError","sendOne","err","errorPrefix","fnName","argName","high","stringLength","MAX_VALUE_MILLIS","calculateBackoffMillis","backoffCount","intervalMillis","backoffFactor","currBaseValue","Math","pow","randomWait","round","random","min","getModularInstance","_delegate","SDK_VERSION","DOMStorageWrapper","domStorage_","prefix_","removeItem","prefixedName_","setItem","storedVal","getItem","toString","MemoryStorage","cache_","isInMemoryStorage","createStoragefor","domStorageName","domStorage","PersistentStorage","SessionStorage","logClient","Logger","LUIDGenerator","sha1","sha1Bytes","buildLogMessage_","arg","apply","logger","firstLog_","enableLogging","logger_","persistent","logLevel","LogLevel","log","set","remove","get","varArgs","logWrapper","prefix","fatal","isInvalidJSONNumber","Number","POSITIVE_INFINITY","NEGATIVE_INFINITY","MIN_NAME","MAX_NAME","nameCompare","aAsInt","tryParseInt","bAsInt","stringCompare","requireKey","ObjectToUniqueKey","sort","splitStringBySize","segsize","len","dataSegs","each","doubleToIEEE754String","v","s","ln","bias","Infinity","abs","floor","LN2","bits","reverse","hexByteString","hexByte","parseInt","substr","toLowerCase","INTEGER_REGEXP_","RegExp","INTEGER_32_MIN","INTEGER_32_MAX","intVal","exceptionGuard","setTimeout","stack","setTimeoutNonBlocking","time","timeout","Deno","unrefTimer","AppCheckTokenProvider","appName_","appCheckProvider","appCheck","getImmediate","optional","forceRefresh","getToken","listener","addTokenListener","FirebaseAuthTokenProvider","firebaseOptions_","authProvider_","auth_","onInit","auth","addAuthTokenListener","removeAuthTokenListener","errorMessage","EmulatorTokenProvider","accessToken","PROTOCOL_VERSION","FORGE_DOMAIN_RE","WEBSOCKET","LONG_POLLING","RepoInfo","host","secure","namespace","webSocketOnly","nodeAdmin","persistenceKey","includeNamespaceInQueryParams","_host","_domain","internalHost","newHost","isCacheableHost","toURLString","protocol","query","repoInfoConnectionURL","repoInfo","connURL","isCustomHost","repoInfoNeedsQueryParam","pairs","StatsCollection","counters_","amount","collections","reporters","statsManagerGetCollection","hashString","PacketReceiver","onMessage_","pendingResponses","currentResponseNum","closeAfterResponse","onClose","responseNum","requestNum","toProcess","FIREBASE_LONGPOLL_START_PARAM","FIREBASE_LONGPOLL_CLOSE_COMMAND","BrowserPollConnection","connId","applicationId","appCheckToken","authToken","transportSessionId","lastSessionId","bytesSent","bytesReceived","everConnected_","log_","stats_","urlFn","onMessage","onDisconnect","curSegmentNum","onDisconnect_","myPacketOrderer","isClosed_","connectTimeoutTimer_","onClosed_","readyState","called","wrappedFn","body","addEventListener","attachEvent","executeWhenDOMReady","scriptTagHolder","FirebaseIFrameScriptHolder","args","command","arg1","arg2","incrementIncomingBytes_","clearTimeout","password","sendNewPolls","closeAfter","pN","handleResponse","urlParams","uniqueCallbackIdentifier","location","hostname","connectURL","addTag","startLongPoll","addDisconnectPingFrame","myDisconnFrame","removeChild","shutdown_","dataStr","incrementCounter","base64data","MAX_URL_DATA_SIZE","enqueueSegment","pw","createElement","src","style","display","appendChild","forceAllow_","forceDisallow_","href","Windows","UI","commandCB","onMessageCB","outstandingRequests","Set","pendingSegs","currentSerial","myIFrame","createIFrame_","script","domain","iframeContents","doc","write","alive","innerHTML","myID","myPW","newRequest_","size","theURL","curDataString","theSeg","shift","seg","ts","addLongPollTag_","segnum","totalsegs","serial","add","doNewRequest","delete","keepaliveTimeout","loadCB","doNodeLongPoll","newScript","async","onload","onreadystatechange","rstate","parentNode","iframe","contentWindow","contentDocument","WebSocketImpl","MozWebSocket","WebSocket","WebSocketConnection","keepaliveTimer","frames","totalFrames","connectionURL_","options","device","headers","platform","env","origin","mySock","onopen","onclose","onmessage","m","handleIncomingFrame","fullMess","jsonMess","frameCount","isNaN","handleNewFrameCount_","mess","resetKeepAlive","appendFrame_","remainingData","extractFrameCount_","sendString_","clearInterval","setInterval","send","isOldAndroid","userAgent","oldAndroidMatch","parseFloat","TransportManager","initTransports_","isWebSocketsAvailable","isSkipPollConnection","previouslyFailed","transports_","transports","ALL_TRANSPORTS","transport","globalTransportInitialized_","Connection","repoInfo_","applicationId_","appCheckToken_","authToken_","onReady_","onKill_","connectionCount","pendingDataMessages","state_","transportManager_","start_","conn","initialTransport","conn_","nextTransportId_","primaryResponsesRequired_","onMessageReceived","connReceiver_","onConnectionLost","disconnReceiver_","tx_","rx_","secondaryConn_","isHealthy_","healthyTimeoutMS","healthyTimeout_","markConnectionHealthy","everConnected","onConnectionLost_","onSecondaryConnectionLost_","onPrimaryMessageReceived_","onSecondaryMessageReceived_","dataMsg","msg","sendData_","controlData","cmd","upgradeIfSecondaryHealthy_","secondaryResponsesRequired_","parsedData","layer","onSecondaryControl_","proceedWithUpgrade_","start","tryCleanupConnection","onControl_","onDataMessage_","onPrimaryResponse_","onHandshake_","onConnectionShutdown_","onReset_","sendPingOnPrimaryIfNecessary_","handshake","timestamp","version","h","sessionId","onConnectionEstablished_","tryStartUpgrade_","upgradeTransport","startUpgrade_","closeConnections_","reason","ServerActions","pathString","onComplete","hash","stats","EventEmitter","allowedEvents_","listeners_","eventType","listeners","context","validateEventType_","eventData","getInitialEvent","splice","find","et","OnlineMonitor","online_","trigger","Path","pathOrString","pieceNum","pieces_","copyTo","pieceNum_","newEmptyPath","pathGetFront","path","pathGetLength","pathPopFront","pathGetBack","pathSlice","begin","slice","pathParent","pieces","pathChild","childPathObj","childPieces","pathIsEmpty","newRelativePath","outerPath","innerPath","outer","inner","pathEquals","other","pathContains","ValidationPath","errorPrefix_","parts_","byteLength_","max","validationPathCheckValid","validationPath","validationPathToErrorString","VisibilityMonitor","hidden","visibilityChange","visible_","visible","RECONNECT_MIN_DELAY","PersistentConnection","onDataUpdate_","onConnectStatus_","onServerInfoUpdate_","authTokenProvider_","appCheckTokenProvider_","authOverride_","nextPersistentConnectionId_","interruptReasons_","listens","Map","outstandingPuts_","outstandingGets_","outstandingPutCount_","outstandingGetCount_","onDisconnectRequestQueue_","connected_","reconnectDelay_","maxReconnectDelay_","securityDebugCallback_","establishConnectionTimer_","requestCBHash_","requestNumber_","realtime_","forceTokenRefresh_","invalidAuthTokenCount_","invalidAppCheckTokenCount_","firstConnection_","lastConnectionAttemptTime_","lastConnectionEstablishedTime_","getInstance","on","onVisible_","onOnline_","action","onResponse","curReqNum","r","sendRequest","initConnection_","deferred","outstandingGet","_path","q","_queryObject","index","sendGet_","currentHashFn","tag","queryId","_queryIdentifier","has","_queryParams","isDefault","loadsAllData","listenSpec","hashFn","sendListen_","req","status","warnOnListenWarnings_","removeListen_","tryAuth","reduceReconnectDelayIfAdminCredential_","credential","tryAppCheck","authMethod","requestData","cred","onAuthRevoked_","onAppCheckRevoked_","sendUnlisten_","queryObj","sendOnDisconnect_","response","putInternal","sendPut_","queued","errorReason","reqNum","onDataPush_","onListenRevoked_","onSecurityDebugPacket_","handleTimestamp_","sendConnectStats_","restoreState_","establishConnection_","scheduleConnect_","online","cancelSentTransactions_","shouldReconnect_","timeSinceLastConnectAttempt","reconnectDelay","onDataMessage","onReady","onRealtimeDisconnect_","nextConnectionId_","canceled","connection","closeFn","sendRequestFn","all","interrupt","delta","serverTimeOffset","put","listen","normalizedPathString","statusCode","explanation","notifyForInvalidToken","values","queries","clientName","reportStats","currentlyOnline","warnings","indexSpec","getIndex","indexPath","__EMPTY_NODE","NamedNode","node","Index","compare","oldNode","newNode","oldWrapped","newWrapped","MIN","KeyIndex","indexValue","val","KEY_INDEX","SortedMapIterator","startKey","comparator","isReverse_","resultGenerator_","nodeStack_","cmp","left","right","pop","LLRBNode","color","RED","SortedMap","EMPTY_NODE","count","inorderTraversal","reverseTraversal","min_","maxKey","copy","insert","fixUp_","isRed_","moveRedLeft_","removeMin_","smallest","rotateRight_","moveRedRight_","rotateLeft_","colorFlip_","nl","nr","blackDepth","check_","MAX_NODE","LLRBEmptyNode","comparator_","root_","BLACK","rightParent","minKey","resultGenerator","NAME_ONLY_COMPARATOR","NAME_COMPARATOR","__childrenNodeConstructor","nodeFromJSON","priorityHashText","priority","validatePriorityNode","priorityNode","isLeafNode","getPriority","LeafNode","value_","priorityNode_","lazyHash_","newPriorityNode","childName","childNode","newChildNode","updatePriority","updateImmediateChild","front","updateChild","exportFormat","getValue","toHash","compareToLeafNode_","otherLeaf","otherLeafType","thisLeafType","otherIndex","VALUE_TYPE_ORDER","thisIndex","equals","_defaultIndexMap","PriorityIndex","aPriority","bPriority","indexCmp","compareTo","PRIORITY_INDEX","LOG_2","Base12Num","num","current_","mask","bits_","buildChildSet","childList","keyFn","mapSortFn","buildBalancedTree","low","namedNode","middle","root","base12","buildPennant","chunkSize","childTree","attachPennant","pennant","isOne","nextBitIsOne","buildFrom12Array","fallbackObject","IndexMap","indexes_","indexSet_","indexKey","sortedMap","indexDefinition","existingChildren","newIndex","sawIndexedValue","iter","getIterator","Wrap","getNext","isDefinedOn","getCompare","indexName","newIndexSet","newIndexes","indexedChildren","existingSnap","newChildren","ChildrenNode","children_","indexMap_","child","getImmediateChild","getChild","newIndexMap","removeFromIndexes","addToIndexes","newPriority","newImmediateChild","numKeys","allIntegerKeys","forEachChild","array","childHash","idx","resolveIndex_","predecessor","getPredecessorKey","getFirstChildName","getLastChildName","wrappedNode","getIteratorFrom","minPost","startPost","iterator","peek","getReverseIteratorFrom","maxPost","endPost","hasIndex","addIndex","otherChildrenNode","thisIter","otherIter","thisCurrent","otherCurrent","Default","MaxNode","defineProperties","MAX","setPriorityMaxNode","json","jsonLeaf","childData","children","childrenHavePriority","hinzeJsonObj","childSet","sortedChildSet","setNodeFromJSON","PathIndex","indexPath_","snap","aChild","extractChild","bChild","valueNode","ValueIndex","VALUE_INDEX","PUSH_CHARS","lastPushTime","lastRandChars","changeValue","snapshotNode","changeChildAdded","changeChildRemoved","changeChildChanged","oldSnap","QueryParams","limitSet_","startSet_","startNameSet_","startAfterSet_","endSet_","endNameSet_","endBeforeSet_","limit_","viewFrom_","indexStartValue_","indexStartName_","indexEndValue_","indexEndName_","index_","queryParamsToRestQueryStringParameters","queryParams","orderBy","qs","isViewFromLeft","queryParamsGetQueryObject","viewFrom","ReadonlyRestClient","listens_","listenId","getListenId_","thisListen","queryStringParameters","restRequest_","xhr","XMLHttpRequest","responseText","SnapshotHolder","rootNode_","newSnapshotNode","newSparseSnapshotTree","sparseSnapshotTreeRemember","sparseSnapshotTree","clear","childKey","sparseSnapshotTreeForEachTree","prefixPath","func","tree","sparseSnapshotTreeForEachChild","OperationType","StatsListener","collection_","last_","newStats","stat","StatsReporter","collection","server_","statsToReport_","statsListener_","reportStats_","reportedStats","haveStatsToReport","newOperationSourceServerTaggedQuery","fromUser","fromServer","tagged","emptyChildrenSingleton","AckUserWrite","affectedTree","revert","ACK_USER_WRITE","subtree","Overwrite","OVERWRITE","Merge","MERGE","CacheNode","node_","fullyInitialized_","filtered_","isFullyInitialized","isCompleteForChild","hasChild","eventGeneratorGenerateEventsForType","eventGenerator","events","changes","registrations","eventCache","filteredChanges","filter","change","aWrapped","bWrapped","eventGeneratorCompareChanges","materializedChange","prevName","getPredecessorChildName","eventGeneratorMaterializeSingleChange","registration","respondsTo","createEvent","query_","newViewCache","serverCache","viewCacheUpdateEventSnap","viewCache","eventSnap","filtered","viewCacheUpdateServerSnap","serverSnap","viewCacheGetCompleteEventSnap","getNode","viewCacheGetCompleteServerSnap","EmptyChildren","ImmutableTree","relativePath","predicate","childExistingPathAndValue","findRootMostMatchingPathAndValue","toSet","newChild","newTree","setTree","fold_","pathSoFar","accum","findOnPath_","pathToFollow","nextChild","foreachOnPath_","currentRelativePath","foreach_","childPath","childSnap","CompoundWrite","writeTree_","compoundWriteAddWrite","compoundWrite","rootmost","findRootMostValueAndPath","rootMostPath","newWriteTree","compoundWriteAddWrites","updates","newWrite","compoundWriteRemoveWrite","empty","compoundWriteHasCompleteWrite","compoundWriteGetCompleteNode","compoundWriteGetCompleteChildren","compoundWriteChildCompoundWrite","shadowingNode","compoundWriteIsEmpty","compoundWriteApply","applySubtreeWrite","writeTree","priorityWrite","writeTreeChildWrites","newWriteTreeRef","writeTreeGetWrite","writeId","allWrites","record","writeTreeRemoveWrite","findIndex","writeToRemove","removedWriteWasVisible","removedWriteOverlapsWithOtherWrites","currentWrite","writeTreeRecordContainsPath_","visibleWrites","writeTreeLayerTree_","writeTreeDefaultFilter_","lastWriteId","writeTreeResetTree_","writeRecord","writes","treeRoot","writePath","deepNode","writeTreeCalcCompleteEventCache","treePath","completeServerCache","writeIdsToExclude","includeHiddenWrites","merge","subMerge","writeTreeRefCalcCompleteEventCache","writeTreeRef","writeTreeRefCalcCompleteEventChildren","completeServerChildren","completeChildren","topLevelSet","writeTreeCalcCompleteEventChildren","writeTreeRefCalcEventCacheAfterServerOverwrite","existingEventSnap","existingServerSnap","childMerge","writeTreeCalcEventCacheAfterServerOverwrite","writeTreeRefShadowingWrite","writeTreeShadowingWrite","writeTreeRefCalcIndexedSlice","completeServerData","toIterate","withIndex","nodes","writeTreeCalcIndexedSlice","writeTreeRefCalcCompleteChild","existingServerCache","writeTreeCalcCompleteChild","writeTreeRefChild","ChildChangeAccumulator","changeMap","oldChange","oldType","from","NO_COMPLETE_CHILD_SOURCE","NoCompleteChildSource_","WriteTreeCompleteChildSource","writes_","viewCache_","optCompleteServerCache_","serverNode","viewProcessorApplyOperation","viewProcessor","oldViewCache","operation","writesCache","completeCache","filterServerNode","accumulator","overwrite","viewProcessorApplyUserOverwrite","isFiltered","viewProcessorApplyServerOverwrite","changedChildren","curViewCache","foreach","viewProcessorCacheHasChild","viewProcessorApplyUserMerge","viewProcessorApplyServerMerge","ackUserWrite","newEventCache","oldEventCache","serverChildren","updateFullNode","filtersNodes","viewProcessorRevertUserWrite","ackPath","isCompleteForPath","mergePath","serverCachePath","viewProcessorAckUserWrite","LISTEN_COMPLETE","oldServerNode","viewProcessorGenerateEventCacheAfterServerEvent","viewProcessorListenComplete","getChanges","isLeafOrEmpty","oldCompleteSnap","viewProcessorMaybeAddValueEvent","changePath","oldEventSnap","completeEventChildren","completeNode","oldEventNode","updatedPriority","newEventChild","childChangePath","eventChildUpdate","changedSnap","newServerCache","oldServerSnap","serverFilter","getIndexedFilter","newServerNode","oldChild","getCompleteChild","viewProcessorApplyMerge","viewMergeTree","childMergeTree","isUnknownDeepMerge","referenceConstructor","viewGetCompleteServerCache","view","cache","viewApplyOperation","processor_","isIndexed","viewGenerateEventsForChanges_","eventRegistration","eventRegistrations_","eventRegistrations","moves","indexedValueChanged","eventGeneratorGenerateEventsForChanges","eventGenerator_","syncPointApplyOperation","syncPoint","optCompleteServerCache","views","concat","syncPointGetCompleteServerCache","SyncTree","listenProvider_","syncPointTree_","pendingWriteTree_","tagToQueryMap","queryToTagMap","syncTreeApplyUserOverwrite","syncTree","newData","writeTreeAddOverwrite","syncTreeApplyOperationToSyncPoints_","syncTreeAckUserWrite","needToReevaluate","syncTreeApplyServerOverwrite","syncTreeApplyTaggedQueryOverwrite","queryKey","syncTreeQueryKeyForTag_","syncTreeParseQueryKey_","queryPath","syncTreeApplyTaggedOperation_","syncTreeCalcCompleteEventCache","findOnPath","syncTreeApplyOperationHelper_","syncPointTree","syncTreeApplyOperationDescendantsHelper_","childOperation","operationForChild","childServerCache","childWritesCache","splitIndex","ExistingValueProvider","DeferredValueProvider","syncTree_","path_","resolveDeferredLeafValue","existingVal","serverValues","resolveScalarDeferredValue","resolveComplexDeferredValue","op","existing","unused","existingNode","resolveDeferredValueTree","resolveDeferredValue","resolveDeferredValueSnapshot","rawPri","leafNode","childrenNode","Tree","parent","childCount","treeSubTree","pathObj","treeGetValue","treeSetValue","treeUpdateParents","treeHasChildren","treeForEachChild","treeForEachDescendant","includeSelf","childrenFirst","treeGetPath","childEmpty","treeIsEmpty","childExists","treeUpdateChild","INVALID_KEY_REGEX_","INVALID_PATH_REGEX_","MAX_LEAF_SIZE_","isValidKey","isValidPathString","validateFirebaseData","hasDotValue","hasActualChild","last","validationPathPop","validateUrl","parsedUrl","isValidRootPathString","errorPrefixFxn","EventQueue","eventLists_","recursionDepth_","eventQueueQueueEvents","eventQueue","eventDataList","currList","getPath","eventQueueRaiseEventsForChangedPath","changedPath","eventQueueRaiseQueuedEventsMatchingPredicate","eventPath","sentAll","eventList","eventListRaise","eventFn","getEventRunner","INTERRUPT_REASON","Repo","forceRestClient_","appCheckProvider_","dataUpdateCount","eventQueue_","nextWriteId_","interceptServerDataCallback_","transactionQueueTree_","persistentConnection_","repoStart","repo","appId","authOverride","search","isMerge","repoOnDataUpdate","repoOnConnectStatus","connectStatus","repoUpdateInfo","repoOnServerInfoUpdate","addTokenChangeListener","refreshAuthToken","refreshAppCheckToken","statsReporter_","creatorFunction","statsManagerGetOrCreateReporter","infoData_","infoSyncTree_","startListening","infoEvents","stopListening","serverSyncTree_","unlisten","repoServerTime","repoGenerateServerValues","taggedChildren","raw","changeTree","fromObject","syncTreeApplyTaggedQueryMerge","taggedSnap","syncTreeApplyServerMerge","affectedPath","repoRerunTransactions","repoLog","resolvedOnDisconnectTree","resolved","repoAbortTransactions","repoRunOnDisconnectEvents","updateSnapshot","repoGetNextWriteId","repoInterrupt","repoGetLatestState","excludeSets","repoSendReadyTransactions","repoPruneCompletedTransactionsBelowNode","queue","repoBuildTransactionQueue","allRun","every","transaction","repoSendTransactionQueue","setsToIgnore","txn","currentWriteId","latestState","snapToSend","latestHash","retryCount","currentOutputSnapshotRaw","dataToSend","pathToSend","callbacks","currentOutputSnapshotResolved","unwatcher","abortReason","rootMostTransactionNode","repoGetAncestorTransactionNode","abortTransaction","currentNode","currentInputSnapshot","newDataNode","oldWriteId","newNodeResolved","applyLocally","repoRerunTransactionQueue","transactionNode","transactionQueue","repoAggregateTransactionQueuesForNode","order","nodeQueue","to","treeForEachAncestor","repoAbortTransactionsOnNode","lastSent","parseRepoInfo","dataURL","parseDatabaseURL","scheme","subdomain","port","colonInd","slashInd","questionMarkInd","pathStringDecoded","piece","decodePath","queryString","results","segment","kv","decodeQuery","hostWithoutPort","dotInd","QueryImpl","_repo","_orderByCalled","ReferenceImpl","sameRepo","samePath","sameQueryIdentifier","pathToUrlEncodedString","parentPath","ref","syncPointSetReferenceConstructor","syncTreeSetReferenceConstructor","repos","useRestClient","repoManagerApplyEmulatorSettings","tokenProvider","repoManagerDatabaseFromApp","app","authProvider","dbUrl","databaseURL","isEmulator","dbEmulatorHost","authTokenProvider","OWNER","appRepos","repoManagerCreateRepo","Database","_repoInternal","_instanceStarted","_rootInternal","appName","repoManagerDeleteRepo","apiName","getDatabase","getApp","db","_getProvider","identifier","databaseEmulatorHost","connectDatabaseEmulator","_checkNotDeleted","mockUserToken","simpleListen","echo","onEcho","variant","setSDKVersion","_registerComponent","Component","container","instanceIdentifier","getProvider","setMultipleInstances","registerVersion","asyncGeneratorStep","gen","_next","_throw","info","done","_asyncToGenerator","arguments","_createForOfIteratorHelper","o","allowArrayLike","it","Symbol","F","_e","TypeError","normalCompletion","didErr","step","_e2","_regeneratorRuntime","exports","Op","hasOwn","$Symbol","iteratorSymbol","asyncIteratorSymbol","asyncIterator","toStringTagSymbol","toStringTag","define","defineProperty","enumerable","configurable","writable","wrap","innerFn","outerFn","tryLocsList","protoGenerator","Generator","generator","Context","_invoke","state","doneResult","delegate","delegateResult","maybeInvokeDelegate","ContinueSentinel","sent","_sent","dispatchException","abrupt","tryCatch","GeneratorFunction","GeneratorFunctionPrototype","IteratorPrototype","getProto","getPrototypeOf","NativeIteratorPrototype","Gp","defineIteratorMethods","AsyncIterator","PromiseImpl","invoke","__await","unwrapped","previousPromise","callInvokeWithMethodAndArg","resultName","nextLoc","pushTryEntry","locs","entry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","resetTryEntry","completion","iterable","iteratorMethod","displayName","isGeneratorFunction","genFun","ctor","mark","__proto__","awrap","object","skipTempReset","prev","stop","rootRecord","rval","exception","handle","loc","caught","hasCatch","hasFinally","finallyEntry","finish","thrown","delegateYield","idbProxyableTypes","cursorAdvanceMethods","cursorRequestMap","WeakMap","transactionDoneMap","transactionStoreNamesMap","transformCache","reverseTransformCache","idbProxyTraps","receiver","IDBTransaction","objectStoreNames","objectStore","wrapFunction","IDBDatabase","IDBCursor","advance","continue","continuePrimaryKey","unwrap","storeNames","tx","transformCachableValue","removeEventListener","DOMException","cacheDonePromiseForTransaction","IDBObjectStore","IDBIndex","some","Proxy","IDBRequest","success","promisifyRequest","newValue","readMethods","writeMethods","cachedMethods","getMethod","targetFuncName","useIndex","isWrite","storeName","store","oldTraps","PlatformLoggerServiceImpl","getProviders","provider","component","getComponent","isVersionServiceProvider","library","logString","DEFAULT_ENTRY_NAME","PLATFORM_LOG_STRING","_apps","_components","_addComponent","addComponent","debug","componentName","heartbeatController","triggerHeartbeat","ERRORS","ERROR_FACTORY","FirebaseAppImpl","_isDeleted","_options","_config","_name","_automaticDataCollectionEnabled","automaticDataCollectionEnabled","_container","checkDestroyed","isDeleted","initializeApp","rawConfig","existingApp","ComponentContainer","newApp","libraryKeyOrName","libraryMismatch","versionMismatch","warning","STORE_NAME","dbPromise","getDbPromise","blocked","upgrade","blocking","terminated","openPromise","event","oldVersion","newVersion","openDB","createObjectStore","originalErrorMessage","readHeartbeatsFromIndexedDB","computeKey","idbGetError","writeHeartbeatsToIndexedDB","heartbeatObject","HeartbeatServiceImpl","_heartbeatsCache","_storage","HeartbeatStorageImpl","_heartbeatsCachePromise","read","platformLogger","agent","getPlatformInfoString","date","getUTCDateString","lastSentHeartbeatDate","heartbeats","singleDateHeartbeat","hbTimestamp","valueOf","now","extractHeartbeatsForHeader","heartbeatsToSend","unsentEntries","headerString","toISOString","heartbeatsCache","maxSize","heartbeatEntry","hb","dates","countBytes","_canUseIndexedDBPromise","runIndexedDBEnvironmentCheck","idbHeartbeatObject","heartbeatsObject","existingHeartbeatsObject","instanceFactory","multipleInstances","serviceProps","instantiationMode","onInstanceCreated","mode","props","Provider","instances","instancesDeferred","instancesOptions","onInitCallbacks","normalizedIdentifier","normalizeInstanceIdentifier","isInitialized","shouldAutoInitialize","instance","getOrInitializeService","isComponentEager","instanceDeferred","services","INTERNAL","_delete","opts","isComponentSet","normalizedDeferredIdentifier","existingCallbacks","existingInstance","invokeOnInitCallbacks","providers","setComponent","levelStringToEnum","DEBUG","VERBOSE","INFO","WARN","ERROR","SILENT","defaultLogLevel","ConsoleMethod","defaultLogHandler","logType","_logLevel","_logHandler","_userLogHandler"],"sourceRoot":""}