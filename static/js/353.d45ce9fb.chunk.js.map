{"version":3,"file":"static/js/353.d45ce9fb.chunk.js","mappings":"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","sources":["../node_modules/@firebase/util/dist|sync","Firebase__config.js","services/Authencation/Discount.jsx","services/Authencation/Report.jsx","services/Product/Product.jsx"],"sourcesContent":["function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nwebpackEmptyContext.id = 9163;\nmodule.exports = webpackEmptyContext;","// Import the functions you need from the SDKs you need\r\nimport { initializeApp, } from \"firebase/app\";\r\nimport { getAnalytics } from \"firebase/analytics\";\r\nimport { getDatabase } from \"firebase/database\";\r\nimport { getAuth } from \"firebase/auth\";\r\nimport { getStorage } from \"firebase/storage\";\r\nimport { getFirestore } from \"@firebase/firestore\";\r\n\r\n// TODO: Add SDKs for Firebase products that you want to use\r\n// https://firebase.google.com/docs/web/setup#available-libraries\r\n\r\n\r\n\r\n// Your web app's Firebase configuration\r\n// For Firebase JS SDK v7.20.0 and later, measurementId is optional\r\nconst firebaseConfig = {\r\n  apiKey: \"AIzaSyAtjM6gkzd2kDsw6WpebznsF6R57X_PTSo\",\r\n  authDomain: \"bepnhamemo-5a215.firebaseapp.com\",\r\n  databaseURL: \"https://bepnhamemo-5a215-default-rtdb.asia-southeast1.firebasedatabase.app\",\r\n  projectId: \"bepnhamemo-5a215\",\r\n  storageBucket: \"bepnhamemo-5a215.appspot.com\",\r\n  messagingSenderId: \"668768910306\",\r\n  appId: \"1:668768910306:web:ba64b9ac5bb23bf2b897bb\",\r\n  measurementId: \"G-F88TEFKJD0\"\r\n};\r\n\r\n\r\n\r\n// Initialize Firebase\r\nconst app = initializeApp(firebaseConfig);\r\n\r\nexport const auth = getAuth(app);\r\nexport const database = getDatabase(app);\r\nexport const storage = getStorage(app);\r\nexport const db = getFirestore(app);\r\n\r\nexport default app\r\n\r\n\r\n// hàm bt -> hàm firebase -> data\r\n\r\n// bật thằng này lên trc khi test // \r\n","import {db} from '../../Firebase__config'\r\nimport { addDoc, arrayUnion, collection, doc, getDoc, getDocs, query, serverTimestamp, setDoc, updateDoc, Timestamp, increment } from \"firebase/firestore\";\r\n\r\nconst CollectionName = \"Discount\";\r\n\r\n//Add new Discount\r\n\r\nexport const AddDiscount = async(newDiscount) =>{\r\n    const {\r\n        NameDiscount,\r\n        DescriptionDiscount,\r\n        PercentDiscount,\r\n        Exp,\r\n        Mfg,\r\n        Quantity,\r\n    } = newDiscount;\r\n    const CollectionRef = collection(db, CollectionName);\r\n    const initDiscount = {\r\n        NameDiscount:NameDiscount,\r\n        DescriptionDiscount:DescriptionDiscount,\r\n        PercentDiscount:PercentDiscount*100,\r\n        Exp: await Timestamp.fromDate(new Date(Exp)),\r\n        Mfg: await Timestamp.fromDate(new Date(Mfg)),\r\n        Quantity:Quantity,\r\n    }\r\n    return await addDoc(CollectionRef, initDiscount)\r\n    .then(e=>{\r\n        return{\r\n            success: true,\r\n            payload: initDiscount,\r\n        }\r\n    })\r\n    .catch((e)=>{\r\n        return{\r\n            success:false,\r\n            payload:e,\r\n        }\r\n    })\r\n};\r\n\r\n/*\r\nEXP: expiry date\r\nMFG: manufacturing date\r\n */\r\n/*\r\nDiscount for product conditionsApply > quantitySoldOrMonth Before\r\n*/\r\nexport const DiscountForProduct = async(newDiscount)=>{\r\n    const {NameDiscount,PercentDiscount,conditionsApply} = newDiscount;\r\n    const initDiscount={\r\n        NameDiscount:NameDiscount,\r\n        PercentDiscount:PercentDiscount,\r\n        ConditionsApply:conditionsApply\r\n    }\r\n    return await addDoc(collection(db, CollectionName), initDiscount)\r\n}\r\n\r\nexport const GetConditionsApply = async(dpid)=>{\r\n    const docRef = doc(db,CollectionName,dpid);\r\n    const docSnap = await getDoc(docRef);\r\n    if (docSnap.exists()) {\r\n        return {\r\n            success: true,\r\n            payload: {\r\n                Info: docSnap.data().ConditionsApply,\r\n            }\r\n        }\r\n    } else {\r\n        // doc.data() will be undefined in this case\r\n        return {\r\n            success: false,\r\n            payload: \"No such document!\",\r\n        }\r\n    }\r\n}\r\n//Get PercentDiscount by id\r\nexport const GetPercentDiscountByID = async(did) =>{\r\n    const docRef = doc(db,CollectionName,did);\r\n    const docSnap = await getDoc(docRef);\r\n    let PercentDiscount = \"\";\r\n    if(docSnap.exists()){\r\n        PercentDiscount = await docSnap.data().PercentDiscount;\r\n        return PercentDiscount;\r\n    }\r\n    else{\r\n        return{\r\n            success:false,\r\n            payload:\"No such document!\",\r\n    }\r\n}\r\n}\r\n\r\n//Get quantity discount\r\nexport const GetQuantityDiscount = async(did) =>{\r\n    const docRef = doc(db,CollectionName,did);\r\n    const docSnap = await getDoc(docRef);\r\n    let Quantity = \"\";\r\n    if(docSnap.exists()){\r\n        Quantity = await docSnap.data().Quantity;\r\n        return Quantity;\r\n    }\r\n    else{\r\n        return{\r\n            success:false,\r\n            payload:\"No such document!\",\r\n    }\r\n}\r\n}\r\n//Get exp\r\nexport const GetExp = async(did) =>{\r\n    const docRef = doc(db,CollectionName,did);\r\n    const docSnap = await getDoc(docRef);\r\n    let Exp = \"\";\r\n    if(docSnap.exists()){\r\n        Exp = await docSnap.data().Exp.toMillis();\r\n        return Exp;\r\n    }\r\n    else{\r\n        return{\r\n            success:false,\r\n            payload:\"No such document!\",\r\n    }\r\n}\r\n}\r\n//Get mfg\r\nexport const GetMfg = async(did) =>{\r\n    const docRef = doc(db,CollectionName,did);\r\n    const docSnap = await getDoc(docRef);\r\n    let Mfg = \"\";\r\n    if(docSnap.exists()){\r\n        Mfg = await docSnap.data().Mfg.toMillis();\r\n        return Mfg;\r\n        \r\n    }\r\n    else{\r\n        return{\r\n            success:false,\r\n            payload:\"No such document!\",\r\n    }\r\n}\r\n}\r\n//Check discount\r\nexport const CheckDiscount = async(did) =>{\r\n    const MFG = await GetMfg(did);\r\n    const EXP = await GetExp(did);\r\n    const Time = new Date();\r\n    const now = Time.getTime();\r\n    const quantity = await GetQuantityDiscount(did);\r\n    let PercentDiscount = await GetPercentDiscountByID(did);\r\n    if((now>=MFG && now<=EXP)&&quantity>0){\r\n        return PercentDiscount;\r\n    }\r\n    else{\r\n        return 0;\r\n    }\r\n}\r\n\r\n//-1 discount add to button pay \r\nexport const IncrementDiscount = async(did) =>{\r\n    const docRef = doc(db,CollectionName,did);\r\n    await updateDoc(docRef,{\r\n        Quantity:(await GetQuantityDiscount(did)-1).toString(),\r\n    })\r\n}","import {  arrayRemove, arrayUnion, collection, doc, getDoc, getDocs, setDoc, updateDoc, Timestamp } from 'firebase/firestore'\r\nimport { db } from '../../Firebase__config'\r\nimport { GetAllProduct, GetNameProduct } from '../Product/Product'\r\n\r\n\r\nconst CollectionName = \"RevenuePerMonth\"\r\nconst Now = new Date(Date.now());\r\nconst Month = Now.toLocaleString(\"en\", { month: \"long\" });\r\nconst Year = Now.getFullYear();\r\nconst subName = Month + \" \" + Year;\r\nconst revID = \"oZaVDRFI6OBiZvDs4I9W\";\r\nconst subID = Month + Year;\r\nconst docRef = doc(db, CollectionName, revID, subName, subID);\r\n/*\r\nAdd RevenuePerMonth\r\n*/\r\n\r\nexport const AddRevenuePerMonth = async () => {\r\n\r\n    const newRev = {\r\n        Item: [],\r\n        TotalQuantitySold: \"\"\r\n    }\r\n\r\n    function surprise() {\r\n        (function loop(AddRevenuePerMonth) {\r\n            var now = new Date();\r\n            if (now.getDate() === 1 && now.getHours() === 0 && now.getMinutes() === 0) {\r\n                setDoc(docRef, newRev);\r\n            }\r\n            now = new Date();                  // allow for time passing\r\n            var delay = 60000 - (now % 60000); // exact ms to next minute interval\r\n            setTimeout(loop, delay);\r\n        })();\r\n    }\r\n    return surprise();\r\n}\r\nexport const AddProductToRevenue = async (pid, quantity) => {\r\n    const NameProduct = await GetNameProduct(pid);\r\n    const initProduct = {\r\n        NameProduct: NameProduct,\r\n        QuantitySold: quantity,\r\n        Pid: pid\r\n    }\r\n    await updateDoc(docRef, {\r\n        Item: arrayUnion(initProduct)\r\n    });\r\n\r\n    const docSnap = await getDoc(docRef);\r\n    let QuantitySold = 0;\r\n    for (let i = 0; i < docSnap.data().Item.length; i++) {\r\n        if (docSnap.data().Item[i].QuantitySold === 0) {\r\n            await updateDoc(docRef, {\r\n                Item: arrayRemove(\r\n                    docSnap.data().Item[i]\r\n                )\r\n            })\r\n        }\r\n        else {\r\n            QuantitySold += docSnap.data().Item[i].QuantitySold\r\n        }\r\n    }\r\n    await updateDoc(docRef, {\r\n        QuantitySold: QuantitySold\r\n    })\r\n}\r\n\r\nexport const RevenuePerMonth = async () => {\r\n    const docsSnap = await getDocs(collection(db, \"PurchaseHistory\"))\r\n    const ListPurchase = [];\r\n    const month = Now.getMonth() + 1;\r\n    const year = Now.getFullYear();\r\n    docsSnap.forEach(doc => {\r\n        ListPurchase.push({\r\n            PurId: doc.id,\r\n            Month: doc.data().DayPurchased.toDate().getMonth() + 1,\r\n            Year: doc.data().DayPurchased.toDate().getFullYear(),\r\n            Item: doc.data().Item\r\n        })\r\n    })\r\n    const ListProduct = await (await GetAllProduct()).payload;\r\n    const ListItem = [];\r\n    for (let i = 0; i < ListPurchase.length; i++) {\r\n        if (month === ListPurchase[i].Month && year === ListPurchase[i].Year) {\r\n            ListItem.push(ListPurchase[i].Item);\r\n        }\r\n    }\r\n    const flatValues = ListItem.reduce((total, value) => {\r\n        return total.concat(value);\r\n    }, []);\r\n\r\n    for (let i = 0; i < ListProduct.length; i++) {\r\n        let total = 0;\r\n        for (let j = 0; j < flatValues.length; j++) {\r\n\r\n            if (ListProduct[i].Pid === flatValues[j].pid) {\r\n                total += flatValues[j].quantity\r\n            }\r\n\r\n        }\r\n        await AddProductToRevenue(ListProduct[i].Pid, total);\r\n\r\n    }\r\n}\r\n\r\nexport const GetQuantitySoldProductOrMonth = async (pid, month, year) => {\r\n    try{\r\n        if (month >= 1 && month <= 12) {\r\n            const date = new Date(year, month - 1);\r\n            const dateM = date.toLocaleString(\"en\", { month: \"long\" });\r\n            const dateY = date.getFullYear();\r\n            const querySubNameID = dateM + dateY;\r\n            const querySubName = dateM + \" \" + dateY;\r\n            const docRefQuan = doc(db, CollectionName, revID, querySubName, querySubNameID);\r\n            const docSnap = await getDoc(docRefQuan);\r\n            if (docSnap.exists()) {\r\n                console.log(\"2\",docSnap.data())\r\n                let total = 0;\r\n                docSnap.data().Item.map(item=>{\r\n                    if(item.Pid === pid){\r\n                        total += item.QuantitySold;\r\n                    }\r\n                })\r\n\r\n                return {\r\n                    success: true,\r\n                    payload: total\r\n                }\r\n            }\r\n            else {\r\n                return {\r\n                    success: false,\r\n                    payload: \"No such document!\"\r\n                }\r\n            }\r\n    \r\n        }\r\n        else {\r\n            return {\r\n                success: false,\r\n                payload: \"\"\r\n            }\r\n        }\r\n        return {\r\n            success: false,\r\n            payload: 0\r\n        }\r\n    }catch(err){\r\n        console.log(err);\r\n    }\r\n    \r\n}\r\n// get total number \r\nexport const GetTotalQuantitySoldOrMonth = async (month, year) => {\r\n    if (month >= 1 && month <= 12) {\r\n        const date = new Date(year, month - 1);\r\n        const dateM = date.toLocaleString(\"en\", { month: \"long\" });\r\n        const dateY = date.getFullYear();\r\n        const querySubNameID = dateM + dateY;\r\n        const querySubName = dateM + \" \" + dateY;\r\n        const docRefQuan = doc(db, CollectionName, revID, querySubName, querySubNameID);\r\n        const docSnap = await getDoc(docRefQuan);\r\n        if (docSnap.exists()) {\r\n            return {\r\n                success: true,\r\n                payload: docSnap.data().QuantitySold\r\n            }\r\n        }\r\n        else {\r\n            return {\r\n                success: false,\r\n                payload: 0\r\n            }\r\n        }\r\n    }\r\n    else {\r\n        return {\r\n            success: false,\r\n            payload: 0\r\n        }\r\n    }\r\n}\r\n\r\n// get all infomation in month\r\nexport const GetRevenuePerMonth = async (month, year) => {\r\n    if (month >= 1 && month <= 12) {\r\n        const date = new Date(year, month - 1);\r\n        const dateM = date.toLocaleString(\"en\", { month: \"long\" });\r\n        const dateY = date.getFullYear();\r\n        const querySubNameID = dateM + dateY;\r\n        const querySubName = dateM + \" \" + dateY;\r\n        const docRefQuan = doc(db, CollectionName, revID, querySubName, querySubNameID);\r\n        const docSnap = await getDoc(docRefQuan);\r\n        if (docSnap.exists()) {\r\n            return {\r\n                success: true,\r\n                payload: docSnap.data()\r\n            }\r\n        }\r\n        else {\r\n            return {\r\n                success: false,\r\n                payload: \"No such document!\"\r\n            }\r\n        }\r\n    }\r\n    else {\r\n        return {\r\n            success: false,\r\n            payload: \"\"\r\n        }\r\n    }\r\n}","import {db} from '../../Firebase__config'\r\nimport { addDoc, collection, deleteDoc, doc, getDoc, getDocs, increment, limit, orderBy, query, serverTimestamp, setDoc, Timestamp,updateDoc,where } from \"firebase/firestore\";\r\nimport { GetRevenuePerMonth } from '../Authencation/Report';\r\nimport { GetConditionsApply, GetPercentDiscountByID } from '../Authencation/Discount';\r\n\r\nconst CollectionName = \"Product\"\r\n\r\nexport const AddNewProduct = async (newProduct) => {\r\n    const {\r\n        NameProduct,\r\n        DescriptionProduct,\r\n        Ingerdient,\r\n        Price,\r\n        Quantity,\r\n        ImageIdProduct,\r\n        exp,\r\n        mfg,\r\n        Classify,\r\n    } = newProduct;\r\n    const initNewProduct = {\r\n        NameProduct: NameProduct,\r\n        DescriptionProduct: DescriptionProduct,\r\n        Ingerdient: Ingerdient,\r\n        Price: Price,\r\n        Quantity: Quantity,\r\n        Image: ImageIdProduct,\r\n        exp: Timestamp.fromDate(new Date(exp)),\r\n        mfg: Timestamp.fromDate(new Date(mfg)),\r\n        Classify: Classify,\r\n        DayProduce: serverTimestamp(),\r\n\r\n    }\r\n    const colRef = collection(db, CollectionName)\r\n    return await addDoc(colRef, initNewProduct)\r\n        .then(e => {\r\n            return {\r\n                success: true,\r\n                payload: initNewProduct,\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            return {\r\n                success: false,\r\n                payload: error,\r\n            }\r\n        })\r\n\r\n};\r\n\r\n// Timestamp cover date by toDate()\r\nexport const GetProductById = async(pid)=>{\r\n    const docRef = doc(db, CollectionName, pid);   \r\n    const docSnap = await getDoc(docRef);\r\n    if (docSnap.exists()) {\r\n        return {\r\n            success: true,\r\n            payload:{\r\n                Pid:pid,\r\n                Info:docSnap.data(),\r\n            }\r\n        }\r\n    } else {\r\n        // doc.data() will be undefined in this case\r\n        return {\r\n            success: false,\r\n            payload:\"No such document!\",\r\n        }\r\n    }\r\n} \r\n\r\n //Get 6 new product\r\n export const getNewProduct = async(number) => {\r\n    const colRef = collection(db, CollectionName);\r\n    return await getDocs(query(colRef, orderBy(\"DayProduce\", \"asc\"), limit(number)))\r\n    .then(async(docs)=>{\r\n        let ListProduct = [];\r\n        docs.forEach(item=>{\r\n            ListProduct.push({\r\n                Pid:item.id,\r\n                Info:item.data()\r\n            })\r\n        })\r\n        return {\r\n            success: true,\r\n            payload:ListProduct\r\n        }\r\n    })\r\n    .catch(err => {\r\n        return {\r\n            success: false,\r\n            payload:err\r\n        }\r\n    });\r\n  \r\n}\r\n\r\n// get all product\r\nexport const GetAllProduct = async() => {\r\n    try{\r\n        const colRef = collection(db, CollectionName);\r\n        const docsSnap = await getDocs(colRef);\r\n        let ListProduct = []\r\n        docsSnap.forEach(doc => {\r\n            ListProduct.push({\r\n                Pid:doc.id,\r\n                Info:doc.data()\r\n            })\r\n            \r\n        })\r\n        return {\r\n            success: true,\r\n            payload:ListProduct,\r\n        }\r\n    }catch(e){\r\n        return {\r\n            success: false,\r\n            payload:null,\r\n        }\r\n    }\r\n    \r\n}\r\n//Classify product\r\nexport const classifyProduct = async(ClassifyName) =>{\r\n    if(ClassifyName == null){\r\n        return await GetAllProduct();\r\n    }\r\n    const colRef = collection(db,CollectionName);\r\n    return await getDocs(query(colRef,\r\n         where(\"Classify\",\"==\",`${ClassifyName}`)\r\n    ))\r\n    .then(async(docs)=>{\r\n        console.log(docs)\r\n        let ListProduct = [];\r\n        docs.forEach(item=>{\r\n            ListProduct.push({\r\n                Pid:item.id,\r\n                Info:item.data()\r\n            })\r\n        })\r\n        return{\r\n            success: true,\r\n            payload:ListProduct\r\n        }\r\n    })\r\n    .catch(err =>{\r\n        return {\r\n            success: false,\r\n            payload:err\r\n        }\r\n    });      \r\n}\r\n// get by sort\r\n//name = PriceProduct,NameProduct, QuantityProduct\r\n//proviso = desc/asc\r\n // desc =  Decrease\r\n // asc = Ascending \r\nexport const sortProduct = async(name = \"\", proviso = \"\") =>{\r\n    const colRef = collection(db, CollectionName);\r\n    return await getDocs(query(colRef, orderBy(`${name}`, `${proviso}`) ))\r\n    .then(async(docs)=>{\r\n        let ListProduct = [];\r\n        docs.forEach(item=>{\r\n            ListProduct.push({\r\n                Pid:item.id,\r\n                Info:item.data()\r\n            })\r\n        })\r\n        return {\r\n            success: true,\r\n            payload:ListProduct\r\n        }\r\n    })\r\n    .catch(err => {\r\n        return {\r\n            success: false,\r\n            payload:err\r\n        }\r\n    });\r\n            \r\n}\r\n\r\n//Search for Product\r\nexport const searchProduct = async(querrText)=>{\r\n    const colRef = collection(db, CollectionName);\r\n    const docsSnap = await getDocs(colRef);\r\n    let curProduct = []\r\n    docsSnap.forEach(doc => {\r\n        curProduct.push({\r\n            Pid:doc.id,\r\n            Info:doc.data()\r\n        })\r\n    })\r\n    const indexProduct = curProduct.filter((e,index)=>{  \r\n        \r\n        const tmp = e.Info.NameProduct.toLowerCase().includes(querrText.toLowerCase()) \r\n        console.log(tmp, e.Info.NameProduct.toLowerCase(),querrText.toLowerCase())\r\n        return tmp;\r\n    })\r\n    if(indexProduct.length > 0){\r\n        return{\r\n            success: true,\r\n            payload:indexProduct,\r\n        }\r\n    } else{\r\n        return{\r\n            success: false,\r\n            payload:[],\r\n        }\r\n    }\r\n}\r\n\r\n//Add best sell products\r\nexport const AddBestSell=async(pid,quantity)=>{\r\n    const docRef = doc(db,\"BestSellProduct\",pid);\r\n    const docSnap = await getDoc(docRef);\r\n    let infoProduct = await GetProductById(pid);\r\n    if(docSnap.exists()){\r\n    await updateDoc(docRef,{\r\n        Pid:pid,\r\n        Info:infoProduct.payload.Info,\r\n        QuantitySold: increment(quantity)\r\n        })\r\n    }else{\r\n    const initBestSell = {\r\n        Pid:pid,\r\n        Info:infoProduct.payload.Info,\r\n        QuantitySold:quantity,\r\n    } \r\n    await setDoc(docRef,initBestSell);\r\n}\r\n}\r\n//Best sell Product\r\nexport const GetBestsellProduct = async(number)=>{\r\n    const colRef = collection(db, \"BestSellProduct\");\r\n    return await getDocs(query(colRef,orderBy(\"QuantitySold\",\"desc\"),limit(number)))\r\n    .then(async(docs)=>{\r\n        console.log(docs)\r\n        let ListProduct =[];\r\n        docs.forEach(item=>{\r\n            ListProduct.push({\r\n                Info:item.data().Info,\r\n                Pid:item.id,\r\n            })\r\n        })\r\n        return{\r\n            success:true,\r\n            payload:ListProduct\r\n        }\r\n    })\r\n    .catch((err)=>{\r\n        return{\r\n            success:false,\r\n            payload:err,\r\n        }\r\n    })\r\n\r\n}\r\n\r\n//Get name Product\r\nexport const GetNameProduct = async(pid)=>{\r\n    const docRef = doc(db, CollectionName,pid);\r\n    const docSnap = await getDoc(docRef);\r\n    let NameProduct = \"\";\r\n    if(docSnap.exists()){\r\n        NameProduct = docSnap.data().NameProduct;\r\n        return await NameProduct;\r\n    }\r\n    else{\r\n        return{\r\n            success: false,\r\n            payload:\"No product\"\r\n        }\r\n    }\r\n}\r\n//Get PriceProduct\r\nexport const GetPriceProduct = async(pid)=>{\r\n    const docRef = doc(db, CollectionName,pid);\r\n    const docSnap = await getDoc(docRef);\r\n    let PriceProduct = \"\";\r\n    if(docSnap.exists()){\r\n        PriceProduct = docSnap.data().Price;\r\n        return PriceProduct;\r\n    }\r\n    else{\r\n        return{\r\n            success: false,\r\n            payload:\"No product\"\r\n        }\r\n    }\r\n}\r\n//Get Quantity Product By it\r\nexport const GetQuantityProduct = async(pid)=>{\r\n    const docRef = doc(db, CollectionName,pid);\r\n    const docSnap = await getDoc(docRef);\r\n    let Quantity = \"\";\r\n    if(docSnap.exists()){\r\n        Quantity = docSnap.data().Quantity;\r\n        return Quantity;\r\n    }\r\n    else{\r\n        return{\r\n            success: false,\r\n            payload:\"No product\"\r\n        }\r\n    }\r\n}\r\n\r\n//Update product\r\nexport const updateProduct = async (pid, updateInfo) => {\r\n    const {\r\n        NameProduct,\r\n        DescriptionProduct,\r\n        Ingerdient,\r\n        Price,\r\n        Quantity,\r\n        ImageIdProduct,\r\n        exp,\r\n        mfg,\r\n        Classify,\r\n    } = updateInfo;\r\n    const docRef = doc(db, CollectionName, pid);\r\n    return await updateDoc(docRef, {\r\n        NameProduct: NameProduct,\r\n        DescriptionProduct: DescriptionProduct,\r\n        Ingerdient: Ingerdient,\r\n        Price: Price,\r\n        Quantity: Quantity,\r\n        Image: ImageIdProduct,\r\n        exp: Timestamp.fromDate(new Date(exp)),\r\n        mfg: Timestamp.fromDate(new Date(mfg)),\r\n        Classify: Classify,\r\n    })\r\n        .then(docRef => {\r\n            return {\r\n                success: true,\r\n                payload: \"Product information was updated successfully.\"\r\n            }\r\n        })\r\n        .catch(e => {\r\n            return {\r\n                success: false,\r\n                payload: e\r\n            }\r\n        })\r\n}\r\n\r\n//Delete Product\r\nexport const deleteProduct = async (pid) => {\r\n    try {\r\n        await deleteDoc(doc(db, CollectionName, pid))\r\n        return {\r\n            success: true,\r\n            payload: \"Product removed\"\r\n        }\r\n    }\r\n    catch (e) {\r\n        return {\r\n            success: false,\r\n            payload: e,\r\n        }\r\n    }\r\n}\r\n\r\n//Check conditionsApply Discount for product\r\n\r\nexport const CheckConditionApplyDiscount = async (dpid) =>{\r\n    const Now = new Date(Date.now());\r\n    const Month = Now.getMonth()+1;\r\n    const Year = Now.getFullYear();\r\n    const ListRev = await (await GetRevenuePerMonth( Month, Year)).payload.Item;\r\n    const ConditionsApply = await(await GetConditionsApply(dpid)).payload.Info\r\n    const PercentDiscount = await GetPercentDiscountByID(dpid)\r\n    const ListProduct = [];\r\n    for(let i=0;i<ListRev.length;i++){\r\n        if(ListRev[i].QuantitySold>=ConditionsApply){\r\n            ListProduct.push(ListRev[i])\r\n        }\r\n    }\r\n    for(let i=0;i<ListProduct.length;i++){\r\n        const Price = await GetPriceProduct(ListProduct[i].Pid);\r\n        await updateDoc(doc(db,CollectionName,ListProduct[i].Pid),{\r\n            Discount:PercentDiscount,\r\n            PriceDiscount: Price*(1-PercentDiscount)\r\n        })\r\n    }\r\n}"],"names":["webpackEmptyContext","req","e","Error","code","keys","resolve","id","module","exports","app","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","auth","getAuth","storage","getDatabase","getStorage","db","getFirestore","CollectionName","GetPercentDiscountByID","did","docRef","doc","getDoc","docSnap","PercentDiscount","exists","data","success","payload","GetQuantityDiscount","Quantity","GetExp","Exp","toMillis","GetMfg","Mfg","CheckDiscount","MFG","EXP","Time","Date","now","getTime","quantity","Now","Month","toLocaleString","month","Year","getFullYear","subName","revID","subID","GetQuantitySoldProductOrMonth","pid","year","date","dateM","dateY","querySubNameID","querySubName","docRefQuan","console","log","total","Item","map","item","Pid","QuantitySold","GetTotalQuantitySoldOrMonth","AddNewProduct","newProduct","NameProduct","DescriptionProduct","Ingerdient","Price","ImageIdProduct","exp","mfg","Classify","initNewProduct","Image","Timestamp","DayProduce","serverTimestamp","colRef","collection","addDoc","then","catch","error","GetProductById","Info","getNewProduct","number","getDocs","query","orderBy","limit","docs","ListProduct","forEach","push","err","GetAllProduct","docsSnap","classifyProduct","ClassifyName","where","searchProduct","querrText","curProduct","indexProduct","filter","index","tmp","toLowerCase","includes","length","AddBestSell","infoProduct","updateDoc","increment","initBestSell","setDoc","GetBestsellProduct","GetQuantityProduct","updateProduct","updateInfo","deleteProduct","deleteDoc"],"sourceRoot":""}